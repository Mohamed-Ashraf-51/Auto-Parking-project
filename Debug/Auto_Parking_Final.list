
Auto_Parking_Final.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007868  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a4  08007a08  08007a08  00017a08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bac  08007bac  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007bac  08007bac  00017bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bb4  08007bb4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bb4  08007bb4  00017bb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bb8  08007bb8  00017bb8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007bbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004ae0  20000010  08007bcc  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20004af0  08007bcc  00024af0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014f3b  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000036a4  00000000  00000000  00034fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001298  00000000  00000000  00038668  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e35  00000000  00000000  00039900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018b6c  00000000  00000000  0003a735  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001634d  00000000  00000000  000532a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00095a13  00000000  00000000  000695ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004de0  00000000  00000000  000ff004  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00103de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000010 	.word	0x20000010
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080079f0 	.word	0x080079f0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000014 	.word	0x20000014
 80001dc:	080079f0 	.word	0x080079f0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_d2iz>:
 8000a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a94:	d215      	bcs.n	8000ac2 <__aeabi_d2iz+0x36>
 8000a96:	d511      	bpl.n	8000abc <__aeabi_d2iz+0x30>
 8000a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000aa0:	d912      	bls.n	8000ac8 <__aeabi_d2iz+0x3c>
 8000aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ab2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ab6:	bf18      	it	ne
 8000ab8:	4240      	negne	r0, r0
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ac6:	d105      	bne.n	8000ad4 <__aeabi_d2iz+0x48>
 8000ac8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	bf08      	it	eq
 8000ace:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ad2:	4770      	bx	lr
 8000ad4:	f04f 0000 	mov.w	r0, #0
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop

08000adc <__aeabi_uldivmod>:
 8000adc:	b953      	cbnz	r3, 8000af4 <__aeabi_uldivmod+0x18>
 8000ade:	b94a      	cbnz	r2, 8000af4 <__aeabi_uldivmod+0x18>
 8000ae0:	2900      	cmp	r1, #0
 8000ae2:	bf08      	it	eq
 8000ae4:	2800      	cmpeq	r0, #0
 8000ae6:	bf1c      	itt	ne
 8000ae8:	f04f 31ff 	movne.w	r1, #4294967295
 8000aec:	f04f 30ff 	movne.w	r0, #4294967295
 8000af0:	f000 b970 	b.w	8000dd4 <__aeabi_idiv0>
 8000af4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000af8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000afc:	f000 f806 	bl	8000b0c <__udivmoddi4>
 8000b00:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b04:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b08:	b004      	add	sp, #16
 8000b0a:	4770      	bx	lr

08000b0c <__udivmoddi4>:
 8000b0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b10:	9e08      	ldr	r6, [sp, #32]
 8000b12:	460d      	mov	r5, r1
 8000b14:	4604      	mov	r4, r0
 8000b16:	460f      	mov	r7, r1
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d14a      	bne.n	8000bb2 <__udivmoddi4+0xa6>
 8000b1c:	428a      	cmp	r2, r1
 8000b1e:	4694      	mov	ip, r2
 8000b20:	d965      	bls.n	8000bee <__udivmoddi4+0xe2>
 8000b22:	fab2 f382 	clz	r3, r2
 8000b26:	b143      	cbz	r3, 8000b3a <__udivmoddi4+0x2e>
 8000b28:	fa02 fc03 	lsl.w	ip, r2, r3
 8000b2c:	f1c3 0220 	rsb	r2, r3, #32
 8000b30:	409f      	lsls	r7, r3
 8000b32:	fa20 f202 	lsr.w	r2, r0, r2
 8000b36:	4317      	orrs	r7, r2
 8000b38:	409c      	lsls	r4, r3
 8000b3a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000b3e:	fa1f f58c 	uxth.w	r5, ip
 8000b42:	fbb7 f1fe 	udiv	r1, r7, lr
 8000b46:	0c22      	lsrs	r2, r4, #16
 8000b48:	fb0e 7711 	mls	r7, lr, r1, r7
 8000b4c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000b50:	fb01 f005 	mul.w	r0, r1, r5
 8000b54:	4290      	cmp	r0, r2
 8000b56:	d90a      	bls.n	8000b6e <__udivmoddi4+0x62>
 8000b58:	eb1c 0202 	adds.w	r2, ip, r2
 8000b5c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000b60:	f080 811c 	bcs.w	8000d9c <__udivmoddi4+0x290>
 8000b64:	4290      	cmp	r0, r2
 8000b66:	f240 8119 	bls.w	8000d9c <__udivmoddi4+0x290>
 8000b6a:	3902      	subs	r1, #2
 8000b6c:	4462      	add	r2, ip
 8000b6e:	1a12      	subs	r2, r2, r0
 8000b70:	b2a4      	uxth	r4, r4
 8000b72:	fbb2 f0fe 	udiv	r0, r2, lr
 8000b76:	fb0e 2210 	mls	r2, lr, r0, r2
 8000b7a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b7e:	fb00 f505 	mul.w	r5, r0, r5
 8000b82:	42a5      	cmp	r5, r4
 8000b84:	d90a      	bls.n	8000b9c <__udivmoddi4+0x90>
 8000b86:	eb1c 0404 	adds.w	r4, ip, r4
 8000b8a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b8e:	f080 8107 	bcs.w	8000da0 <__udivmoddi4+0x294>
 8000b92:	42a5      	cmp	r5, r4
 8000b94:	f240 8104 	bls.w	8000da0 <__udivmoddi4+0x294>
 8000b98:	4464      	add	r4, ip
 8000b9a:	3802      	subs	r0, #2
 8000b9c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000ba0:	1b64      	subs	r4, r4, r5
 8000ba2:	2100      	movs	r1, #0
 8000ba4:	b11e      	cbz	r6, 8000bae <__udivmoddi4+0xa2>
 8000ba6:	40dc      	lsrs	r4, r3
 8000ba8:	2300      	movs	r3, #0
 8000baa:	e9c6 4300 	strd	r4, r3, [r6]
 8000bae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bb2:	428b      	cmp	r3, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0xbc>
 8000bb6:	2e00      	cmp	r6, #0
 8000bb8:	f000 80ed 	beq.w	8000d96 <__udivmoddi4+0x28a>
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	e9c6 0500 	strd	r0, r5, [r6]
 8000bc2:	4608      	mov	r0, r1
 8000bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc8:	fab3 f183 	clz	r1, r3
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	d149      	bne.n	8000c64 <__udivmoddi4+0x158>
 8000bd0:	42ab      	cmp	r3, r5
 8000bd2:	d302      	bcc.n	8000bda <__udivmoddi4+0xce>
 8000bd4:	4282      	cmp	r2, r0
 8000bd6:	f200 80f8 	bhi.w	8000dca <__udivmoddi4+0x2be>
 8000bda:	1a84      	subs	r4, r0, r2
 8000bdc:	eb65 0203 	sbc.w	r2, r5, r3
 8000be0:	2001      	movs	r0, #1
 8000be2:	4617      	mov	r7, r2
 8000be4:	2e00      	cmp	r6, #0
 8000be6:	d0e2      	beq.n	8000bae <__udivmoddi4+0xa2>
 8000be8:	e9c6 4700 	strd	r4, r7, [r6]
 8000bec:	e7df      	b.n	8000bae <__udivmoddi4+0xa2>
 8000bee:	b902      	cbnz	r2, 8000bf2 <__udivmoddi4+0xe6>
 8000bf0:	deff      	udf	#255	; 0xff
 8000bf2:	fab2 f382 	clz	r3, r2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f040 8090 	bne.w	8000d1c <__udivmoddi4+0x210>
 8000bfc:	1a8a      	subs	r2, r1, r2
 8000bfe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c02:	fa1f fe8c 	uxth.w	lr, ip
 8000c06:	2101      	movs	r1, #1
 8000c08:	fbb2 f5f7 	udiv	r5, r2, r7
 8000c0c:	fb07 2015 	mls	r0, r7, r5, r2
 8000c10:	0c22      	lsrs	r2, r4, #16
 8000c12:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000c16:	fb0e f005 	mul.w	r0, lr, r5
 8000c1a:	4290      	cmp	r0, r2
 8000c1c:	d908      	bls.n	8000c30 <__udivmoddi4+0x124>
 8000c1e:	eb1c 0202 	adds.w	r2, ip, r2
 8000c22:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c26:	d202      	bcs.n	8000c2e <__udivmoddi4+0x122>
 8000c28:	4290      	cmp	r0, r2
 8000c2a:	f200 80cb 	bhi.w	8000dc4 <__udivmoddi4+0x2b8>
 8000c2e:	4645      	mov	r5, r8
 8000c30:	1a12      	subs	r2, r2, r0
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb2 f0f7 	udiv	r0, r2, r7
 8000c38:	fb07 2210 	mls	r2, r7, r0, r2
 8000c3c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c40:	fb0e fe00 	mul.w	lr, lr, r0
 8000c44:	45a6      	cmp	lr, r4
 8000c46:	d908      	bls.n	8000c5a <__udivmoddi4+0x14e>
 8000c48:	eb1c 0404 	adds.w	r4, ip, r4
 8000c4c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c50:	d202      	bcs.n	8000c58 <__udivmoddi4+0x14c>
 8000c52:	45a6      	cmp	lr, r4
 8000c54:	f200 80bb 	bhi.w	8000dce <__udivmoddi4+0x2c2>
 8000c58:	4610      	mov	r0, r2
 8000c5a:	eba4 040e 	sub.w	r4, r4, lr
 8000c5e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000c62:	e79f      	b.n	8000ba4 <__udivmoddi4+0x98>
 8000c64:	f1c1 0720 	rsb	r7, r1, #32
 8000c68:	408b      	lsls	r3, r1
 8000c6a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c6e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c72:	fa05 f401 	lsl.w	r4, r5, r1
 8000c76:	fa20 f307 	lsr.w	r3, r0, r7
 8000c7a:	40fd      	lsrs	r5, r7
 8000c7c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c80:	4323      	orrs	r3, r4
 8000c82:	fbb5 f8f9 	udiv	r8, r5, r9
 8000c86:	fa1f fe8c 	uxth.w	lr, ip
 8000c8a:	fb09 5518 	mls	r5, r9, r8, r5
 8000c8e:	0c1c      	lsrs	r4, r3, #16
 8000c90:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c94:	fb08 f50e 	mul.w	r5, r8, lr
 8000c98:	42a5      	cmp	r5, r4
 8000c9a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c9e:	fa00 f001 	lsl.w	r0, r0, r1
 8000ca2:	d90b      	bls.n	8000cbc <__udivmoddi4+0x1b0>
 8000ca4:	eb1c 0404 	adds.w	r4, ip, r4
 8000ca8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cac:	f080 8088 	bcs.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb0:	42a5      	cmp	r5, r4
 8000cb2:	f240 8085 	bls.w	8000dc0 <__udivmoddi4+0x2b4>
 8000cb6:	f1a8 0802 	sub.w	r8, r8, #2
 8000cba:	4464      	add	r4, ip
 8000cbc:	1b64      	subs	r4, r4, r5
 8000cbe:	b29d      	uxth	r5, r3
 8000cc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000cc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000cc8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ccc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000cd0:	45a6      	cmp	lr, r4
 8000cd2:	d908      	bls.n	8000ce6 <__udivmoddi4+0x1da>
 8000cd4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cd8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000cdc:	d26c      	bcs.n	8000db8 <__udivmoddi4+0x2ac>
 8000cde:	45a6      	cmp	lr, r4
 8000ce0:	d96a      	bls.n	8000db8 <__udivmoddi4+0x2ac>
 8000ce2:	3b02      	subs	r3, #2
 8000ce4:	4464      	add	r4, ip
 8000ce6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cea:	fba3 9502 	umull	r9, r5, r3, r2
 8000cee:	eba4 040e 	sub.w	r4, r4, lr
 8000cf2:	42ac      	cmp	r4, r5
 8000cf4:	46c8      	mov	r8, r9
 8000cf6:	46ae      	mov	lr, r5
 8000cf8:	d356      	bcc.n	8000da8 <__udivmoddi4+0x29c>
 8000cfa:	d053      	beq.n	8000da4 <__udivmoddi4+0x298>
 8000cfc:	b156      	cbz	r6, 8000d14 <__udivmoddi4+0x208>
 8000cfe:	ebb0 0208 	subs.w	r2, r0, r8
 8000d02:	eb64 040e 	sbc.w	r4, r4, lr
 8000d06:	fa04 f707 	lsl.w	r7, r4, r7
 8000d0a:	40ca      	lsrs	r2, r1
 8000d0c:	40cc      	lsrs	r4, r1
 8000d0e:	4317      	orrs	r7, r2
 8000d10:	e9c6 7400 	strd	r7, r4, [r6]
 8000d14:	4618      	mov	r0, r3
 8000d16:	2100      	movs	r1, #0
 8000d18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d1c:	f1c3 0120 	rsb	r1, r3, #32
 8000d20:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d24:	fa20 f201 	lsr.w	r2, r0, r1
 8000d28:	fa25 f101 	lsr.w	r1, r5, r1
 8000d2c:	409d      	lsls	r5, r3
 8000d2e:	432a      	orrs	r2, r5
 8000d30:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d34:	fa1f fe8c 	uxth.w	lr, ip
 8000d38:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d3c:	fb07 1510 	mls	r5, r7, r0, r1
 8000d40:	0c11      	lsrs	r1, r2, #16
 8000d42:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000d46:	fb00 f50e 	mul.w	r5, r0, lr
 8000d4a:	428d      	cmp	r5, r1
 8000d4c:	fa04 f403 	lsl.w	r4, r4, r3
 8000d50:	d908      	bls.n	8000d64 <__udivmoddi4+0x258>
 8000d52:	eb1c 0101 	adds.w	r1, ip, r1
 8000d56:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d5a:	d22f      	bcs.n	8000dbc <__udivmoddi4+0x2b0>
 8000d5c:	428d      	cmp	r5, r1
 8000d5e:	d92d      	bls.n	8000dbc <__udivmoddi4+0x2b0>
 8000d60:	3802      	subs	r0, #2
 8000d62:	4461      	add	r1, ip
 8000d64:	1b49      	subs	r1, r1, r5
 8000d66:	b292      	uxth	r2, r2
 8000d68:	fbb1 f5f7 	udiv	r5, r1, r7
 8000d6c:	fb07 1115 	mls	r1, r7, r5, r1
 8000d70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000d74:	fb05 f10e 	mul.w	r1, r5, lr
 8000d78:	4291      	cmp	r1, r2
 8000d7a:	d908      	bls.n	8000d8e <__udivmoddi4+0x282>
 8000d7c:	eb1c 0202 	adds.w	r2, ip, r2
 8000d80:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d84:	d216      	bcs.n	8000db4 <__udivmoddi4+0x2a8>
 8000d86:	4291      	cmp	r1, r2
 8000d88:	d914      	bls.n	8000db4 <__udivmoddi4+0x2a8>
 8000d8a:	3d02      	subs	r5, #2
 8000d8c:	4462      	add	r2, ip
 8000d8e:	1a52      	subs	r2, r2, r1
 8000d90:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000d94:	e738      	b.n	8000c08 <__udivmoddi4+0xfc>
 8000d96:	4631      	mov	r1, r6
 8000d98:	4630      	mov	r0, r6
 8000d9a:	e708      	b.n	8000bae <__udivmoddi4+0xa2>
 8000d9c:	4639      	mov	r1, r7
 8000d9e:	e6e6      	b.n	8000b6e <__udivmoddi4+0x62>
 8000da0:	4610      	mov	r0, r2
 8000da2:	e6fb      	b.n	8000b9c <__udivmoddi4+0x90>
 8000da4:	4548      	cmp	r0, r9
 8000da6:	d2a9      	bcs.n	8000cfc <__udivmoddi4+0x1f0>
 8000da8:	ebb9 0802 	subs.w	r8, r9, r2
 8000dac:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000db0:	3b01      	subs	r3, #1
 8000db2:	e7a3      	b.n	8000cfc <__udivmoddi4+0x1f0>
 8000db4:	4645      	mov	r5, r8
 8000db6:	e7ea      	b.n	8000d8e <__udivmoddi4+0x282>
 8000db8:	462b      	mov	r3, r5
 8000dba:	e794      	b.n	8000ce6 <__udivmoddi4+0x1da>
 8000dbc:	4640      	mov	r0, r8
 8000dbe:	e7d1      	b.n	8000d64 <__udivmoddi4+0x258>
 8000dc0:	46d0      	mov	r8, sl
 8000dc2:	e77b      	b.n	8000cbc <__udivmoddi4+0x1b0>
 8000dc4:	3d02      	subs	r5, #2
 8000dc6:	4462      	add	r2, ip
 8000dc8:	e732      	b.n	8000c30 <__udivmoddi4+0x124>
 8000dca:	4608      	mov	r0, r1
 8000dcc:	e70a      	b.n	8000be4 <__udivmoddi4+0xd8>
 8000dce:	4464      	add	r4, ip
 8000dd0:	3802      	subs	r0, #2
 8000dd2:	e742      	b.n	8000c5a <__udivmoddi4+0x14e>

08000dd4 <__aeabi_idiv0>:
 8000dd4:	4770      	bx	lr
 8000dd6:	bf00      	nop

08000dd8 <Motor_ForWard>:
 *      Author: Ahmed
 */
#include "Motors.h"

void Motor_ForWard(uint16_t Motor_Speed)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	4603      	mov	r3, r0
 8000de0:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, GPIO_PIN_RESET);
 8000de2:	2200      	movs	r2, #0
 8000de4:	2180      	movs	r1, #128	; 0x80
 8000de6:	480b      	ldr	r0, [pc, #44]	; (8000e14 <Motor_ForWard+0x3c>)
 8000de8:	f001 fb92 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, GPIO_PIN_SET);
 8000dec:	2201      	movs	r2, #1
 8000dee:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000df2:	4808      	ldr	r0, [pc, #32]	; (8000e14 <Motor_ForWard+0x3c>)
 8000df4:	f001 fb8c 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2104      	movs	r1, #4
 8000dfc:	4805      	ldr	r0, [pc, #20]	; (8000e14 <Motor_ForWard+0x3c>)
 8000dfe:	f001 fb87 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_SET);
 8000e02:	2201      	movs	r2, #1
 8000e04:	2102      	movs	r1, #2
 8000e06:	4803      	ldr	r0, [pc, #12]	; (8000e14 <Motor_ForWard+0x3c>)
 8000e08:	f001 fb82 	bl	8002510 <HAL_GPIO_WritePin>
}
 8000e0c:	bf00      	nop
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	40020400 	.word	0x40020400

08000e18 <Motor_BackWard>:

void Motor_BackWard(uint16_t Motor_Speed)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	4603      	mov	r3, r0
 8000e20:	80fb      	strh	r3, [r7, #6]
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, GPIO_PIN_SET);
 8000e22:	2201      	movs	r2, #1
 8000e24:	2180      	movs	r1, #128	; 0x80
 8000e26:	480b      	ldr	r0, [pc, #44]	; (8000e54 <Motor_BackWard+0x3c>)
 8000e28:	f001 fb72 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e32:	4808      	ldr	r0, [pc, #32]	; (8000e54 <Motor_BackWard+0x3c>)
 8000e34:	f001 fb6c 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, GPIO_PIN_SET);
 8000e38:	2201      	movs	r2, #1
 8000e3a:	2104      	movs	r1, #4
 8000e3c:	4805      	ldr	r0, [pc, #20]	; (8000e54 <Motor_BackWard+0x3c>)
 8000e3e:	f001 fb67 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	2102      	movs	r1, #2
 8000e46:	4803      	ldr	r0, [pc, #12]	; (8000e54 <Motor_BackWard+0x3c>)
 8000e48:	f001 fb62 	bl	8002510 <HAL_GPIO_WritePin>

}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40020400 	.word	0x40020400

08000e58 <Motor_Stop>:

void Motor_Stop(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
	//htim3.Instance->CCR1 = 0;
	//htim3.Instance->CCR2 = 0;
	HAL_GPIO_WritePin(M1_IN1_GPIO_Port, M1_IN1_Pin, GPIO_PIN_RESET);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2180      	movs	r1, #128	; 0x80
 8000e60:	480a      	ldr	r0, [pc, #40]	; (8000e8c <Motor_Stop+0x34>)
 8000e62:	f001 fb55 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M1_IN2_GPIO_Port, M1_IN2_Pin, GPIO_PIN_RESET);
 8000e66:	2200      	movs	r2, #0
 8000e68:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6c:	4807      	ldr	r0, [pc, #28]	; (8000e8c <Motor_Stop+0x34>)
 8000e6e:	f001 fb4f 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN1_GPIO_Port, M2_IN1_Pin, GPIO_PIN_RESET);
 8000e72:	2200      	movs	r2, #0
 8000e74:	2104      	movs	r1, #4
 8000e76:	4805      	ldr	r0, [pc, #20]	; (8000e8c <Motor_Stop+0x34>)
 8000e78:	f001 fb4a 	bl	8002510 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(M2_IN2_GPIO_Port, M2_IN2_Pin, GPIO_PIN_RESET);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2102      	movs	r1, #2
 8000e80:	4802      	ldr	r0, [pc, #8]	; (8000e8c <Motor_Stop+0x34>)
 8000e82:	f001 fb45 	bl	8002510 <HAL_GPIO_WritePin>

}
 8000e86:	bf00      	nop
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	40020400 	.word	0x40020400

08000e90 <Servo_Rotate_Angle>:
 */
#include "Servo.h"


void Servo_Rotate_Angle(uint8_t Angle , uint8_t direction)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b084      	sub	sp, #16
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	460a      	mov	r2, r1
 8000e9a:	71fb      	strb	r3, [r7, #7]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	71bb      	strb	r3, [r7, #6]

	uint8_t Calibration = Angle ;
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	73fb      	strb	r3, [r7, #15]
	if(SERVO_TURN_RIGHT == direction){
 8000ea4:	79bb      	ldrb	r3, [r7, #6]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d104      	bne.n	8000eb4 <Servo_Rotate_Angle+0x24>
		Calibration = SERVO_CENTER - Calibration;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
 8000eac:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8000eb0:	73fb      	strb	r3, [r7, #15]
 8000eb2:	e005      	b.n	8000ec0 <Servo_Rotate_Angle+0x30>
	}
	else if(SERVO_TURN_LEFT == direction){
 8000eb4:	79bb      	ldrb	r3, [r7, #6]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d102      	bne.n	8000ec0 <Servo_Rotate_Angle+0x30>
		Calibration = SERVO_CENTER + Calibration;
 8000eba:	7bfb      	ldrb	r3, [r7, #15]
 8000ebc:	333f      	adds	r3, #63	; 0x3f
 8000ebe:	73fb      	strb	r3, [r7, #15]

	}
	else{}

	htim3.Instance->CCR3 = Calibration;
 8000ec0:	4b05      	ldr	r3, [pc, #20]	; (8000ed8 <Servo_Rotate_Angle+0x48>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	7bfa      	ldrb	r2, [r7, #15]
 8000ec6:	63da      	str	r2, [r3, #60]	; 0x3c
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 8000ec8:	2108      	movs	r1, #8
 8000eca:	4803      	ldr	r0, [pc, #12]	; (8000ed8 <Servo_Rotate_Angle+0x48>)
 8000ecc:	f002 f8bc 	bl	8003048 <HAL_TIM_PWM_Start>
}
 8000ed0:	bf00      	nop
 8000ed2:	3710      	adds	r7, #16
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	20000154 	.word	0x20000154
 8000edc:	00000000 	.word	0x00000000

08000ee0 <HAL_TIM_IC_CaptureCallback>:
/* USER CODE END PV */

/* USER CODE BEGIN PFP */

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	7f1b      	ldrb	r3, [r3, #28]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	f040 808a 	bne.w	8001006 <HAL_TIM_IC_CaptureCallback+0x126>
	{
		if(CH_Var[US_ECHO_CH1]==0)
 8000ef2:	4b91      	ldr	r3, [pc, #580]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d11a      	bne.n	8000f32 <HAL_TIM_IC_CaptureCallback+0x52>
		{
			//Read the first IC_value (counter) value in this moment
			ic_val_1[US_ECHO_CH1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000efc:	2100      	movs	r1, #0
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f002 fd90 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4a8d      	ldr	r2, [pc, #564]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f08:	6013      	str	r3, [r2, #0]
			CH_Var[US_ECHO_CH1] = 1;
 8000f0a:	4b8b      	ldr	r3, [pc, #556]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	701a      	strb	r2, [r3, #0]
			//Modify the polarity to capture the falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	6a1a      	ldr	r2, [r3, #32]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f022 020a 	bic.w	r2, r2, #10
 8000f1e:	621a      	str	r2, [r3, #32]
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	6a1a      	ldr	r2, [r3, #32]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f042 0202 	orr.w	r2, r2, #2
 8000f2e:	621a      	str	r2, [r3, #32]
		}
		else{}
	}
	else{}

}
 8000f30:	e22e      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if(CH_Var[US_ECHO_CH1]==1){
 8000f32:	4b81      	ldr	r3, [pc, #516]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000f34:	781b      	ldrb	r3, [r3, #0]
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	f040 8229 	bne.w	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
			ic_val_2[US_ECHO_CH1] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000f3e:	2100      	movs	r1, #0
 8000f40:	6878      	ldr	r0, [r7, #4]
 8000f42:	f002 fd6f 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8000f46:	4603      	mov	r3, r0
 8000f48:	4a7d      	ldr	r2, [pc, #500]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f4a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim,0);
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2200      	movs	r2, #0
 8000f52:	625a      	str	r2, [r3, #36]	; 0x24
			if(ic_val_2[US_ECHO_CH1] > ic_val_1[US_ECHO_CH1]){
 8000f54:	4b7a      	ldr	r3, [pc, #488]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b78      	ldr	r3, [pc, #480]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d907      	bls.n	8000f70 <HAL_TIM_IC_CaptureCallback+0x90>
				differ[US_ECHO_CH1] = ic_val_2[US_ECHO_CH1] - ic_val_1[US_ECHO_CH1];
 8000f60:	4b77      	ldr	r3, [pc, #476]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f62:	681a      	ldr	r2, [r3, #0]
 8000f64:	4b75      	ldr	r3, [pc, #468]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	4a76      	ldr	r2, [pc, #472]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000f6c:	6013      	str	r3, [r2, #0]
 8000f6e:	e009      	b.n	8000f84 <HAL_TIM_IC_CaptureCallback+0xa4>
				differ[US_ECHO_CH1] = (65535 - ic_val_1[US_ECHO_CH1]) + ic_val_2[US_ECHO_CH1];
 8000f70:	4b73      	ldr	r3, [pc, #460]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b71      	ldr	r3, [pc, #452]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000f7e:	33ff      	adds	r3, #255	; 0xff
 8000f80:	4a70      	ldr	r2, [pc, #448]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000f82:	6013      	str	r3, [r2, #0]
			current_distance[US_ECHO_CH1] = differ[US_ECHO_CH1] * 0.034/2;
 8000f84:	4b6f      	ldr	r3, [pc, #444]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x264>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fa6b 	bl	8000464 <__aeabi_ui2d>
 8000f8e:	a366      	add	r3, pc, #408	; (adr r3, 8001128 <HAL_TIM_IC_CaptureCallback+0x248>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	f7ff fae0 	bl	8000558 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4610      	mov	r0, r2
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	f04f 0200 	mov.w	r2, #0
 8000fa4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000fa8:	f7ff fc00 	bl	80007ac <__aeabi_ddiv>
 8000fac:	4602      	mov	r2, r0
 8000fae:	460b      	mov	r3, r1
 8000fb0:	4965      	ldr	r1, [pc, #404]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000fb2:	e9c1 2300 	strd	r2, r3, [r1]
			if(current_distance[US_ECHO_CH1]<50){
 8000fb6:	4b64      	ldr	r3, [pc, #400]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000fb8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b62      	ldr	r3, [pc, #392]	; (800114c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000fc2:	f7ff fd3b 	bl	8000a3c <__aeabi_dcmplt>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d005      	beq.n	8000fd8 <HAL_TIM_IC_CaptureCallback+0xf8>
				distance[US_ECHO_CH1] = current_distance[US_ECHO_CH1];
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x268>)
 8000fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd2:	495f      	ldr	r1, [pc, #380]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000fd4:	e9c1 2300 	strd	r2, r3, [r1]
			CH_Var[US_ECHO_CH1] = 0;
 8000fd8:	4b57      	ldr	r3, [pc, #348]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6a1a      	ldr	r2, [r3, #32]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f022 020a 	bic.w	r2, r2, #10
 8000fec:	621a      	str	r2, [r3, #32]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681a      	ldr	r2, [r3, #0]
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6a12      	ldr	r2, [r2, #32]
 8000ff8:	621a      	str	r2, [r3, #32]
			osSemaphoreRelease(Sensor_Sem1Handle);
 8000ffa:	4b56      	ldr	r3, [pc, #344]	; (8001154 <HAL_TIM_IC_CaptureCallback+0x274>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f003 fc00 	bl	8004804 <osSemaphoreRelease>
}
 8001004:	e1c4      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)  // if the interrupt source is channel2
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7f1b      	ldrb	r3, [r3, #28]
 800100a:	2b02      	cmp	r3, #2
 800100c:	f040 80a4 	bne.w	8001158 <HAL_TIM_IC_CaptureCallback+0x278>
		if(CH_Var[US_ECHO_CH2]==0)
 8001010:	4b49      	ldr	r3, [pc, #292]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001012:	785b      	ldrb	r3, [r3, #1]
 8001014:	b2db      	uxtb	r3, r3
 8001016:	2b00      	cmp	r3, #0
 8001018:	d11a      	bne.n	8001050 <HAL_TIM_IC_CaptureCallback+0x170>
			ic_val_1[US_ECHO_CH2] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800101a:	2104      	movs	r1, #4
 800101c:	6878      	ldr	r0, [r7, #4]
 800101e:	f002 fd01 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8001022:	4603      	mov	r3, r0
 8001024:	4a45      	ldr	r2, [pc, #276]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001026:	6053      	str	r3, [r2, #4]
			CH_Var[US_ECHO_CH2] = 1;
 8001028:	4b43      	ldr	r3, [pc, #268]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 800102a:	2201      	movs	r2, #1
 800102c:	705a      	strb	r2, [r3, #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6a1a      	ldr	r2, [r3, #32]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800103c:	621a      	str	r2, [r3, #32]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6a1a      	ldr	r2, [r3, #32]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f042 0220 	orr.w	r2, r2, #32
 800104c:	621a      	str	r2, [r3, #32]
}
 800104e:	e19f      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if(CH_Var[US_ECHO_CH2]==1){
 8001050:	4b39      	ldr	r3, [pc, #228]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 8001052:	785b      	ldrb	r3, [r3, #1]
 8001054:	b2db      	uxtb	r3, r3
 8001056:	2b01      	cmp	r3, #1
 8001058:	f040 819a 	bne.w	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
			ic_val_2[US_ECHO_CH2] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800105c:	2104      	movs	r1, #4
 800105e:	6878      	ldr	r0, [r7, #4]
 8001060:	f002 fce0 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8001064:	4603      	mov	r3, r0
 8001066:	4a36      	ldr	r2, [pc, #216]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001068:	6053      	str	r3, [r2, #4]
			__HAL_TIM_SET_COUNTER(htim,0);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	2200      	movs	r2, #0
 8001070:	625a      	str	r2, [r3, #36]	; 0x24
			if(ic_val_2[US_ECHO_CH2] > ic_val_1[US_ECHO_CH2]){
 8001072:	4b33      	ldr	r3, [pc, #204]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001074:	685a      	ldr	r2, [r3, #4]
 8001076:	4b31      	ldr	r3, [pc, #196]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d907      	bls.n	800108e <HAL_TIM_IC_CaptureCallback+0x1ae>
				differ[US_ECHO_CH2] = ic_val_2[US_ECHO_CH2] - ic_val_1[US_ECHO_CH2];
 800107e:	4b30      	ldr	r3, [pc, #192]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001080:	685a      	ldr	r2, [r3, #4]
 8001082:	4b2e      	ldr	r3, [pc, #184]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	4a2e      	ldr	r2, [pc, #184]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x264>)
 800108a:	6053      	str	r3, [r2, #4]
 800108c:	e009      	b.n	80010a2 <HAL_TIM_IC_CaptureCallback+0x1c2>
				differ[US_ECHO_CH2] = (65535 - ic_val_1[US_ECHO_CH2]) + ic_val_2[US_ECHO_CH2];
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <HAL_TIM_IC_CaptureCallback+0x260>)
 8001090:	685a      	ldr	r2, [r3, #4]
 8001092:	4b2a      	ldr	r3, [pc, #168]	; (800113c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800109c:	33ff      	adds	r3, #255	; 0xff
 800109e:	4a29      	ldr	r2, [pc, #164]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x264>)
 80010a0:	6053      	str	r3, [r2, #4]
			current_distance[US_ECHO_CH2] = differ[US_ECHO_CH2] * 0.0323/2;
 80010a2:	4b28      	ldr	r3, [pc, #160]	; (8001144 <HAL_TIM_IC_CaptureCallback+0x264>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	4618      	mov	r0, r3
 80010a8:	f7ff f9dc 	bl	8000464 <__aeabi_ui2d>
 80010ac:	a320      	add	r3, pc, #128	; (adr r3, 8001130 <HAL_TIM_IC_CaptureCallback+0x250>)
 80010ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b2:	f7ff fa51 	bl	8000558 <__aeabi_dmul>
 80010b6:	4602      	mov	r2, r0
 80010b8:	460b      	mov	r3, r1
 80010ba:	4610      	mov	r0, r2
 80010bc:	4619      	mov	r1, r3
 80010be:	f04f 0200 	mov.w	r2, #0
 80010c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80010c6:	f7ff fb71 	bl	80007ac <__aeabi_ddiv>
 80010ca:	4602      	mov	r2, r0
 80010cc:	460b      	mov	r3, r1
 80010ce:	491e      	ldr	r1, [pc, #120]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x268>)
 80010d0:	e9c1 2302 	strd	r2, r3, [r1, #8]
			if(current_distance[US_ECHO_CH2]<50){
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x268>)
 80010d6:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80010da:	f04f 0200 	mov.w	r2, #0
 80010de:	4b1b      	ldr	r3, [pc, #108]	; (800114c <HAL_TIM_IC_CaptureCallback+0x26c>)
 80010e0:	f7ff fcac 	bl	8000a3c <__aeabi_dcmplt>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d005      	beq.n	80010f6 <HAL_TIM_IC_CaptureCallback+0x216>
			distance[US_ECHO_CH2] = current_distance[US_ECHO_CH2];
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <HAL_TIM_IC_CaptureCallback+0x268>)
 80010ec:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010f0:	4917      	ldr	r1, [pc, #92]	; (8001150 <HAL_TIM_IC_CaptureCallback+0x270>)
 80010f2:	e9c1 2302 	strd	r2, r3, [r1, #8]
			CH_Var[US_ECHO_CH2] = 0;
 80010f6:	4b10      	ldr	r3, [pc, #64]	; (8001138 <HAL_TIM_IC_CaptureCallback+0x258>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	705a      	strb	r2, [r3, #1]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6a1a      	ldr	r2, [r3, #32]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800110a:	621a      	str	r2, [r3, #32]
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681a      	ldr	r2, [r3, #0]
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	6a12      	ldr	r2, [r2, #32]
 8001116:	621a      	str	r2, [r3, #32]
			osSemaphoreRelease(Sensor_Sem1Handle);
 8001118:	4b0e      	ldr	r3, [pc, #56]	; (8001154 <HAL_TIM_IC_CaptureCallback+0x274>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f003 fb71 	bl	8004804 <osSemaphoreRelease>
}
 8001122:	e135      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
 8001124:	f3af 8000 	nop.w
 8001128:	b020c49c 	.word	0xb020c49c
 800112c:	3fa16872 	.word	0x3fa16872
 8001130:	27525461 	.word	0x27525461
 8001134:	3fa089a0 	.word	0x3fa089a0
 8001138:	2000002c 	.word	0x2000002c
 800113c:	20000070 	.word	0x20000070
 8001140:	20000080 	.word	0x20000080
 8001144:	20000090 	.word	0x20000090
 8001148:	20000050 	.word	0x20000050
 800114c:	40490000 	.word	0x40490000
 8001150:	20000030 	.word	0x20000030
 8001154:	200000c0 	.word	0x200000c0
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)  // if the interrupt source is channel3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	7f1b      	ldrb	r3, [r3, #28]
 800115c:	2b04      	cmp	r3, #4
 800115e:	f040 808a 	bne.w	8001276 <HAL_TIM_IC_CaptureCallback+0x396>
		if(CH_Var[US_ECHO_CH3]==0)
 8001162:	4b91      	ldr	r3, [pc, #580]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001164:	789b      	ldrb	r3, [r3, #2]
 8001166:	b2db      	uxtb	r3, r3
 8001168:	2b00      	cmp	r3, #0
 800116a:	d11a      	bne.n	80011a2 <HAL_TIM_IC_CaptureCallback+0x2c2>
			ic_val_1[US_ECHO_CH3] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 800116c:	2108      	movs	r1, #8
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f002 fc58 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8001174:	4603      	mov	r3, r0
 8001176:	4a8d      	ldr	r2, [pc, #564]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001178:	6093      	str	r3, [r2, #8]
			CH_Var[US_ECHO_CH3] = 1;
 800117a:	4b8b      	ldr	r3, [pc, #556]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800117c:	2201      	movs	r2, #1
 800117e:	709a      	strb	r2, [r3, #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	6a1a      	ldr	r2, [r3, #32]
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800118e:	621a      	str	r2, [r3, #32]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	6a1a      	ldr	r2, [r3, #32]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800119e:	621a      	str	r2, [r3, #32]
}
 80011a0:	e0f6      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if(CH_Var[US_ECHO_CH3]==1){
 80011a2:	4b81      	ldr	r3, [pc, #516]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 80011a4:	789b      	ldrb	r3, [r3, #2]
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b01      	cmp	r3, #1
 80011aa:	f040 80f1 	bne.w	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
			ic_val_2[US_ECHO_CH3] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_3);
 80011ae:	2108      	movs	r1, #8
 80011b0:	6878      	ldr	r0, [r7, #4]
 80011b2:	f002 fc37 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 80011b6:	4603      	mov	r3, r0
 80011b8:	4a7d      	ldr	r2, [pc, #500]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80011ba:	6093      	str	r3, [r2, #8]
			__HAL_TIM_SET_COUNTER(htim,0);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	2200      	movs	r2, #0
 80011c2:	625a      	str	r2, [r3, #36]	; 0x24
			if(ic_val_2[US_ECHO_CH3] > ic_val_1[US_ECHO_CH3]){
 80011c4:	4b7a      	ldr	r3, [pc, #488]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	4b78      	ldr	r3, [pc, #480]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	429a      	cmp	r2, r3
 80011ce:	d907      	bls.n	80011e0 <HAL_TIM_IC_CaptureCallback+0x300>
				differ[US_ECHO_CH3] = ic_val_2[US_ECHO_CH3] - ic_val_1[US_ECHO_CH3];
 80011d0:	4b77      	ldr	r3, [pc, #476]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80011d2:	689a      	ldr	r2, [r3, #8]
 80011d4:	4b75      	ldr	r3, [pc, #468]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	4a76      	ldr	r2, [pc, #472]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80011dc:	6093      	str	r3, [r2, #8]
 80011de:	e009      	b.n	80011f4 <HAL_TIM_IC_CaptureCallback+0x314>
				differ[US_ECHO_CH3] = (65535 - ic_val_1[US_ECHO_CH3]) + ic_val_2[US_ECHO_CH3];
 80011e0:	4b73      	ldr	r3, [pc, #460]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80011e2:	689a      	ldr	r2, [r3, #8]
 80011e4:	4b71      	ldr	r3, [pc, #452]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80011ee:	33ff      	adds	r3, #255	; 0xff
 80011f0:	4a70      	ldr	r2, [pc, #448]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80011f2:	6093      	str	r3, [r2, #8]
			current_distance[US_ECHO_CH3] = differ[US_ECHO_CH3] * 0.033067/2;
 80011f4:	4b6f      	ldr	r3, [pc, #444]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80011f6:	689b      	ldr	r3, [r3, #8]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f933 	bl	8000464 <__aeabi_ui2d>
 80011fe:	a366      	add	r3, pc, #408	; (adr r3, 8001398 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff f9a8 	bl	8000558 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f04f 0200 	mov.w	r2, #0
 8001214:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001218:	f7ff fac8 	bl	80007ac <__aeabi_ddiv>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	4965      	ldr	r1, [pc, #404]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8001222:	e9c1 2304 	strd	r2, r3, [r1, #16]
			if(current_distance[US_ECHO_CH3]<50){
 8001226:	4b64      	ldr	r3, [pc, #400]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8001228:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b62      	ldr	r3, [pc, #392]	; (80013bc <HAL_TIM_IC_CaptureCallback+0x4dc>)
 8001232:	f7ff fc03 	bl	8000a3c <__aeabi_dcmplt>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d005      	beq.n	8001248 <HAL_TIM_IC_CaptureCallback+0x368>
			distance[US_ECHO_CH3] = current_distance[US_ECHO_CH3];
 800123c:	4b5e      	ldr	r3, [pc, #376]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 800123e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001242:	495f      	ldr	r1, [pc, #380]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8001244:	e9c1 2304 	strd	r2, r3, [r1, #16]
			CH_Var[US_ECHO_CH3] = 0;
 8001248:	4b57      	ldr	r3, [pc, #348]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800124a:	2200      	movs	r2, #0
 800124c:	709a      	strb	r2, [r3, #2]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_3, TIM_INPUTCHANNELPOLARITY_RISING);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	6a1a      	ldr	r2, [r3, #32]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f422 6220 	bic.w	r2, r2, #2560	; 0xa00
 800125c:	621a      	str	r2, [r3, #32]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681a      	ldr	r2, [r3, #0]
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6a12      	ldr	r2, [r2, #32]
 8001268:	621a      	str	r2, [r3, #32]
			osSemaphoreRelease(Sensor_Sem1Handle);
 800126a:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4618      	mov	r0, r3
 8001270:	f003 fac8 	bl	8004804 <osSemaphoreRelease>
}
 8001274:	e08c      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
	else if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)  // if the interrupt source is channel4
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	7f1b      	ldrb	r3, [r3, #28]
 800127a:	2b08      	cmp	r3, #8
 800127c:	f040 8088 	bne.w	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
		if(CH_Var[US_ECHO_CH4]==0)
 8001280:	4b49      	ldr	r3, [pc, #292]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001282:	78db      	ldrb	r3, [r3, #3]
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d11a      	bne.n	80012c0 <HAL_TIM_IC_CaptureCallback+0x3e0>
			ic_val_1[US_ECHO_CH4] = HAL_TIM_ReadCapturedValue(htim, US_ECHO_CH4);
 800128a:	2103      	movs	r1, #3
 800128c:	6878      	ldr	r0, [r7, #4]
 800128e:	f002 fbc9 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 8001292:	4603      	mov	r3, r0
 8001294:	4a45      	ldr	r2, [pc, #276]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001296:	60d3      	str	r3, [r2, #12]
			CH_Var[US_ECHO_CH4] = 1;
 8001298:	4b43      	ldr	r3, [pc, #268]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 800129a:	2201      	movs	r2, #1
 800129c:	70da      	strb	r2, [r3, #3]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_FALLING);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6a1a      	ldr	r2, [r3, #32]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 80012ac:	621a      	str	r2, [r3, #32]
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	6a1a      	ldr	r2, [r3, #32]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80012bc:	621a      	str	r2, [r3, #32]
}
 80012be:	e067      	b.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
		else if(CH_Var[US_ECHO_CH4]==1){
 80012c0:	4b39      	ldr	r3, [pc, #228]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 80012c2:	78db      	ldrb	r3, [r3, #3]
 80012c4:	b2db      	uxtb	r3, r3
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d162      	bne.n	8001390 <HAL_TIM_IC_CaptureCallback+0x4b0>
			ic_val_2[US_ECHO_CH4] = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_4);
 80012ca:	210c      	movs	r1, #12
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f002 fba9 	bl	8003a24 <HAL_TIM_ReadCapturedValue>
 80012d2:	4603      	mov	r3, r0
 80012d4:	4a36      	ldr	r2, [pc, #216]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80012d6:	60d3      	str	r3, [r2, #12]
			__HAL_TIM_SET_COUNTER(htim,0);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	2200      	movs	r2, #0
 80012de:	625a      	str	r2, [r3, #36]	; 0x24
			if(ic_val_2[US_ECHO_CH4] > ic_val_1[US_ECHO_CH4]){
 80012e0:	4b33      	ldr	r3, [pc, #204]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80012e2:	68da      	ldr	r2, [r3, #12]
 80012e4:	4b31      	ldr	r3, [pc, #196]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d907      	bls.n	80012fc <HAL_TIM_IC_CaptureCallback+0x41c>
				differ[US_ECHO_CH4] = ic_val_2[US_ECHO_CH4] - ic_val_1[US_ECHO_CH4];
 80012ec:	4b30      	ldr	r3, [pc, #192]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	4b2e      	ldr	r3, [pc, #184]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	4a2f      	ldr	r2, [pc, #188]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 80012f8:	60d3      	str	r3, [r2, #12]
 80012fa:	e009      	b.n	8001310 <HAL_TIM_IC_CaptureCallback+0x430>
				differ[US_ECHO_CH4] = (65535 - ic_val_1[US_ECHO_CH4]) + ic_val_2[US_ECHO_CH4];
 80012fc:	4b2c      	ldr	r3, [pc, #176]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 80012fe:	68da      	ldr	r2, [r3, #12]
 8001300:	4b2a      	ldr	r3, [pc, #168]	; (80013ac <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800130a:	33ff      	adds	r3, #255	; 0xff
 800130c:	4a29      	ldr	r2, [pc, #164]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 800130e:	60d3      	str	r3, [r2, #12]
			current_distance[US_ECHO_CH4] = differ[US_ECHO_CH4] * 0.017357/2;
 8001310:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff f8a5 	bl	8000464 <__aeabi_ui2d>
 800131a:	a321      	add	r3, pc, #132	; (adr r3, 80013a0 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 800131c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001320:	f7ff f91a 	bl	8000558 <__aeabi_dmul>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001334:	f7ff fa3a 	bl	80007ac <__aeabi_ddiv>
 8001338:	4602      	mov	r2, r0
 800133a:	460b      	mov	r3, r1
 800133c:	491e      	ldr	r1, [pc, #120]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 800133e:	e9c1 2306 	strd	r2, r3, [r1, #24]
			if(current_distance[US_ECHO_CH4]<120){
 8001342:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 8001344:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 8001348:	f04f 0200 	mov.w	r2, #0
 800134c:	4b1e      	ldr	r3, [pc, #120]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0x4e8>)
 800134e:	f7ff fb75 	bl	8000a3c <__aeabi_dcmplt>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d005      	beq.n	8001364 <HAL_TIM_IC_CaptureCallback+0x484>
			distance[US_ECHO_CH4] = current_distance[US_ECHO_CH4];
 8001358:	4b17      	ldr	r3, [pc, #92]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0x4d8>)
 800135a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800135e:	4918      	ldr	r1, [pc, #96]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0x4e0>)
 8001360:	e9c1 2306 	strd	r2, r3, [r1, #24]
			CH_Var[US_ECHO_CH4] = 0;
 8001364:	4b10      	ldr	r3, [pc, #64]	; (80013a8 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001366:	2200      	movs	r2, #0
 8001368:	70da      	strb	r2, [r3, #3]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim,TIM_CHANNEL_4, TIM_INPUTCHANNELPOLARITY_RISING);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	6a1a      	ldr	r2, [r3, #32]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f422 4220 	bic.w	r2, r2, #40960	; 0xa000
 8001378:	621a      	str	r2, [r3, #32]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681a      	ldr	r2, [r3, #0]
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6a12      	ldr	r2, [r2, #32]
 8001384:	621a      	str	r2, [r3, #32]
			osSemaphoreRelease(Sensor_Sem1Handle);
 8001386:	4b0f      	ldr	r3, [pc, #60]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0x4e4>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4618      	mov	r0, r3
 800138c:	f003 fa3a 	bl	8004804 <osSemaphoreRelease>
}
 8001390:	bf00      	nop
 8001392:	3708      	adds	r7, #8
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	67275686 	.word	0x67275686
 800139c:	3fa0ee28 	.word	0x3fa0ee28
 80013a0:	8d6d3b6d 	.word	0x8d6d3b6d
 80013a4:	3f91c608 	.word	0x3f91c608
 80013a8:	2000002c 	.word	0x2000002c
 80013ac:	20000070 	.word	0x20000070
 80013b0:	20000080 	.word	0x20000080
 80013b4:	20000090 	.word	0x20000090
 80013b8:	20000050 	.word	0x20000050
 80013bc:	40490000 	.word	0x40490000
 80013c0:	20000030 	.word	0x20000030
 80013c4:	200000c0 	.word	0x200000c0
 80013c8:	405e0000 	.word	0x405e0000

080013cc <delay_us>:

void delay_us(uint16_t time)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	4603      	mov	r3, r0
 80013d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);
 80013d6:	4b09      	ldr	r3, [pc, #36]	; (80013fc <delay_us+0x30>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	2200      	movs	r2, #0
 80013dc:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim1)< time);
 80013de:	bf00      	nop
 80013e0:	4b06      	ldr	r3, [pc, #24]	; (80013fc <delay_us+0x30>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	d3f9      	bcc.n	80013e0 <delay_us+0x14>
}
 80013ec:	bf00      	nop
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f8:	4770      	bx	lr
 80013fa:	bf00      	nop
 80013fc:	2000010c 	.word	0x2000010c

08001400 <UltraSonic_Read>:

void UltraSonic_Read(uint8_t US_Trigger_Pin)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	4603      	mov	r3, r0
 8001408:	71fb      	strb	r3, [r7, #7]

	  HAL_GPIO_WritePin(GPIOB, US_Trigger_Pin, GPIO_PIN_SET);
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	b29b      	uxth	r3, r3
 800140e:	2201      	movs	r2, #1
 8001410:	4619      	mov	r1, r3
 8001412:	480c      	ldr	r0, [pc, #48]	; (8001444 <UltraSonic_Read+0x44>)
 8001414:	f001 f87c 	bl	8002510 <HAL_GPIO_WritePin>
	  delay_us(10);
 8001418:	200a      	movs	r0, #10
 800141a:	f7ff ffd7 	bl	80013cc <delay_us>
	  HAL_GPIO_WritePin(GPIOB, US_Trigger_Pin, GPIO_PIN_RESET);
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	b29b      	uxth	r3, r3
 8001422:	2200      	movs	r2, #0
 8001424:	4619      	mov	r1, r3
 8001426:	4807      	ldr	r0, [pc, #28]	; (8001444 <UltraSonic_Read+0x44>)
 8001428:	f001 f872 	bl	8002510 <HAL_GPIO_WritePin>
	  __HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1|TIM_IT_CC2|TIM_IT_CC3|TIM_IT_CC4);
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <UltraSonic_Read+0x48>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	4b05      	ldr	r3, [pc, #20]	; (8001448 <UltraSonic_Read+0x48>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f042 021e 	orr.w	r2, r2, #30
 800143a:	60da      	str	r2, [r3, #12]
//	 HAL_Delay(10);
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	40020400 	.word	0x40020400
 8001448:	2000010c 	.word	0x2000010c

0800144c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Parking_Sem1 */
  Parking_Sem1Handle = osSemaphoreNew(1, 0, &Parking_Sem1_attributes);
 8001450:	4a20      	ldr	r2, [pc, #128]	; (80014d4 <MX_FREERTOS_Init+0x88>)
 8001452:	2100      	movs	r1, #0
 8001454:	2001      	movs	r0, #1
 8001456:	f003 f8fa 	bl	800464e <osSemaphoreNew>
 800145a:	4603      	mov	r3, r0
 800145c:	4a1e      	ldr	r2, [pc, #120]	; (80014d8 <MX_FREERTOS_Init+0x8c>)
 800145e:	6013      	str	r3, [r2, #0]

  /* creation of Sensor_Sem1 */
  Sensor_Sem1Handle = osSemaphoreNew(1,1, &Sensor_Sem1_attributes);
 8001460:	4a1e      	ldr	r2, [pc, #120]	; (80014dc <MX_FREERTOS_Init+0x90>)
 8001462:	2101      	movs	r1, #1
 8001464:	2001      	movs	r0, #1
 8001466:	f003 f8f2 	bl	800464e <osSemaphoreNew>
 800146a:	4603      	mov	r3, r0
 800146c:	4a1c      	ldr	r2, [pc, #112]	; (80014e0 <MX_FREERTOS_Init+0x94>)
 800146e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Searching_Task */
  Searching_TaskHandle = osThreadNew(Searching_Mode, NULL, &Searching_Task_attributes);
 8001470:	4a1c      	ldr	r2, [pc, #112]	; (80014e4 <MX_FREERTOS_Init+0x98>)
 8001472:	2100      	movs	r1, #0
 8001474:	481c      	ldr	r0, [pc, #112]	; (80014e8 <MX_FREERTOS_Init+0x9c>)
 8001476:	f003 f83d 	bl	80044f4 <osThreadNew>
 800147a:	4603      	mov	r3, r0
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <MX_FREERTOS_Init+0xa0>)
 800147e:	6013      	str	r3, [r2, #0]

  /* creation of Parking_Task */
  Parking_TaskHandle = osThreadNew(Parking_Mode, NULL, &Parking_Task_attributes);
 8001480:	4a1b      	ldr	r2, [pc, #108]	; (80014f0 <MX_FREERTOS_Init+0xa4>)
 8001482:	2100      	movs	r1, #0
 8001484:	481b      	ldr	r0, [pc, #108]	; (80014f4 <MX_FREERTOS_Init+0xa8>)
 8001486:	f003 f835 	bl	80044f4 <osThreadNew>
 800148a:	4603      	mov	r3, r0
 800148c:	4a1a      	ldr	r2, [pc, #104]	; (80014f8 <MX_FREERTOS_Init+0xac>)
 800148e:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic1Task */
  UltraSonic1TaskHandle = osThreadNew(UltraSonic1_Read, NULL, &UltraSonic1Task_attributes);
 8001490:	4a1a      	ldr	r2, [pc, #104]	; (80014fc <MX_FREERTOS_Init+0xb0>)
 8001492:	2100      	movs	r1, #0
 8001494:	481a      	ldr	r0, [pc, #104]	; (8001500 <MX_FREERTOS_Init+0xb4>)
 8001496:	f003 f82d 	bl	80044f4 <osThreadNew>
 800149a:	4603      	mov	r3, r0
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <MX_FREERTOS_Init+0xb8>)
 800149e:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic2Task */
  UltraSonic2TaskHandle = osThreadNew(UltraSonic2_Read, NULL, &UltraSonic2Task_attributes);
 80014a0:	4a19      	ldr	r2, [pc, #100]	; (8001508 <MX_FREERTOS_Init+0xbc>)
 80014a2:	2100      	movs	r1, #0
 80014a4:	4819      	ldr	r0, [pc, #100]	; (800150c <MX_FREERTOS_Init+0xc0>)
 80014a6:	f003 f825 	bl	80044f4 <osThreadNew>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4a18      	ldr	r2, [pc, #96]	; (8001510 <MX_FREERTOS_Init+0xc4>)
 80014ae:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic3Task */
  UltraSonic3TaskHandle = osThreadNew(UltraSonic3_Read, NULL, &UltraSonic3Task_attributes);
 80014b0:	4a18      	ldr	r2, [pc, #96]	; (8001514 <MX_FREERTOS_Init+0xc8>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	4818      	ldr	r0, [pc, #96]	; (8001518 <MX_FREERTOS_Init+0xcc>)
 80014b6:	f003 f81d 	bl	80044f4 <osThreadNew>
 80014ba:	4603      	mov	r3, r0
 80014bc:	4a17      	ldr	r2, [pc, #92]	; (800151c <MX_FREERTOS_Init+0xd0>)
 80014be:	6013      	str	r3, [r2, #0]

  /* creation of UltraSonic4Task */
  UltraSonic4TaskHandle = osThreadNew(UltraSonic4_Read, NULL, &UltraSonic4Task_attributes);
 80014c0:	4a17      	ldr	r2, [pc, #92]	; (8001520 <MX_FREERTOS_Init+0xd4>)
 80014c2:	2100      	movs	r1, #0
 80014c4:	4817      	ldr	r0, [pc, #92]	; (8001524 <MX_FREERTOS_Init+0xd8>)
 80014c6:	f003 f815 	bl	80044f4 <osThreadNew>
 80014ca:	4603      	mov	r3, r0
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <MX_FREERTOS_Init+0xdc>)
 80014ce:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80014d0:	bf00      	nop
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	08007b74 	.word	0x08007b74
 80014d8:	200000bc 	.word	0x200000bc
 80014dc:	08007b84 	.word	0x08007b84
 80014e0:	200000c0 	.word	0x200000c0
 80014e4:	08007a9c 	.word	0x08007a9c
 80014e8:	0800152d 	.word	0x0800152d
 80014ec:	200000a4 	.word	0x200000a4
 80014f0:	08007ac0 	.word	0x08007ac0
 80014f4:	080015e1 	.word	0x080015e1
 80014f8:	200000a8 	.word	0x200000a8
 80014fc:	08007ae4 	.word	0x08007ae4
 8001500:	08001761 	.word	0x08001761
 8001504:	200000ac 	.word	0x200000ac
 8001508:	08007b08 	.word	0x08007b08
 800150c:	08001789 	.word	0x08001789
 8001510:	200000b0 	.word	0x200000b0
 8001514:	08007b2c 	.word	0x08007b2c
 8001518:	080017b1 	.word	0x080017b1
 800151c:	200000b4 	.word	0x200000b4
 8001520:	08007b50 	.word	0x08007b50
 8001524:	080017d9 	.word	0x080017d9
 8001528:	200000b8 	.word	0x200000b8

0800152c <Searching_Mode>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Searching_Mode */
void Searching_Mode(void *argument)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Searching_Mode */
  /* Infinite loop */
  for(;;)
  {
	  if(Parking_status == PARKING_NOK){
 8001534:	4b26      	ldr	r3, [pc, #152]	; (80015d0 <Searching_Mode+0xa4>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d1fb      	bne.n	8001534 <Searching_Mode+0x8>
		  //HAL_Delay(2000);
		  Servo_Rotate_Angle(0, SERVO_TURN_LEFT);
 800153c:	2101      	movs	r1, #1
 800153e:	2000      	movs	r0, #0
 8001540:	f7ff fca6 	bl	8000e90 <Servo_Rotate_Angle>
		  //HAL_Delay(10);
		 // Motor_Stop();
		  Motor_ForWard(300);
 8001544:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001548:	f7ff fc46 	bl	8000dd8 <Motor_ForWard>

		  while((distance[US_ECHO_CH3]<15)){
 800154c:	e00b      	b.n	8001566 <Searching_Mode+0x3a>
			  	 Motor_ForWard(300);
 800154e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001552:	f7ff fc41 	bl	8000dd8 <Motor_ForWard>
			  	 //HAL_Delay(30);
			  	 osDelay(30);
 8001556:	201e      	movs	r0, #30
 8001558:	f003 f85e 	bl	8004618 <osDelay>
			  	 Motor_Stop();
 800155c:	f7ff fc7c 	bl	8000e58 <Motor_Stop>
			  	 //HAL_Delay(10);
			  	 osDelay(20);
 8001560:	2014      	movs	r0, #20
 8001562:	f003 f859 	bl	8004618 <osDelay>
		  while((distance[US_ECHO_CH3]<15)){
 8001566:	4b1b      	ldr	r3, [pc, #108]	; (80015d4 <Searching_Mode+0xa8>)
 8001568:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 800156c:	f04f 0200 	mov.w	r2, #0
 8001570:	4b19      	ldr	r3, [pc, #100]	; (80015d8 <Searching_Mode+0xac>)
 8001572:	f7ff fa63 	bl	8000a3c <__aeabi_dcmplt>
 8001576:	4603      	mov	r3, r0
 8001578:	2b00      	cmp	r3, #0
 800157a:	d1e8      	bne.n	800154e <Searching_Mode+0x22>
		  }
		  Motor_Stop();
 800157c:	f7ff fc6c 	bl	8000e58 <Motor_Stop>
	      //HAL_Delay(1000);
		 // osDelay(1000);
		  //HAL_Delay(15);
		  while((distance[US_ECHO_CH2]>15)){
 8001580:	e00b      	b.n	800159a <Searching_Mode+0x6e>
		      Motor_Stop();
 8001582:	f7ff fc69 	bl	8000e58 <Motor_Stop>
			  //HAL_Delay(10);
			  osDelay(20);
 8001586:	2014      	movs	r0, #20
 8001588:	f003 f846 	bl	8004618 <osDelay>
			  Motor_ForWard(300);
 800158c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001590:	f7ff fc22 	bl	8000dd8 <Motor_ForWard>
		  //while(distance[US_ECHO_CH2]>=15);
		      //HAL_Delay(30);
			  osDelay(30);
 8001594:	201e      	movs	r0, #30
 8001596:	f003 f83f 	bl	8004618 <osDelay>
		  while((distance[US_ECHO_CH2]>15)){
 800159a:	4b0e      	ldr	r3, [pc, #56]	; (80015d4 <Searching_Mode+0xa8>)
 800159c:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80015a0:	f04f 0200 	mov.w	r2, #0
 80015a4:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <Searching_Mode+0xac>)
 80015a6:	f7ff fa67 	bl	8000a78 <__aeabi_dcmpgt>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1e8      	bne.n	8001582 <Searching_Mode+0x56>
		  }
	      Motor_Stop();
 80015b0:	f7ff fc52 	bl	8000e58 <Motor_Stop>
	      //HAL_Delay(1000);
		  osDelay(1000);
 80015b4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80015b8:	f003 f82e 	bl	8004618 <osDelay>
		  Parking_status = PARKING_OK;
 80015bc:	4b04      	ldr	r3, [pc, #16]	; (80015d0 <Searching_Mode+0xa4>)
 80015be:	2201      	movs	r2, #1
 80015c0:	601a      	str	r2, [r3, #0]
		  osSemaphoreRelease(Parking_Sem1Handle);
 80015c2:	4b06      	ldr	r3, [pc, #24]	; (80015dc <Searching_Mode+0xb0>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4618      	mov	r0, r3
 80015c8:	f003 f91c 	bl	8004804 <osSemaphoreRelease>
	  if(Parking_status == PARKING_NOK){
 80015cc:	e7b2      	b.n	8001534 <Searching_Mode+0x8>
 80015ce:	bf00      	nop
 80015d0:	200000a0 	.word	0x200000a0
 80015d4:	20000030 	.word	0x20000030
 80015d8:	402e0000 	.word	0x402e0000
 80015dc:	200000bc 	.word	0x200000bc

080015e0 <Parking_Mode>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Parking_Mode */
void Parking_Mode(void *argument)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b082      	sub	sp, #8
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	//int i=0;
  /* Infinite loop */
  for(;;)
  {

		osSemaphoreAcquire(Parking_Sem1Handle,osWaitForever);
 80015e8:	4b56      	ldr	r3, [pc, #344]	; (8001744 <Parking_Mode+0x164>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f04f 31ff 	mov.w	r1, #4294967295
 80015f0:	4618      	mov	r0, r3
 80015f2:	f003 f8b5 	bl	8004760 <osSemaphoreAcquire>
		while(Parking_status != PARKING_OK);
 80015f6:	bf00      	nop
 80015f8:	4b53      	ldr	r3, [pc, #332]	; (8001748 <Parking_Mode+0x168>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d1fb      	bne.n	80015f8 <Parking_Mode+0x18>
		Servo_Rotate_Angle(15, SERVO_TURN_RIGHT);
 8001600:	2100      	movs	r1, #0
 8001602:	200f      	movs	r0, #15
 8001604:	f7ff fc44 	bl	8000e90 <Servo_Rotate_Angle>
		while (distance[US_ECHO_CH2]<20){
 8001608:	e00b      	b.n	8001622 <Parking_Mode+0x42>
					 Motor_ForWard(300);
 800160a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800160e:	f7ff fbe3 	bl	8000dd8 <Motor_ForWard>
					 //HAL_Delay(20);
					  osDelay(20);
 8001612:	2014      	movs	r0, #20
 8001614:	f003 f800 	bl	8004618 <osDelay>
					 Motor_Stop();
 8001618:	f7ff fc1e 	bl	8000e58 <Motor_Stop>
					 //HAL_Delay(20);
					  osDelay(20);
 800161c:	2014      	movs	r0, #20
 800161e:	f002 fffb 	bl	8004618 <osDelay>
		while (distance[US_ECHO_CH2]<20){
 8001622:	4b4a      	ldr	r3, [pc, #296]	; (800174c <Parking_Mode+0x16c>)
 8001624:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	4b48      	ldr	r3, [pc, #288]	; (8001750 <Parking_Mode+0x170>)
 800162e:	f7ff fa05 	bl	8000a3c <__aeabi_dcmplt>
 8001632:	4603      	mov	r3, r0
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e8      	bne.n	800160a <Parking_Mode+0x2a>
					}
		Motor_Stop();
 8001638:	f7ff fc0e 	bl	8000e58 <Motor_Stop>
		//HAL_Delay(1000);
		  osDelay(1000);
 800163c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001640:	f002 ffea 	bl	8004618 <osDelay>
		Servo_Rotate_Angle(15, SERVO_TURN_LEFT);
 8001644:	2101      	movs	r1, #1
 8001646:	200f      	movs	r0, #15
 8001648:	f7ff fc22 	bl	8000e90 <Servo_Rotate_Angle>
		//HAL_Delay(50);

		while (distance[US_ECHO_CH4]>15){
 800164c:	e00b      	b.n	8001666 <Parking_Mode+0x86>
			 Motor_BackWard(300);
 800164e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001652:	f7ff fbe1 	bl	8000e18 <Motor_BackWard>
			 //HAL_Delay(20);
			  osDelay(20);
 8001656:	2014      	movs	r0, #20
 8001658:	f002 ffde 	bl	8004618 <osDelay>
			 Motor_Stop();
 800165c:	f7ff fbfc 	bl	8000e58 <Motor_Stop>
			 //HAL_Delay(20);
			  osDelay(20);
 8001660:	2014      	movs	r0, #20
 8001662:	f002 ffd9 	bl	8004618 <osDelay>
		while (distance[US_ECHO_CH4]>15){
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <Parking_Mode+0x16c>)
 8001668:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	4b38      	ldr	r3, [pc, #224]	; (8001754 <Parking_Mode+0x174>)
 8001672:	f7ff fa01 	bl	8000a78 <__aeabi_dcmpgt>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d1e8      	bne.n	800164e <Parking_Mode+0x6e>
			}
		Motor_Stop();
 800167c:	f7ff fbec 	bl	8000e58 <Motor_Stop>
		//HAL_Delay(1000);
		  osDelay(1000);
 8001680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001684:	f002 ffc8 	bl	8004618 <osDelay>
		Servo_Rotate_Angle(15, SERVO_TURN_RIGHT);
 8001688:	2100      	movs	r1, #0
 800168a:	200f      	movs	r0, #15
 800168c:	f7ff fc00 	bl	8000e90 <Servo_Rotate_Angle>
		//HAL_Delay(500);
		//HAL_Delay(50);
		while (distance[US_ECHO_CH4]>10){
 8001690:	e00b      	b.n	80016aa <Parking_Mode+0xca>
			Motor_BackWard(300);
 8001692:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001696:	f7ff fbbf 	bl	8000e18 <Motor_BackWard>
			//HAL_Delay(20);
			  osDelay(30);
 800169a:	201e      	movs	r0, #30
 800169c:	f002 ffbc 	bl	8004618 <osDelay>
			Motor_Stop();
 80016a0:	f7ff fbda 	bl	8000e58 <Motor_Stop>
			//HAL_Delay(20);
			  osDelay(20);
 80016a4:	2014      	movs	r0, #20
 80016a6:	f002 ffb7 	bl	8004618 <osDelay>
		while (distance[US_ECHO_CH4]>10){
 80016aa:	4b28      	ldr	r3, [pc, #160]	; (800174c <Parking_Mode+0x16c>)
 80016ac:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016b0:	f04f 0200 	mov.w	r2, #0
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <Parking_Mode+0x178>)
 80016b6:	f7ff f9df 	bl	8000a78 <__aeabi_dcmpgt>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1e8      	bne.n	8001692 <Parking_Mode+0xb2>
					}
		Motor_Stop();
 80016c0:	f7ff fbca 	bl	8000e58 <Motor_Stop>
		Servo_Rotate_Angle(0, SERVO_TURN_LEFT);
 80016c4:	2101      	movs	r1, #1
 80016c6:	2000      	movs	r0, #0
 80016c8:	f7ff fbe2 	bl	8000e90 <Servo_Rotate_Angle>
		osDelay(1000);
 80016cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016d0:	f002 ffa2 	bl	8004618 <osDelay>
		while (abs(distance[US_ECHO_CH1]-distance[US_ECHO_CH4])>=3){
 80016d4:	e01f      	b.n	8001716 <Parking_Mode+0x136>
				//Motor_Stop();
				//Servo_Rotate_Angle(0, SERVO_TURN_LEFT);
				//Parking_status = PARKING_OK;
				//HAL_Delay(10000);

				if(distance[US_ECHO_CH4]<5){
 80016d6:	4b1d      	ldr	r3, [pc, #116]	; (800174c <Parking_Mode+0x16c>)
 80016d8:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	4b1e      	ldr	r3, [pc, #120]	; (800175c <Parking_Mode+0x17c>)
 80016e2:	f7ff f9ab 	bl	8000a3c <__aeabi_dcmplt>
 80016e6:	4603      	mov	r3, r0
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d004      	beq.n	80016f6 <Parking_Mode+0x116>
				Motor_ForWard(300);
 80016ec:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80016f0:	f7ff fb72 	bl	8000dd8 <Motor_ForWard>
 80016f4:	e00f      	b.n	8001716 <Parking_Mode+0x136>
				//HAL_Delay(10);
				//Motor_Stop();
				//HAL_Delay(10);
			    }

			    else if(distance[US_ECHO_CH1]<5){
 80016f6:	4b15      	ldr	r3, [pc, #84]	; (800174c <Parking_Mode+0x16c>)
 80016f8:	e9d3 0100 	ldrd	r0, r1, [r3]
 80016fc:	f04f 0200 	mov.w	r2, #0
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <Parking_Mode+0x17c>)
 8001702:	f7ff f99b 	bl	8000a3c <__aeabi_dcmplt>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d100      	bne.n	800170e <Parking_Mode+0x12e>
 800170c:	e003      	b.n	8001716 <Parking_Mode+0x136>
				Motor_BackWard(300);
 800170e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8001712:	f7ff fb81 	bl	8000e18 <Motor_BackWard>
		while (abs(distance[US_ECHO_CH1]-distance[US_ECHO_CH4])>=3){
 8001716:	4b0d      	ldr	r3, [pc, #52]	; (800174c <Parking_Mode+0x16c>)
 8001718:	e9d3 0100 	ldrd	r0, r1, [r3]
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <Parking_Mode+0x16c>)
 800171e:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001722:	f7fe fd61 	bl	80001e8 <__aeabi_dsub>
 8001726:	4602      	mov	r2, r0
 8001728:	460b      	mov	r3, r1
 800172a:	4610      	mov	r0, r2
 800172c:	4619      	mov	r1, r3
 800172e:	f7ff f9ad 	bl	8000a8c <__aeabi_d2iz>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	bfb8      	it	lt
 8001738:	425b      	neglt	r3, r3
 800173a:	2b02      	cmp	r3, #2
 800173c:	dccb      	bgt.n	80016d6 <Parking_Mode+0xf6>
				//HAL_Delay(20);

				}
				else{}
		}
		Motor_Stop();
 800173e:	f7ff fb8b 	bl	8000e58 <Motor_Stop>
		osSemaphoreAcquire(Parking_Sem1Handle,osWaitForever);
 8001742:	e751      	b.n	80015e8 <Parking_Mode+0x8>
 8001744:	200000bc 	.word	0x200000bc
 8001748:	200000a0 	.word	0x200000a0
 800174c:	20000030 	.word	0x20000030
 8001750:	40340000 	.word	0x40340000
 8001754:	402e0000 	.word	0x402e0000
 8001758:	40240000 	.word	0x40240000
 800175c:	40140000 	.word	0x40140000

08001760 <UltraSonic1_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltraSonic1_Read */
void UltraSonic1_Read(void *argument)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonic1_Read */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <UltraSonic1_Read+0x24>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2164      	movs	r1, #100	; 0x64
 800176e:	4618      	mov	r0, r3
 8001770:	f002 fff6 	bl	8004760 <osSemaphoreAcquire>
	 UltraSonic_Read(US_Trigger_1_Pin);
 8001774:	2008      	movs	r0, #8
 8001776:	f7ff fe43 	bl	8001400 <UltraSonic_Read>
     osDelay(10);
 800177a:	200a      	movs	r0, #10
 800177c:	f002 ff4c 	bl	8004618 <osDelay>
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 8001780:	e7f2      	b.n	8001768 <UltraSonic1_Read+0x8>
 8001782:	bf00      	nop
 8001784:	200000c0 	.word	0x200000c0

08001788 <UltraSonic2_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltraSonic2_Read */
void UltraSonic2_Read(void *argument)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b082      	sub	sp, #8
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonic2_Read */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <UltraSonic2_Read+0x24>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	2164      	movs	r1, #100	; 0x64
 8001796:	4618      	mov	r0, r3
 8001798:	f002 ffe2 	bl	8004760 <osSemaphoreAcquire>
	 UltraSonic_Read(US_Trigger_2_Pin);
 800179c:	2010      	movs	r0, #16
 800179e:	f7ff fe2f 	bl	8001400 <UltraSonic_Read>
     osDelay(10);
 80017a2:	200a      	movs	r0, #10
 80017a4:	f002 ff38 	bl	8004618 <osDelay>
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 80017a8:	e7f2      	b.n	8001790 <UltraSonic2_Read+0x8>
 80017aa:	bf00      	nop
 80017ac:	200000c0 	.word	0x200000c0

080017b0 <UltraSonic3_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltraSonic3_Read */
void UltraSonic3_Read(void *argument)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonic3_Read */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 80017b8:	4b06      	ldr	r3, [pc, #24]	; (80017d4 <UltraSonic3_Read+0x24>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2164      	movs	r1, #100	; 0x64
 80017be:	4618      	mov	r0, r3
 80017c0:	f002 ffce 	bl	8004760 <osSemaphoreAcquire>
	 UltraSonic_Read(US_Trigger_3_Pin);
 80017c4:	2020      	movs	r0, #32
 80017c6:	f7ff fe1b 	bl	8001400 <UltraSonic_Read>
	 osDelay(10);
 80017ca:	200a      	movs	r0, #10
 80017cc:	f002 ff24 	bl	8004618 <osDelay>
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 80017d0:	e7f2      	b.n	80017b8 <UltraSonic3_Read+0x8>
 80017d2:	bf00      	nop
 80017d4:	200000c0 	.word	0x200000c0

080017d8 <UltraSonic4_Read>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UltraSonic4_Read */
void UltraSonic4_Read(void *argument)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN UltraSonic4_Read */
  /* Infinite loop */
  for(;;)
  {
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 80017e0:	4b06      	ldr	r3, [pc, #24]	; (80017fc <UltraSonic4_Read+0x24>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	2164      	movs	r1, #100	; 0x64
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 ffba 	bl	8004760 <osSemaphoreAcquire>
	 UltraSonic_Read(US_Trigger_4_Pin);
 80017ec:	2040      	movs	r0, #64	; 0x40
 80017ee:	f7ff fe07 	bl	8001400 <UltraSonic_Read>
     osDelay(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f002 ff10 	bl	8004618 <osDelay>
	 osSemaphoreAcquire(Sensor_Sem1Handle,100);
 80017f8:	e7f2      	b.n	80017e0 <UltraSonic4_Read+0x8>
 80017fa:	bf00      	nop
 80017fc:	200000c0 	.word	0x200000c0

08001800 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b088      	sub	sp, #32
 8001804:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001806:	f107 030c 	add.w	r3, r7, #12
 800180a:	2200      	movs	r2, #0
 800180c:	601a      	str	r2, [r3, #0]
 800180e:	605a      	str	r2, [r3, #4]
 8001810:	609a      	str	r2, [r3, #8]
 8001812:	60da      	str	r2, [r3, #12]
 8001814:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	60bb      	str	r3, [r7, #8]
 800181a:	4b19      	ldr	r3, [pc, #100]	; (8001880 <MX_GPIO_Init+0x80>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4a18      	ldr	r2, [pc, #96]	; (8001880 <MX_GPIO_Init+0x80>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4b16      	ldr	r3, [pc, #88]	; (8001880 <MX_GPIO_Init+0x80>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	607b      	str	r3, [r7, #4]
 8001836:	4b12      	ldr	r3, [pc, #72]	; (8001880 <MX_GPIO_Init+0x80>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a11      	ldr	r2, [pc, #68]	; (8001880 <MX_GPIO_Init+0x80>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b0f      	ldr	r3, [pc, #60]	; (8001880 <MX_GPIO_Init+0x80>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	607b      	str	r3, [r7, #4]
 800184c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, M2_IN2_Pin|M2_IN1_Pin|US_Trigger_1_Pin|US_Trigger_2_Pin
 800184e:	2200      	movs	r2, #0
 8001850:	f44f 71ff 	mov.w	r1, #510	; 0x1fe
 8001854:	480b      	ldr	r0, [pc, #44]	; (8001884 <MX_GPIO_Init+0x84>)
 8001856:	f000 fe5b 	bl	8002510 <HAL_GPIO_WritePin>
                          |US_Trigger_3_Pin|US_Trigger_4_Pin|M1_IN1_Pin|M1_IN2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = M2_IN2_Pin|M2_IN1_Pin|US_Trigger_1_Pin|US_Trigger_2_Pin
 800185a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 800185e:	60fb      	str	r3, [r7, #12]
                          |US_Trigger_3_Pin|US_Trigger_4_Pin|M1_IN1_Pin|M1_IN2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4619      	mov	r1, r3
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <MX_GPIO_Init+0x84>)
 8001874:	f000 fcc8 	bl	8002208 <HAL_GPIO_Init>

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40020400 	.word	0x40020400

08001888 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800188c:	f000 fb98 	bl	8001fc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001890:	f000 f834 	bl	80018fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001894:	f7ff ffb4 	bl	8001800 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001898:	f000 f986 	bl	8001ba8 <MX_TIM1_Init>
  MX_TIM3_Init();
 800189c:	f000 fa18 	bl	8001cd0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  	HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_4);
 80018a0:	210c      	movs	r1, #12
 80018a2:	4814      	ldr	r0, [pc, #80]	; (80018f4 <main+0x6c>)
 80018a4:	f001 fcda 	bl	800325c <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_3);
 80018a8:	2108      	movs	r1, #8
 80018aa:	4812      	ldr	r0, [pc, #72]	; (80018f4 <main+0x6c>)
 80018ac:	f001 fcd6 	bl	800325c <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_2);
 80018b0:	2104      	movs	r1, #4
 80018b2:	4810      	ldr	r0, [pc, #64]	; (80018f4 <main+0x6c>)
 80018b4:	f001 fcd2 	bl	800325c <HAL_TIM_IC_Start>
    HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 80018b8:	2100      	movs	r1, #0
 80018ba:	480e      	ldr	r0, [pc, #56]	; (80018f4 <main+0x6c>)
 80018bc:	f001 fcce 	bl	800325c <HAL_TIM_IC_Start>



    htim3.Instance->CCR1 = 550;
 80018c0:	4b0d      	ldr	r3, [pc, #52]	; (80018f8 <main+0x70>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f240 2226 	movw	r2, #550	; 0x226
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
    htim3.Instance->CCR2 = 500;
 80018ca:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <main+0x70>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018d2:	639a      	str	r2, [r3, #56]	; 0x38
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80018d4:	2100      	movs	r1, #0
 80018d6:	4808      	ldr	r0, [pc, #32]	; (80018f8 <main+0x70>)
 80018d8:	f001 fbb6 	bl	8003048 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 80018dc:	2104      	movs	r1, #4
 80018de:	4806      	ldr	r0, [pc, #24]	; (80018f8 <main+0x70>)
 80018e0:	f001 fbb2 	bl	8003048 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80018e4:	f002 fdbc 	bl	8004460 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 80018e8:	f7ff fdb0 	bl	800144c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80018ec:	f002 fddc 	bl	80044a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018f0:	e7fe      	b.n	80018f0 <main+0x68>
 80018f2:	bf00      	nop
 80018f4:	2000010c 	.word	0x2000010c
 80018f8:	20000154 	.word	0x20000154

080018fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b094      	sub	sp, #80	; 0x50
 8001900:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001902:	f107 0320 	add.w	r3, r7, #32
 8001906:	2230      	movs	r2, #48	; 0x30
 8001908:	2100      	movs	r1, #0
 800190a:	4618      	mov	r0, r3
 800190c:	f006 f836 	bl	800797c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	2300      	movs	r3, #0
 8001922:	60bb      	str	r3, [r7, #8]
 8001924:	4b28      	ldr	r3, [pc, #160]	; (80019c8 <SystemClock_Config+0xcc>)
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	4a27      	ldr	r2, [pc, #156]	; (80019c8 <SystemClock_Config+0xcc>)
 800192a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192e:	6413      	str	r3, [r2, #64]	; 0x40
 8001930:	4b25      	ldr	r3, [pc, #148]	; (80019c8 <SystemClock_Config+0xcc>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800193c:	2300      	movs	r3, #0
 800193e:	607b      	str	r3, [r7, #4]
 8001940:	4b22      	ldr	r3, [pc, #136]	; (80019cc <SystemClock_Config+0xd0>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <SystemClock_Config+0xd0>)
 800194a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800194e:	6013      	str	r3, [r2, #0]
 8001950:	4b1e      	ldr	r3, [pc, #120]	; (80019cc <SystemClock_Config+0xd0>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001958:	607b      	str	r3, [r7, #4]
 800195a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800195c:	2302      	movs	r3, #2
 800195e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001960:	2301      	movs	r3, #1
 8001962:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001964:	2310      	movs	r3, #16
 8001966:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001968:	2302      	movs	r3, #2
 800196a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800196c:	2300      	movs	r3, #0
 800196e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001970:	2308      	movs	r3, #8
 8001972:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001974:	2354      	movs	r3, #84	; 0x54
 8001976:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001978:	2302      	movs	r3, #2
 800197a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800197c:	2304      	movs	r3, #4
 800197e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001980:	f107 0320 	add.w	r3, r7, #32
 8001984:	4618      	mov	r0, r3
 8001986:	f000 fddd 	bl	8002544 <HAL_RCC_OscConfig>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001990:	f000 f830 	bl	80019f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001994:	230f      	movs	r3, #15
 8001996:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001998:	2302      	movs	r3, #2
 800199a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800199c:	2300      	movs	r3, #0
 800199e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019aa:	f107 030c 	add.w	r3, r7, #12
 80019ae:	2102      	movs	r1, #2
 80019b0:	4618      	mov	r0, r3
 80019b2:	f001 f83f 	bl	8002a34 <HAL_RCC_ClockConfig>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80019bc:	f000 f81a 	bl	80019f4 <Error_Handler>
  }
}
 80019c0:	bf00      	nop
 80019c2:	3750      	adds	r7, #80	; 0x50
 80019c4:	46bd      	mov	sp, r7
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	40023800 	.word	0x40023800
 80019cc:	40007000 	.word	0x40007000

080019d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM10) {
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80019de:	4293      	cmp	r3, r2
 80019e0:	d101      	bne.n	80019e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80019e2:	f000 fb0f 	bl	8002004 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80019e6:	bf00      	nop
 80019e8:	3708      	adds	r7, #8
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40014400 	.word	0x40014400

080019f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019f8:	b672      	cpsid	i
}
 80019fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019fc:	e7fe      	b.n	80019fc <Error_Handler+0x8>
	...

08001a00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	4b12      	ldr	r3, [pc, #72]	; (8001a54 <HAL_MspInit+0x54>)
 8001a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a0e:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <HAL_MspInit+0x54>)
 8001a10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a14:	6453      	str	r3, [r2, #68]	; 0x44
 8001a16:	4b0f      	ldr	r3, [pc, #60]	; (8001a54 <HAL_MspInit+0x54>)
 8001a18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a1e:	607b      	str	r3, [r7, #4]
 8001a20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <HAL_MspInit+0x54>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <HAL_MspInit+0x54>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	; 0x40
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <HAL_MspInit+0x54>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001a3e:	2200      	movs	r2, #0
 8001a40:	210f      	movs	r1, #15
 8001a42:	f06f 0001 	mvn.w	r0, #1
 8001a46:	f000 fbb5 	bl	80021b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800

08001a58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08c      	sub	sp, #48	; 0x30
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001a64:	2300      	movs	r3, #0
 8001a66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM10 clock */
  __HAL_RCC_TIM10_CLK_ENABLE();
 8001a68:	2300      	movs	r3, #0
 8001a6a:	60bb      	str	r3, [r7, #8]
 8001a6c:	4b2e      	ldr	r3, [pc, #184]	; (8001b28 <HAL_InitTick+0xd0>)
 8001a6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a70:	4a2d      	ldr	r2, [pc, #180]	; (8001b28 <HAL_InitTick+0xd0>)
 8001a72:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a76:	6453      	str	r3, [r2, #68]	; 0x44
 8001a78:	4b2b      	ldr	r3, [pc, #172]	; (8001b28 <HAL_InitTick+0xd0>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
 8001a82:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001a84:	f107 020c 	add.w	r2, r7, #12
 8001a88:	f107 0310 	add.w	r3, r7, #16
 8001a8c:	4611      	mov	r1, r2
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f001 f99c 	bl	8002dcc <HAL_RCC_GetClockConfig>

  /* Compute TIM10 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001a94:	f001 f986 	bl	8002da4 <HAL_RCC_GetPCLK2Freq>
 8001a98:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM10 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001a9c:	4a23      	ldr	r2, [pc, #140]	; (8001b2c <HAL_InitTick+0xd4>)
 8001a9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa2:	0c9b      	lsrs	r3, r3, #18
 8001aa4:	3b01      	subs	r3, #1
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM10 */
  htim10.Instance = TIM10;
 8001aa8:	4b21      	ldr	r3, [pc, #132]	; (8001b30 <HAL_InitTick+0xd8>)
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_InitTick+0xdc>)
 8001aac:	601a      	str	r2, [r3, #0]
  + Period = [(TIM10CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim10.Init.Period = (1000000U / 1000U) - 1U;
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_InitTick+0xd8>)
 8001ab0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ab4:	60da      	str	r2, [r3, #12]
  htim10.Init.Prescaler = uwPrescalerValue;
 8001ab6:	4a1e      	ldr	r2, [pc, #120]	; (8001b30 <HAL_InitTick+0xd8>)
 8001ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aba:	6053      	str	r3, [r2, #4]
  htim10.Init.ClockDivision = 0;
 8001abc:	4b1c      	ldr	r3, [pc, #112]	; (8001b30 <HAL_InitTick+0xd8>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	611a      	str	r2, [r3, #16]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ac2:	4b1b      	ldr	r3, [pc, #108]	; (8001b30 <HAL_InitTick+0xd8>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ac8:	4b19      	ldr	r3, [pc, #100]	; (8001b30 <HAL_InitTick+0xd8>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim10);
 8001ace:	4818      	ldr	r0, [pc, #96]	; (8001b30 <HAL_InitTick+0xd8>)
 8001ad0:	f001 f9ae 	bl	8002e30 <HAL_TIM_Base_Init>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001ada:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d11b      	bne.n	8001b1a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim10);
 8001ae2:	4813      	ldr	r0, [pc, #76]	; (8001b30 <HAL_InitTick+0xd8>)
 8001ae4:	f001 f9f4 	bl	8002ed0 <HAL_TIM_Base_Start_IT>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001aee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d111      	bne.n	8001b1a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM10 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001af6:	2019      	movs	r0, #25
 8001af8:	f000 fb78 	bl	80021ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	2b0f      	cmp	r3, #15
 8001b00:	d808      	bhi.n	8001b14 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001b02:	2200      	movs	r2, #0
 8001b04:	6879      	ldr	r1, [r7, #4]
 8001b06:	2019      	movs	r0, #25
 8001b08:	f000 fb54 	bl	80021b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b0c:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_InitTick+0xe0>)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6013      	str	r3, [r2, #0]
 8001b12:	e002      	b.n	8001b1a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3730      	adds	r7, #48	; 0x30
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	431bde83 	.word	0x431bde83
 8001b30:	200000c4 	.word	0x200000c4
 8001b34:	40014400 	.word	0x40014400
 8001b38:	20000004 	.word	0x20000004

08001b3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b40:	e7fe      	b.n	8001b40 <NMI_Handler+0x4>

08001b42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b42:	b480      	push	{r7}
 8001b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler+0x4>

08001b48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b4c:	e7fe      	b.n	8001b4c <MemManage_Handler+0x4>

08001b4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b52:	e7fe      	b.n	8001b52 <BusFault_Handler+0x4>

08001b54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <UsageFault_Handler+0x4>

08001b5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b5a:	b480      	push	{r7}
 8001b5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b5e:	bf00      	nop
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b6c:	4803      	ldr	r0, [pc, #12]	; (8001b7c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8001b6e:	f001 fc43 	bl	80033f8 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001b72:	4803      	ldr	r0, [pc, #12]	; (8001b80 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8001b74:	f001 fc40 	bl	80033f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	2000010c 	.word	0x2000010c
 8001b80:	200000c4 	.word	0x200000c4

08001b84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b84:	b480      	push	{r7}
 8001b86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b88:	4b06      	ldr	r3, [pc, #24]	; (8001ba4 <SystemInit+0x20>)
 8001b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b8e:	4a05      	ldr	r2, [pc, #20]	; (8001ba4 <SystemInit+0x20>)
 8001b90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b98:	bf00      	nop
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	e000ed00 	.word	0xe000ed00

08001ba8 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b08a      	sub	sp, #40	; 0x28
 8001bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001bae:	f107 0318 	add.w	r3, r7, #24
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	601a      	str	r2, [r3, #0]
 8001bb6:	605a      	str	r2, [r3, #4]
 8001bb8:	609a      	str	r2, [r3, #8]
 8001bba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bbc:	f107 0310 	add.w	r3, r7, #16
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	601a      	str	r2, [r3, #0]
 8001bc4:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001bc6:	463b      	mov	r3, r7
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001bd2:	4b3d      	ldr	r3, [pc, #244]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001bd4:	4a3d      	ldr	r2, [pc, #244]	; (8001ccc <MX_TIM1_Init+0x124>)
 8001bd6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001bd8:	4b3b      	ldr	r3, [pc, #236]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001bda:	2253      	movs	r2, #83	; 0x53
 8001bdc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bde:	4b3a      	ldr	r3, [pc, #232]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001be0:	2200      	movs	r2, #0
 8001be2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bea:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bec:	4b36      	ldr	r3, [pc, #216]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001bee:	2200      	movs	r2, #0
 8001bf0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001bf2:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001bf8:	4b33      	ldr	r3, [pc, #204]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001bfa:	2280      	movs	r2, #128	; 0x80
 8001bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001bfe:	4832      	ldr	r0, [pc, #200]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c00:	f001 f916 	bl	8002e30 <HAL_TIM_Base_Init>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001c0a:	f7ff fef3 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c12:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001c14:	f107 0318 	add.w	r3, r7, #24
 8001c18:	4619      	mov	r1, r3
 8001c1a:	482b      	ldr	r0, [pc, #172]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c1c:	f001 fe3a 	bl	8003894 <HAL_TIM_ConfigClockSource>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001c26:	f7ff fee5 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001c2a:	4827      	ldr	r0, [pc, #156]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c2c:	f001 fabc 	bl	80031a8 <HAL_TIM_IC_Init>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001c36:	f7ff fedd 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c42:	f107 0310 	add.w	r3, r7, #16
 8001c46:	4619      	mov	r1, r3
 8001c48:	481f      	ldr	r0, [pc, #124]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c4a:	f002 fb43 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 8001c54:	f7ff fece 	bl	80019f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001c68:	463b      	mov	r3, r7
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4816      	ldr	r0, [pc, #88]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c70:	f001 fcb2 	bl	80035d8 <HAL_TIM_IC_ConfigChannel>
 8001c74:	4603      	mov	r3, r0
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d001      	beq.n	8001c7e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001c7a:	f7ff febb 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8001c7e:	463b      	mov	r3, r7
 8001c80:	2204      	movs	r2, #4
 8001c82:	4619      	mov	r1, r3
 8001c84:	4810      	ldr	r0, [pc, #64]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c86:	f001 fca7 	bl	80035d8 <HAL_TIM_IC_ConfigChannel>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8001c90:	f7ff feb0 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8001c94:	463b      	mov	r3, r7
 8001c96:	2208      	movs	r2, #8
 8001c98:	4619      	mov	r1, r3
 8001c9a:	480b      	ldr	r0, [pc, #44]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001c9c:	f001 fc9c 	bl	80035d8 <HAL_TIM_IC_ConfigChannel>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d001      	beq.n	8001caa <MX_TIM1_Init+0x102>
  {
    Error_Handler();
 8001ca6:	f7ff fea5 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001caa:	463b      	mov	r3, r7
 8001cac:	220c      	movs	r2, #12
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_TIM1_Init+0x120>)
 8001cb2:	f001 fc91 	bl	80035d8 <HAL_TIM_IC_ConfigChannel>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM1_Init+0x118>
  {
    Error_Handler();
 8001cbc:	f7ff fe9a 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3728      	adds	r7, #40	; 0x28
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	2000010c 	.word	0x2000010c
 8001ccc:	40010000 	.word	0x40010000

08001cd0 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b08e      	sub	sp, #56	; 0x38
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cda:	2200      	movs	r2, #0
 8001cdc:	601a      	str	r2, [r3, #0]
 8001cde:	605a      	str	r2, [r3, #4]
 8001ce0:	609a      	str	r2, [r3, #8]
 8001ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ce4:	f107 0320 	add.w	r3, r7, #32
 8001ce8:	2200      	movs	r2, #0
 8001cea:	601a      	str	r2, [r3, #0]
 8001cec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	605a      	str	r2, [r3, #4]
 8001cf6:	609a      	str	r2, [r3, #8]
 8001cf8:	60da      	str	r2, [r3, #12]
 8001cfa:	611a      	str	r2, [r3, #16]
 8001cfc:	615a      	str	r2, [r3, #20]
 8001cfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d00:	4b38      	ldr	r3, [pc, #224]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d02:	4a39      	ldr	r2, [pc, #228]	; (8001de8 <MX_TIM3_Init+0x118>)
 8001d04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1680-1;
 8001d06:	4b37      	ldr	r3, [pc, #220]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d08:	f240 628f 	movw	r2, #1679	; 0x68f
 8001d0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d0e:	4b35      	ldr	r3, [pc, #212]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8001d14:	4b33      	ldr	r3, [pc, #204]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001d1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001d22:	4b30      	ldr	r3, [pc, #192]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d24:	2280      	movs	r2, #128	; 0x80
 8001d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d28:	482e      	ldr	r0, [pc, #184]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d2a:	f001 f881 	bl	8002e30 <HAL_TIM_Base_Init>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d001      	beq.n	8001d38 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001d34:	f7ff fe5e 	bl	80019f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d3c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d3e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d42:	4619      	mov	r1, r3
 8001d44:	4827      	ldr	r0, [pc, #156]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d46:	f001 fda5 	bl	8003894 <HAL_TIM_ConfigClockSource>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d001      	beq.n	8001d54 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001d50:	f7ff fe50 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001d54:	4823      	ldr	r0, [pc, #140]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d56:	f001 f91d 	bl	8002f94 <HAL_TIM_PWM_Init>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001d60:	f7ff fe48 	bl	80019f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d64:	2300      	movs	r3, #0
 8001d66:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d6c:	f107 0320 	add.w	r3, r7, #32
 8001d70:	4619      	mov	r1, r3
 8001d72:	481c      	ldr	r0, [pc, #112]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d74:	f002 faae 	bl	80042d4 <HAL_TIMEx_MasterConfigSynchronization>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001d7e:	f7ff fe39 	bl	80019f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d82:	2360      	movs	r3, #96	; 0x60
 8001d84:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001d86:	2300      	movs	r3, #0
 8001d88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d92:	1d3b      	adds	r3, r7, #4
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4812      	ldr	r0, [pc, #72]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001d9a:	f001 fcb9 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001da4:	f7ff fe26 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	2204      	movs	r2, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001db0:	f001 fcae 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 8001dba:	f7ff fe1b 	bl	80019f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001dbe:	1d3b      	adds	r3, r7, #4
 8001dc0:	2208      	movs	r2, #8
 8001dc2:	4619      	mov	r1, r3
 8001dc4:	4807      	ldr	r0, [pc, #28]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001dc6:	f001 fca3 	bl	8003710 <HAL_TIM_PWM_ConfigChannel>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d001      	beq.n	8001dd4 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001dd0:	f7ff fe10 	bl	80019f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001dd4:	4803      	ldr	r0, [pc, #12]	; (8001de4 <MX_TIM3_Init+0x114>)
 8001dd6:	f000 f86f 	bl	8001eb8 <HAL_TIM_MspPostInit>

}
 8001dda:	bf00      	nop
 8001ddc:	3738      	adds	r7, #56	; 0x38
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000154 	.word	0x20000154
 8001de8:	40000400 	.word	0x40000400

08001dec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001df4:	f107 0314 	add.w	r3, r7, #20
 8001df8:	2200      	movs	r2, #0
 8001dfa:	601a      	str	r2, [r3, #0]
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	609a      	str	r2, [r3, #8]
 8001e00:	60da      	str	r2, [r3, #12]
 8001e02:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a27      	ldr	r2, [pc, #156]	; (8001ea8 <HAL_TIM_Base_MspInit+0xbc>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d135      	bne.n	8001e7a <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
 8001e12:	4b26      	ldr	r3, [pc, #152]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e16:	4a25      	ldr	r2, [pc, #148]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e1e:	4b23      	ldr	r3, [pc, #140]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	613b      	str	r3, [r7, #16]
 8001e28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60fb      	str	r3, [r7, #12]
 8001e2e:	4b1f      	ldr	r3, [pc, #124]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e32:	4a1e      	ldr	r2, [pc, #120]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e34:	f043 0301 	orr.w	r3, r3, #1
 8001e38:	6313      	str	r3, [r2, #48]	; 0x30
 8001e3a:	4b1c      	ldr	r3, [pc, #112]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	f003 0301 	and.w	r3, r3, #1
 8001e42:	60fb      	str	r3, [r7, #12]
 8001e44:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = US_Echo_1_Pin|US_Echo_2_Pin|US_Echo_3_Pin|US_Echo_4_Pin;
 8001e46:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8001e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e50:	2300      	movs	r3, #0
 8001e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e5c:	f107 0314 	add.w	r3, r7, #20
 8001e60:	4619      	mov	r1, r3
 8001e62:	4813      	ldr	r0, [pc, #76]	; (8001eb0 <HAL_TIM_Base_MspInit+0xc4>)
 8001e64:	f000 f9d0 	bl	8002208 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 15, 0);
 8001e68:	2200      	movs	r2, #0
 8001e6a:	210f      	movs	r1, #15
 8001e6c:	2019      	movs	r0, #25
 8001e6e:	f000 f9a1 	bl	80021b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001e72:	2019      	movs	r0, #25
 8001e74:	f000 f9ba 	bl	80021ec <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e78:	e012      	b.n	8001ea0 <HAL_TIM_Base_MspInit+0xb4>
  else if(tim_baseHandle->Instance==TIM3)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a0d      	ldr	r2, [pc, #52]	; (8001eb4 <HAL_TIM_Base_MspInit+0xc8>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d10d      	bne.n	8001ea0 <HAL_TIM_Base_MspInit+0xb4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e84:	2300      	movs	r3, #0
 8001e86:	60bb      	str	r3, [r7, #8]
 8001e88:	4b08      	ldr	r3, [pc, #32]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8c:	4a07      	ldr	r2, [pc, #28]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e8e:	f043 0302 	orr.w	r3, r3, #2
 8001e92:	6413      	str	r3, [r2, #64]	; 0x40
 8001e94:	4b05      	ldr	r3, [pc, #20]	; (8001eac <HAL_TIM_Base_MspInit+0xc0>)
 8001e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e98:	f003 0302 	and.w	r3, r3, #2
 8001e9c:	60bb      	str	r3, [r7, #8]
 8001e9e:	68bb      	ldr	r3, [r7, #8]
}
 8001ea0:	bf00      	nop
 8001ea2:	3728      	adds	r7, #40	; 0x28
 8001ea4:	46bd      	mov	sp, r7
 8001ea6:	bd80      	pop	{r7, pc}
 8001ea8:	40010000 	.word	0x40010000
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40000400 	.word	0x40000400

08001eb8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b08a      	sub	sp, #40	; 0x28
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ec0:	f107 0314 	add.w	r3, r7, #20
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]
 8001ec8:	605a      	str	r2, [r3, #4]
 8001eca:	609a      	str	r2, [r3, #8]
 8001ecc:	60da      	str	r2, [r3, #12]
 8001ece:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a21      	ldr	r2, [pc, #132]	; (8001f5c <HAL_TIM_MspPostInit+0xa4>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d13b      	bne.n	8001f52 <HAL_TIM_MspPostInit+0x9a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eda:	2300      	movs	r3, #0
 8001edc:	613b      	str	r3, [r7, #16]
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_TIM_MspPostInit+0xa8>)
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee2:	4a1f      	ldr	r2, [pc, #124]	; (8001f60 <HAL_TIM_MspPostInit+0xa8>)
 8001ee4:	f043 0301 	orr.w	r3, r3, #1
 8001ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_TIM_MspPostInit+0xa8>)
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	f003 0301 	and.w	r3, r3, #1
 8001ef2:	613b      	str	r3, [r7, #16]
 8001ef4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60fb      	str	r3, [r7, #12]
 8001efa:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_TIM_MspPostInit+0xa8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a18      	ldr	r2, [pc, #96]	; (8001f60 <HAL_TIM_MspPostInit+0xa8>)
 8001f00:	f043 0302 	orr.w	r3, r3, #2
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_TIM_MspPostInit+0xa8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0302 	and.w	r3, r3, #2
 8001f0e:	60fb      	str	r3, [r7, #12]
 8001f10:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = M2_EN_Pin|M1_EN_Pin;
 8001f12:	23c0      	movs	r3, #192	; 0xc0
 8001f14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f16:	2302      	movs	r3, #2
 8001f18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f22:	2302      	movs	r3, #2
 8001f24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f26:	f107 0314 	add.w	r3, r7, #20
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	480d      	ldr	r0, [pc, #52]	; (8001f64 <HAL_TIM_MspPostInit+0xac>)
 8001f2e:	f000 f96b 	bl	8002208 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Servo_Pin;
 8001f32:	2301      	movs	r3, #1
 8001f34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f36:	2302      	movs	r3, #2
 8001f38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f42:	2302      	movs	r3, #2
 8001f44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8001f46:	f107 0314 	add.w	r3, r7, #20
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	4806      	ldr	r0, [pc, #24]	; (8001f68 <HAL_TIM_MspPostInit+0xb0>)
 8001f4e:	f000 f95b 	bl	8002208 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001f52:	bf00      	nop
 8001f54:	3728      	adds	r7, #40	; 0x28
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40000400 	.word	0x40000400
 8001f60:	40023800 	.word	0x40023800
 8001f64:	40020000 	.word	0x40020000
 8001f68:	40020400 	.word	0x40020400

08001f6c <Reset_Handler>:
    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  

  ldr   sp, =_estack      /* set stack pointer */
 8001f6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001f70:	f7ff fe08 	bl	8001b84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f74:	480c      	ldr	r0, [pc, #48]	; (8001fa8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001f76:	490d      	ldr	r1, [pc, #52]	; (8001fac <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001f78:	4a0d      	ldr	r2, [pc, #52]	; (8001fb0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a0a      	ldr	r2, [pc, #40]	; (8001fb4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001f8c:	4c0a      	ldr	r4, [pc, #40]	; (8001fb8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f005 fcf7 	bl	800798c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9e:	f7ff fc73 	bl	8001888 <main>
  bx  lr    
 8001fa2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001fa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001fb0:	08007bbc 	.word	0x08007bbc
  ldr r2, =_sbss
 8001fb4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001fb8:	20004af0 	.word	0x20004af0

08001fbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fbc:	e7fe      	b.n	8001fbc <ADC_IRQHandler>
	...

08001fc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc4:	4b0e      	ldr	r3, [pc, #56]	; (8002000 <HAL_Init+0x40>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a0d      	ldr	r2, [pc, #52]	; (8002000 <HAL_Init+0x40>)
 8001fca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <HAL_Init+0x40>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0a      	ldr	r2, [pc, #40]	; (8002000 <HAL_Init+0x40>)
 8001fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fdc:	4b08      	ldr	r3, [pc, #32]	; (8002000 <HAL_Init+0x40>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a07      	ldr	r2, [pc, #28]	; (8002000 <HAL_Init+0x40>)
 8001fe2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe8:	2003      	movs	r0, #3
 8001fea:	f000 f8d8 	bl	800219e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fee:	200f      	movs	r0, #15
 8001ff0:	f7ff fd32 	bl	8001a58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff4:	f7ff fd04 	bl	8001a00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff8:	2300      	movs	r3, #0
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	40023c00 	.word	0x40023c00

08002004 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <HAL_IncTick+0x20>)
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_IncTick+0x24>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4413      	add	r3, r2
 8002014:	4a04      	ldr	r2, [pc, #16]	; (8002028 <HAL_IncTick+0x24>)
 8002016:	6013      	str	r3, [r2, #0]
}
 8002018:	bf00      	nop
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
 8002022:	bf00      	nop
 8002024:	20000008 	.word	0x20000008
 8002028:	2000019c 	.word	0x2000019c

0800202c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800202c:	b480      	push	{r7}
 800202e:	af00      	add	r7, sp, #0
  return uwTick;
 8002030:	4b03      	ldr	r3, [pc, #12]	; (8002040 <HAL_GetTick+0x14>)
 8002032:	681b      	ldr	r3, [r3, #0]
}

 8002034:	4618      	mov	r0, r3
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
 800203e:	bf00      	nop
 8002040:	2000019c 	.word	0x2000019c

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b082      	sub	sp, #8
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a6:	6878      	ldr	r0, [r7, #4]
 80021a8:	f7ff ff4c 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021ac:	bf00      	nop
 80021ae:	3708      	adds	r7, #8
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd80      	pop	{r7, pc}

080021b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	60b9      	str	r1, [r7, #8]
 80021be:	607a      	str	r2, [r7, #4]
 80021c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c6:	f7ff ff61 	bl	800208c <__NVIC_GetPriorityGrouping>
 80021ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021cc:	687a      	ldr	r2, [r7, #4]
 80021ce:	68b9      	ldr	r1, [r7, #8]
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7ff ffb1 	bl	8002138 <NVIC_EncodePriority>
 80021d6:	4602      	mov	r2, r0
 80021d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f7ff ff80 	bl	80020e4 <__NVIC_SetPriority>
}
 80021e4:	bf00      	nop
 80021e6:	3718      	adds	r7, #24
 80021e8:	46bd      	mov	sp, r7
 80021ea:	bd80      	pop	{r7, pc}

080021ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b082      	sub	sp, #8
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	4603      	mov	r3, r0
 80021f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fa:	4618      	mov	r0, r3
 80021fc:	f7ff ff54 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002200:	bf00      	nop
 8002202:	3708      	adds	r7, #8
 8002204:	46bd      	mov	sp, r7
 8002206:	bd80      	pop	{r7, pc}

08002208 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	; 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002212:	2300      	movs	r3, #0
 8002214:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e159      	b.n	80024d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002224:	2201      	movs	r2, #1
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	fa02 f303 	lsl.w	r3, r2, r3
 800222c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	697a      	ldr	r2, [r7, #20]
 8002234:	4013      	ands	r3, r2
 8002236:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002238:	693a      	ldr	r2, [r7, #16]
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	429a      	cmp	r2, r3
 800223e:	f040 8148 	bne.w	80024d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f003 0303 	and.w	r3, r3, #3
 800224a:	2b01      	cmp	r3, #1
 800224c:	d005      	beq.n	800225a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002256:	2b02      	cmp	r3, #2
 8002258:	d130      	bne.n	80022bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	2203      	movs	r2, #3
 8002266:	fa02 f303 	lsl.w	r3, r2, r3
 800226a:	43db      	mvns	r3, r3
 800226c:	69ba      	ldr	r2, [r7, #24]
 800226e:	4013      	ands	r3, r2
 8002270:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	69fb      	ldr	r3, [r7, #28]
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	fa02 f303 	lsl.w	r3, r2, r3
 800227e:	69ba      	ldr	r2, [r7, #24]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002290:	2201      	movs	r2, #1
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	fa02 f303 	lsl.w	r3, r2, r3
 8002298:	43db      	mvns	r3, r3
 800229a:	69ba      	ldr	r2, [r7, #24]
 800229c:	4013      	ands	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	091b      	lsrs	r3, r3, #4
 80022a6:	f003 0201 	and.w	r2, r3, #1
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b03      	cmp	r3, #3
 80022c6:	d017      	beq.n	80022f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	005b      	lsls	r3, r3, #1
 80022d2:	2203      	movs	r2, #3
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	689a      	ldr	r2, [r3, #8]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f003 0303 	and.w	r3, r3, #3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d123      	bne.n	800234c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	08da      	lsrs	r2, r3, #3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3208      	adds	r2, #8
 800230c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002310:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	f003 0307 	and.w	r3, r3, #7
 8002318:	009b      	lsls	r3, r3, #2
 800231a:	220f      	movs	r2, #15
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	691a      	ldr	r2, [r3, #16]
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	08da      	lsrs	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	3208      	adds	r2, #8
 8002346:	69b9      	ldr	r1, [r7, #24]
 8002348:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	2203      	movs	r2, #3
 8002358:	fa02 f303 	lsl.w	r3, r2, r3
 800235c:	43db      	mvns	r3, r3
 800235e:	69ba      	ldr	r2, [r7, #24]
 8002360:	4013      	ands	r3, r2
 8002362:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0203 	and.w	r2, r3, #3
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	005b      	lsls	r3, r3, #1
 8002370:	fa02 f303 	lsl.w	r3, r2, r3
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	4313      	orrs	r3, r2
 8002378:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	69ba      	ldr	r2, [r7, #24]
 800237e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002388:	2b00      	cmp	r3, #0
 800238a:	f000 80a2 	beq.w	80024d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	4b57      	ldr	r3, [pc, #348]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	4a56      	ldr	r2, [pc, #344]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 8002398:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800239c:	6453      	str	r3, [r2, #68]	; 0x44
 800239e:	4b54      	ldr	r3, [pc, #336]	; (80024f0 <HAL_GPIO_Init+0x2e8>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023a6:	60fb      	str	r3, [r7, #12]
 80023a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023aa:	4a52      	ldr	r2, [pc, #328]	; (80024f4 <HAL_GPIO_Init+0x2ec>)
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	089b      	lsrs	r3, r3, #2
 80023b0:	3302      	adds	r3, #2
 80023b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80023b8:	69fb      	ldr	r3, [r7, #28]
 80023ba:	f003 0303 	and.w	r3, r3, #3
 80023be:	009b      	lsls	r3, r3, #2
 80023c0:	220f      	movs	r2, #15
 80023c2:	fa02 f303 	lsl.w	r3, r2, r3
 80023c6:	43db      	mvns	r3, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4013      	ands	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a49      	ldr	r2, [pc, #292]	; (80024f8 <HAL_GPIO_Init+0x2f0>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d019      	beq.n	800240a <HAL_GPIO_Init+0x202>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a48      	ldr	r2, [pc, #288]	; (80024fc <HAL_GPIO_Init+0x2f4>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d013      	beq.n	8002406 <HAL_GPIO_Init+0x1fe>
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_GPIO_Init+0x2f8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d00d      	beq.n	8002402 <HAL_GPIO_Init+0x1fa>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a46      	ldr	r2, [pc, #280]	; (8002504 <HAL_GPIO_Init+0x2fc>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d007      	beq.n	80023fe <HAL_GPIO_Init+0x1f6>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a45      	ldr	r2, [pc, #276]	; (8002508 <HAL_GPIO_Init+0x300>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d101      	bne.n	80023fa <HAL_GPIO_Init+0x1f2>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e008      	b.n	800240c <HAL_GPIO_Init+0x204>
 80023fa:	2307      	movs	r3, #7
 80023fc:	e006      	b.n	800240c <HAL_GPIO_Init+0x204>
 80023fe:	2303      	movs	r3, #3
 8002400:	e004      	b.n	800240c <HAL_GPIO_Init+0x204>
 8002402:	2302      	movs	r3, #2
 8002404:	e002      	b.n	800240c <HAL_GPIO_Init+0x204>
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_GPIO_Init+0x204>
 800240a:	2300      	movs	r3, #0
 800240c:	69fa      	ldr	r2, [r7, #28]
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	0092      	lsls	r2, r2, #2
 8002414:	4093      	lsls	r3, r2
 8002416:	69ba      	ldr	r2, [r7, #24]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800241c:	4935      	ldr	r1, [pc, #212]	; (80024f4 <HAL_GPIO_Init+0x2ec>)
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	089b      	lsrs	r3, r3, #2
 8002422:	3302      	adds	r3, #2
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800242a:	4b38      	ldr	r3, [pc, #224]	; (800250c <HAL_GPIO_Init+0x304>)
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	43db      	mvns	r3, r3
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	4013      	ands	r3, r2
 8002438:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d003      	beq.n	800244e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002446:	69ba      	ldr	r2, [r7, #24]
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4313      	orrs	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244e:	4a2f      	ldr	r2, [pc, #188]	; (800250c <HAL_GPIO_Init+0x304>)
 8002450:	69bb      	ldr	r3, [r7, #24]
 8002452:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002454:	4b2d      	ldr	r3, [pc, #180]	; (800250c <HAL_GPIO_Init+0x304>)
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	43db      	mvns	r3, r3
 800245e:	69ba      	ldr	r2, [r7, #24]
 8002460:	4013      	ands	r3, r2
 8002462:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d003      	beq.n	8002478 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4313      	orrs	r3, r2
 8002476:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002478:	4a24      	ldr	r2, [pc, #144]	; (800250c <HAL_GPIO_Init+0x304>)
 800247a:	69bb      	ldr	r3, [r7, #24]
 800247c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247e:	4b23      	ldr	r3, [pc, #140]	; (800250c <HAL_GPIO_Init+0x304>)
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	43db      	mvns	r3, r3
 8002488:	69ba      	ldr	r2, [r7, #24]
 800248a:	4013      	ands	r3, r2
 800248c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800249a:	69ba      	ldr	r2, [r7, #24]
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80024a2:	4a1a      	ldr	r2, [pc, #104]	; (800250c <HAL_GPIO_Init+0x304>)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a8:	4b18      	ldr	r3, [pc, #96]	; (800250c <HAL_GPIO_Init+0x304>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	43db      	mvns	r3, r3
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4013      	ands	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d003      	beq.n	80024cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80024c4:	69ba      	ldr	r2, [r7, #24]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024cc:	4a0f      	ldr	r2, [pc, #60]	; (800250c <HAL_GPIO_Init+0x304>)
 80024ce:	69bb      	ldr	r3, [r7, #24]
 80024d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3301      	adds	r3, #1
 80024d6:	61fb      	str	r3, [r7, #28]
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b0f      	cmp	r3, #15
 80024dc:	f67f aea2 	bls.w	8002224 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024e0:	bf00      	nop
 80024e2:	bf00      	nop
 80024e4:	3724      	adds	r7, #36	; 0x24
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40013800 	.word	0x40013800
 80024f8:	40020000 	.word	0x40020000
 80024fc:	40020400 	.word	0x40020400
 8002500:	40020800 	.word	0x40020800
 8002504:	40020c00 	.word	0x40020c00
 8002508:	40021000 	.word	0x40021000
 800250c:	40013c00 	.word	0x40013c00

08002510 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
 8002518:	460b      	mov	r3, r1
 800251a:	807b      	strh	r3, [r7, #2]
 800251c:	4613      	mov	r3, r2
 800251e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002520:	787b      	ldrb	r3, [r7, #1]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d003      	beq.n	800252e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002526:	887a      	ldrh	r2, [r7, #2]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800252c:	e003      	b.n	8002536 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800252e:	887b      	ldrh	r3, [r7, #2]
 8002530:	041a      	lsls	r2, r3, #16
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	619a      	str	r2, [r3, #24]
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr
	...

08002544 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b086      	sub	sp, #24
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002552:	2301      	movs	r3, #1
 8002554:	e267      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d075      	beq.n	800264e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002562:	4b88      	ldr	r3, [pc, #544]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002564:	689b      	ldr	r3, [r3, #8]
 8002566:	f003 030c 	and.w	r3, r3, #12
 800256a:	2b04      	cmp	r3, #4
 800256c:	d00c      	beq.n	8002588 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800256e:	4b85      	ldr	r3, [pc, #532]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002576:	2b08      	cmp	r3, #8
 8002578:	d112      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800257a:	4b82      	ldr	r3, [pc, #520]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002582:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002586:	d10b      	bne.n	80025a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002588:	4b7e      	ldr	r3, [pc, #504]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002590:	2b00      	cmp	r3, #0
 8002592:	d05b      	beq.n	800264c <HAL_RCC_OscConfig+0x108>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d157      	bne.n	800264c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e242      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a8:	d106      	bne.n	80025b8 <HAL_RCC_OscConfig+0x74>
 80025aa:	4b76      	ldr	r3, [pc, #472]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a75      	ldr	r2, [pc, #468]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025b4:	6013      	str	r3, [r2, #0]
 80025b6:	e01d      	b.n	80025f4 <HAL_RCC_OscConfig+0xb0>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025c0:	d10c      	bne.n	80025dc <HAL_RCC_OscConfig+0x98>
 80025c2:	4b70      	ldr	r3, [pc, #448]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4a6f      	ldr	r2, [pc, #444]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025cc:	6013      	str	r3, [r2, #0]
 80025ce:	4b6d      	ldr	r3, [pc, #436]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a6c      	ldr	r2, [pc, #432]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d8:	6013      	str	r3, [r2, #0]
 80025da:	e00b      	b.n	80025f4 <HAL_RCC_OscConfig+0xb0>
 80025dc:	4b69      	ldr	r3, [pc, #420]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a68      	ldr	r2, [pc, #416]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025e6:	6013      	str	r3, [r2, #0]
 80025e8:	4b66      	ldr	r3, [pc, #408]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	4a65      	ldr	r2, [pc, #404]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80025ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025fc:	f7ff fd16 	bl	800202c <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002604:	f7ff fd12 	bl	800202c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b64      	cmp	r3, #100	; 0x64
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e207      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002616:	4b5b      	ldr	r3, [pc, #364]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0xc0>
 8002622:	e014      	b.n	800264e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002624:	f7ff fd02 	bl	800202c <HAL_GetTick>
 8002628:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800262a:	e008      	b.n	800263e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800262c:	f7ff fcfe 	bl	800202c <HAL_GetTick>
 8002630:	4602      	mov	r2, r0
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	1ad3      	subs	r3, r2, r3
 8002636:	2b64      	cmp	r3, #100	; 0x64
 8002638:	d901      	bls.n	800263e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e1f3      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800263e:	4b51      	ldr	r3, [pc, #324]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1f0      	bne.n	800262c <HAL_RCC_OscConfig+0xe8>
 800264a:	e000      	b.n	800264e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800264c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b00      	cmp	r3, #0
 8002658:	d063      	beq.n	8002722 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800265a:	4b4a      	ldr	r3, [pc, #296]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f003 030c 	and.w	r3, r3, #12
 8002662:	2b00      	cmp	r3, #0
 8002664:	d00b      	beq.n	800267e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002666:	4b47      	ldr	r3, [pc, #284]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800266e:	2b08      	cmp	r3, #8
 8002670:	d11c      	bne.n	80026ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002672:	4b44      	ldr	r3, [pc, #272]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800267a:	2b00      	cmp	r3, #0
 800267c:	d116      	bne.n	80026ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800267e:	4b41      	ldr	r3, [pc, #260]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0302 	and.w	r3, r3, #2
 8002686:	2b00      	cmp	r3, #0
 8002688:	d005      	beq.n	8002696 <HAL_RCC_OscConfig+0x152>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	2b01      	cmp	r3, #1
 8002690:	d001      	beq.n	8002696 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002692:	2301      	movs	r3, #1
 8002694:	e1c7      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002696:	4b3b      	ldr	r3, [pc, #236]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	691b      	ldr	r3, [r3, #16]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4937      	ldr	r1, [pc, #220]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026aa:	e03a      	b.n	8002722 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d020      	beq.n	80026f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026b4:	4b34      	ldr	r3, [pc, #208]	; (8002788 <HAL_RCC_OscConfig+0x244>)
 80026b6:	2201      	movs	r2, #1
 80026b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff fcb7 	bl	800202c <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026c2:	f7ff fcb3 	bl	800202c <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e1a8      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d4:	4b2b      	ldr	r3, [pc, #172]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d0f0      	beq.n	80026c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026e0:	4b28      	ldr	r3, [pc, #160]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	691b      	ldr	r3, [r3, #16]
 80026ec:	00db      	lsls	r3, r3, #3
 80026ee:	4925      	ldr	r1, [pc, #148]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	600b      	str	r3, [r1, #0]
 80026f4:	e015      	b.n	8002722 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80026f6:	4b24      	ldr	r3, [pc, #144]	; (8002788 <HAL_RCC_OscConfig+0x244>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fc:	f7ff fc96 	bl	800202c <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002704:	f7ff fc92 	bl	800202c <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e187      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002716:	4b1b      	ldr	r3, [pc, #108]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	2b00      	cmp	r3, #0
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d036      	beq.n	800279c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	695b      	ldr	r3, [r3, #20]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d016      	beq.n	8002764 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002736:	4b15      	ldr	r3, [pc, #84]	; (800278c <HAL_RCC_OscConfig+0x248>)
 8002738:	2201      	movs	r2, #1
 800273a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800273c:	f7ff fc76 	bl	800202c <HAL_GetTick>
 8002740:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002742:	e008      	b.n	8002756 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002744:	f7ff fc72 	bl	800202c <HAL_GetTick>
 8002748:	4602      	mov	r2, r0
 800274a:	693b      	ldr	r3, [r7, #16]
 800274c:	1ad3      	subs	r3, r2, r3
 800274e:	2b02      	cmp	r3, #2
 8002750:	d901      	bls.n	8002756 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002752:	2303      	movs	r3, #3
 8002754:	e167      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002756:	4b0b      	ldr	r3, [pc, #44]	; (8002784 <HAL_RCC_OscConfig+0x240>)
 8002758:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800275a:	f003 0302 	and.w	r3, r3, #2
 800275e:	2b00      	cmp	r3, #0
 8002760:	d0f0      	beq.n	8002744 <HAL_RCC_OscConfig+0x200>
 8002762:	e01b      	b.n	800279c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002764:	4b09      	ldr	r3, [pc, #36]	; (800278c <HAL_RCC_OscConfig+0x248>)
 8002766:	2200      	movs	r2, #0
 8002768:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800276a:	f7ff fc5f 	bl	800202c <HAL_GetTick>
 800276e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002770:	e00e      	b.n	8002790 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002772:	f7ff fc5b 	bl	800202c <HAL_GetTick>
 8002776:	4602      	mov	r2, r0
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	1ad3      	subs	r3, r2, r3
 800277c:	2b02      	cmp	r3, #2
 800277e:	d907      	bls.n	8002790 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002780:	2303      	movs	r3, #3
 8002782:	e150      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
 8002784:	40023800 	.word	0x40023800
 8002788:	42470000 	.word	0x42470000
 800278c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002790:	4b88      	ldr	r3, [pc, #544]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1ea      	bne.n	8002772 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 0304 	and.w	r3, r3, #4
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	f000 8097 	beq.w	80028d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027aa:	2300      	movs	r3, #0
 80027ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ae:	4b81      	ldr	r3, [pc, #516]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10f      	bne.n	80027da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ba:	2300      	movs	r3, #0
 80027bc:	60bb      	str	r3, [r7, #8]
 80027be:	4b7d      	ldr	r3, [pc, #500]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	4a7c      	ldr	r2, [pc, #496]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c8:	6413      	str	r3, [r2, #64]	; 0x40
 80027ca:	4b7a      	ldr	r3, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d2:	60bb      	str	r3, [r7, #8]
 80027d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027d6:	2301      	movs	r3, #1
 80027d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027da:	4b77      	ldr	r3, [pc, #476]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d118      	bne.n	8002818 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027e6:	4b74      	ldr	r3, [pc, #464]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a73      	ldr	r2, [pc, #460]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 80027ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027f2:	f7ff fc1b 	bl	800202c <HAL_GetTick>
 80027f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027f8:	e008      	b.n	800280c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027fa:	f7ff fc17 	bl	800202c <HAL_GetTick>
 80027fe:	4602      	mov	r2, r0
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	2b02      	cmp	r3, #2
 8002806:	d901      	bls.n	800280c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e10c      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_OscConfig+0x474>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d0f0      	beq.n	80027fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	2b01      	cmp	r3, #1
 800281e:	d106      	bne.n	800282e <HAL_RCC_OscConfig+0x2ea>
 8002820:	4b64      	ldr	r3, [pc, #400]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002822:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002824:	4a63      	ldr	r2, [pc, #396]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002826:	f043 0301 	orr.w	r3, r3, #1
 800282a:	6713      	str	r3, [r2, #112]	; 0x70
 800282c:	e01c      	b.n	8002868 <HAL_RCC_OscConfig+0x324>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b05      	cmp	r3, #5
 8002834:	d10c      	bne.n	8002850 <HAL_RCC_OscConfig+0x30c>
 8002836:	4b5f      	ldr	r3, [pc, #380]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800283a:	4a5e      	ldr	r2, [pc, #376]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800283c:	f043 0304 	orr.w	r3, r3, #4
 8002840:	6713      	str	r3, [r2, #112]	; 0x70
 8002842:	4b5c      	ldr	r3, [pc, #368]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002844:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002846:	4a5b      	ldr	r2, [pc, #364]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	6713      	str	r3, [r2, #112]	; 0x70
 800284e:	e00b      	b.n	8002868 <HAL_RCC_OscConfig+0x324>
 8002850:	4b58      	ldr	r3, [pc, #352]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002854:	4a57      	ldr	r2, [pc, #348]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002856:	f023 0301 	bic.w	r3, r3, #1
 800285a:	6713      	str	r3, [r2, #112]	; 0x70
 800285c:	4b55      	ldr	r3, [pc, #340]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a54      	ldr	r2, [pc, #336]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002862:	f023 0304 	bic.w	r3, r3, #4
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	2b00      	cmp	r3, #0
 800286e:	d015      	beq.n	800289c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002870:	f7ff fbdc 	bl	800202c <HAL_GetTick>
 8002874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002876:	e00a      	b.n	800288e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002878:	f7ff fbd8 	bl	800202c <HAL_GetTick>
 800287c:	4602      	mov	r2, r0
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e0cb      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002892:	f003 0302 	and.w	r3, r3, #2
 8002896:	2b00      	cmp	r3, #0
 8002898:	d0ee      	beq.n	8002878 <HAL_RCC_OscConfig+0x334>
 800289a:	e014      	b.n	80028c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800289c:	f7ff fbc6 	bl	800202c <HAL_GetTick>
 80028a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028a4:	f7ff fbc2 	bl	800202c <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e0b5      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ba:	4b3e      	ldr	r3, [pc, #248]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028be:	f003 0302 	and.w	r3, r3, #2
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1ee      	bne.n	80028a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028c6:	7dfb      	ldrb	r3, [r7, #23]
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d105      	bne.n	80028d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028cc:	4b39      	ldr	r3, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d0:	4a38      	ldr	r2, [pc, #224]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	699b      	ldr	r3, [r3, #24]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	f000 80a1 	beq.w	8002a24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028e2:	4b34      	ldr	r3, [pc, #208]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 030c 	and.w	r3, r3, #12
 80028ea:	2b08      	cmp	r3, #8
 80028ec:	d05c      	beq.n	80029a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	699b      	ldr	r3, [r3, #24]
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d141      	bne.n	800297a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028f6:	4b31      	ldr	r3, [pc, #196]	; (80029bc <HAL_RCC_OscConfig+0x478>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028fc:	f7ff fb96 	bl	800202c <HAL_GetTick>
 8002900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002902:	e008      	b.n	8002916 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002904:	f7ff fb92 	bl	800202c <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	693b      	ldr	r3, [r7, #16]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	2b02      	cmp	r3, #2
 8002910:	d901      	bls.n	8002916 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002912:	2303      	movs	r3, #3
 8002914:	e087      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002916:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800291e:	2b00      	cmp	r3, #0
 8002920:	d1f0      	bne.n	8002904 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	69da      	ldr	r2, [r3, #28]
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6a1b      	ldr	r3, [r3, #32]
 800292a:	431a      	orrs	r2, r3
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002930:	019b      	lsls	r3, r3, #6
 8002932:	431a      	orrs	r2, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002938:	085b      	lsrs	r3, r3, #1
 800293a:	3b01      	subs	r3, #1
 800293c:	041b      	lsls	r3, r3, #16
 800293e:	431a      	orrs	r2, r3
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002944:	061b      	lsls	r3, r3, #24
 8002946:	491b      	ldr	r1, [pc, #108]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 8002948:	4313      	orrs	r3, r2
 800294a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800294c:	4b1b      	ldr	r3, [pc, #108]	; (80029bc <HAL_RCC_OscConfig+0x478>)
 800294e:	2201      	movs	r2, #1
 8002950:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002952:	f7ff fb6b 	bl	800202c <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff fb67 	bl	800202c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e05c      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0f0      	beq.n	800295a <HAL_RCC_OscConfig+0x416>
 8002978:	e054      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_RCC_OscConfig+0x478>)
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002980:	f7ff fb54 	bl	800202c <HAL_GetTick>
 8002984:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002986:	e008      	b.n	800299a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002988:	f7ff fb50 	bl	800202c <HAL_GetTick>
 800298c:	4602      	mov	r2, r0
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	2b02      	cmp	r3, #2
 8002994:	d901      	bls.n	800299a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002996:	2303      	movs	r3, #3
 8002998:	e045      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299a:	4b06      	ldr	r3, [pc, #24]	; (80029b4 <HAL_RCC_OscConfig+0x470>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d1f0      	bne.n	8002988 <HAL_RCC_OscConfig+0x444>
 80029a6:	e03d      	b.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	699b      	ldr	r3, [r3, #24]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d107      	bne.n	80029c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e038      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
 80029b4:	40023800 	.word	0x40023800
 80029b8:	40007000 	.word	0x40007000
 80029bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029c0:	4b1b      	ldr	r3, [pc, #108]	; (8002a30 <HAL_RCC_OscConfig+0x4ec>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d028      	beq.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029d8:	429a      	cmp	r2, r3
 80029da:	d121      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d11a      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029f0:	4013      	ands	r3, r2
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d111      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a06:	085b      	lsrs	r3, r3, #1
 8002a08:	3b01      	subs	r3, #1
 8002a0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d107      	bne.n	8002a20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d001      	beq.n	8002a24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e000      	b.n	8002a26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3718      	adds	r7, #24
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	40023800 	.word	0x40023800

08002a34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	b084      	sub	sp, #16
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	6078      	str	r0, [r7, #4]
 8002a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d101      	bne.n	8002a48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	e0cc      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	683a      	ldr	r2, [r7, #0]
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d90c      	bls.n	8002a70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a56:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a58:	683a      	ldr	r2, [r7, #0]
 8002a5a:	b2d2      	uxtb	r2, r2
 8002a5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a5e:	4b63      	ldr	r3, [pc, #396]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0307 	and.w	r3, r3, #7
 8002a66:	683a      	ldr	r2, [r7, #0]
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	d001      	beq.n	8002a70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002a6c:	2301      	movs	r3, #1
 8002a6e:	e0b8      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f003 0302 	and.w	r3, r3, #2
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d020      	beq.n	8002abe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a88:	4b59      	ldr	r3, [pc, #356]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	4a58      	ldr	r2, [pc, #352]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002a8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0308 	and.w	r3, r3, #8
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d005      	beq.n	8002aac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002aa0:	4b53      	ldr	r3, [pc, #332]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	4a52      	ldr	r2, [pc, #328]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002aaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002aac:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	494d      	ldr	r1, [pc, #308]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002aba:	4313      	orrs	r3, r2
 8002abc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d044      	beq.n	8002b54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d107      	bne.n	8002ae2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ad2:	4b47      	ldr	r3, [pc, #284]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d119      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	e07f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	2b02      	cmp	r3, #2
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002aee:	2b03      	cmp	r3, #3
 8002af0:	d107      	bne.n	8002b02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002af2:	4b3f      	ldr	r3, [pc, #252]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d109      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e06f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b02:	4b3b      	ldr	r3, [pc, #236]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d101      	bne.n	8002b12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e067      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b12:	4b37      	ldr	r3, [pc, #220]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f023 0203 	bic.w	r2, r3, #3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	4934      	ldr	r1, [pc, #208]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b24:	f7ff fa82 	bl	800202c <HAL_GetTick>
 8002b28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b2a:	e00a      	b.n	8002b42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b2c:	f7ff fa7e 	bl	800202c <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e04f      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b42:	4b2b      	ldr	r3, [pc, #172]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 020c 	and.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d1eb      	bne.n	8002b2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b54:	4b25      	ldr	r3, [pc, #148]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d20c      	bcs.n	8002b7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b62:	4b22      	ldr	r3, [pc, #136]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b64:	683a      	ldr	r2, [r7, #0]
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b6a:	4b20      	ldr	r3, [pc, #128]	; (8002bec <HAL_RCC_ClockConfig+0x1b8>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0307 	and.w	r3, r3, #7
 8002b72:	683a      	ldr	r2, [r7, #0]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	d001      	beq.n	8002b7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002b78:	2301      	movs	r3, #1
 8002b7a:	e032      	b.n	8002be2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b88:	4b19      	ldr	r3, [pc, #100]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	4916      	ldr	r1, [pc, #88]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0308 	and.w	r3, r3, #8
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d009      	beq.n	8002bba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ba6:	4b12      	ldr	r3, [pc, #72]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	691b      	ldr	r3, [r3, #16]
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	490e      	ldr	r1, [pc, #56]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bba:	f000 f821 	bl	8002c00 <HAL_RCC_GetSysClockFreq>
 8002bbe:	4602      	mov	r2, r0
 8002bc0:	4b0b      	ldr	r3, [pc, #44]	; (8002bf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	091b      	lsrs	r3, r3, #4
 8002bc6:	f003 030f 	and.w	r3, r3, #15
 8002bca:	490a      	ldr	r1, [pc, #40]	; (8002bf4 <HAL_RCC_ClockConfig+0x1c0>)
 8002bcc:	5ccb      	ldrb	r3, [r1, r3]
 8002bce:	fa22 f303 	lsr.w	r3, r2, r3
 8002bd2:	4a09      	ldr	r2, [pc, #36]	; (8002bf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002bd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002bd6:	4b09      	ldr	r3, [pc, #36]	; (8002bfc <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f7fe ff3c 	bl	8001a58 <HAL_InitTick>

  return HAL_OK;
 8002be0:	2300      	movs	r3, #0
}
 8002be2:	4618      	mov	r0, r3
 8002be4:	3710      	adds	r7, #16
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40023c00 	.word	0x40023c00
 8002bf0:	40023800 	.word	0x40023800
 8002bf4:	08007b94 	.word	0x08007b94
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	20000004 	.word	0x20000004

08002c00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c00:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c04:	b090      	sub	sp, #64	; 0x40
 8002c06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	637b      	str	r3, [r7, #52]	; 0x34
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c10:	2300      	movs	r3, #0
 8002c12:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8002c14:	2300      	movs	r3, #0
 8002c16:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c18:	4b59      	ldr	r3, [pc, #356]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	f003 030c 	and.w	r3, r3, #12
 8002c20:	2b08      	cmp	r3, #8
 8002c22:	d00d      	beq.n	8002c40 <HAL_RCC_GetSysClockFreq+0x40>
 8002c24:	2b08      	cmp	r3, #8
 8002c26:	f200 80a1 	bhi.w	8002d6c <HAL_RCC_GetSysClockFreq+0x16c>
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d002      	beq.n	8002c34 <HAL_RCC_GetSysClockFreq+0x34>
 8002c2e:	2b04      	cmp	r3, #4
 8002c30:	d003      	beq.n	8002c3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002c32:	e09b      	b.n	8002d6c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c36:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8002c38:	e09b      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c3a:	4b53      	ldr	r3, [pc, #332]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c3e:	e098      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c40:	4b4f      	ldr	r3, [pc, #316]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c42:	685b      	ldr	r3, [r3, #4]
 8002c44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c48:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c4a:	4b4d      	ldr	r3, [pc, #308]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d028      	beq.n	8002ca8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c56:	4b4a      	ldr	r3, [pc, #296]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	099b      	lsrs	r3, r3, #6
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	623b      	str	r3, [r7, #32]
 8002c60:	627a      	str	r2, [r7, #36]	; 0x24
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c68:	2100      	movs	r1, #0
 8002c6a:	4b47      	ldr	r3, [pc, #284]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c6c:	fb03 f201 	mul.w	r2, r3, r1
 8002c70:	2300      	movs	r3, #0
 8002c72:	fb00 f303 	mul.w	r3, r0, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	4a43      	ldr	r2, [pc, #268]	; (8002d88 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c7a:	fba0 1202 	umull	r1, r2, r0, r2
 8002c7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c80:	460a      	mov	r2, r1
 8002c82:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c86:	4413      	add	r3, r2
 8002c88:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	61bb      	str	r3, [r7, #24]
 8002c90:	61fa      	str	r2, [r7, #28]
 8002c92:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c96:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c9a:	f7fd ff1f 	bl	8000adc <__aeabi_uldivmod>
 8002c9e:	4602      	mov	r2, r0
 8002ca0:	460b      	mov	r3, r1
 8002ca2:	4613      	mov	r3, r2
 8002ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002ca6:	e053      	b.n	8002d50 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ca8:	4b35      	ldr	r3, [pc, #212]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	099b      	lsrs	r3, r3, #6
 8002cae:	2200      	movs	r2, #0
 8002cb0:	613b      	str	r3, [r7, #16]
 8002cb2:	617a      	str	r2, [r7, #20]
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002cba:	f04f 0b00 	mov.w	fp, #0
 8002cbe:	4652      	mov	r2, sl
 8002cc0:	465b      	mov	r3, fp
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	0159      	lsls	r1, r3, #5
 8002ccc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd0:	0150      	lsls	r0, r2, #5
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	ebb2 080a 	subs.w	r8, r2, sl
 8002cda:	eb63 090b 	sbc.w	r9, r3, fp
 8002cde:	f04f 0200 	mov.w	r2, #0
 8002ce2:	f04f 0300 	mov.w	r3, #0
 8002ce6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cea:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cee:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cf2:	ebb2 0408 	subs.w	r4, r2, r8
 8002cf6:	eb63 0509 	sbc.w	r5, r3, r9
 8002cfa:	f04f 0200 	mov.w	r2, #0
 8002cfe:	f04f 0300 	mov.w	r3, #0
 8002d02:	00eb      	lsls	r3, r5, #3
 8002d04:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d08:	00e2      	lsls	r2, r4, #3
 8002d0a:	4614      	mov	r4, r2
 8002d0c:	461d      	mov	r5, r3
 8002d0e:	eb14 030a 	adds.w	r3, r4, sl
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	eb45 030b 	adc.w	r3, r5, fp
 8002d18:	607b      	str	r3, [r7, #4]
 8002d1a:	f04f 0200 	mov.w	r2, #0
 8002d1e:	f04f 0300 	mov.w	r3, #0
 8002d22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d26:	4629      	mov	r1, r5
 8002d28:	028b      	lsls	r3, r1, #10
 8002d2a:	4621      	mov	r1, r4
 8002d2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d30:	4621      	mov	r1, r4
 8002d32:	028a      	lsls	r2, r1, #10
 8002d34:	4610      	mov	r0, r2
 8002d36:	4619      	mov	r1, r3
 8002d38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	60bb      	str	r3, [r7, #8]
 8002d3e:	60fa      	str	r2, [r7, #12]
 8002d40:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d44:	f7fd feca 	bl	8000adc <__aeabi_uldivmod>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	0c1b      	lsrs	r3, r3, #16
 8002d56:	f003 0303 	and.w	r3, r3, #3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	005b      	lsls	r3, r3, #1
 8002d5e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8002d60:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d68:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d6a:	e002      	b.n	8002d72 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d6c:	4b05      	ldr	r3, [pc, #20]	; (8002d84 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d6e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3740      	adds	r7, #64	; 0x40
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d7e:	bf00      	nop
 8002d80:	40023800 	.word	0x40023800
 8002d84:	00f42400 	.word	0x00f42400
 8002d88:	017d7840 	.word	0x017d7840

08002d8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d90:	4b03      	ldr	r3, [pc, #12]	; (8002da0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d92:	681b      	ldr	r3, [r3, #0]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop
 8002da0:	20000000 	.word	0x20000000

08002da4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002da8:	f7ff fff0 	bl	8002d8c <HAL_RCC_GetHCLKFreq>
 8002dac:	4602      	mov	r2, r0
 8002dae:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	0b5b      	lsrs	r3, r3, #13
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	4903      	ldr	r1, [pc, #12]	; (8002dc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dba:	5ccb      	ldrb	r3, [r1, r3]
 8002dbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	bd80      	pop	{r7, pc}
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	08007ba4 	.word	0x08007ba4

08002dcc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	220f      	movs	r2, #15
 8002dda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002ddc:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f003 0203 	and.w	r2, r3, #3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002de8:	4b0f      	ldr	r3, [pc, #60]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002df6:	689b      	ldr	r3, [r3, #8]
 8002df8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e00:	4b09      	ldr	r3, [pc, #36]	; (8002e28 <HAL_RCC_GetClockConfig+0x5c>)
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	08db      	lsrs	r3, r3, #3
 8002e06:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <HAL_RCC_GetClockConfig+0x60>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0207 	and.w	r2, r3, #7
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	601a      	str	r2, [r3, #0]
}
 8002e1a:	bf00      	nop
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	40023800 	.word	0x40023800
 8002e2c:	40023c00 	.word	0x40023c00

08002e30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e041      	b.n	8002ec6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e48:	b2db      	uxtb	r3, r3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f7fe ffc8 	bl	8001dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	4619      	mov	r1, r3
 8002e6e:	4610      	mov	r0, r2
 8002e70:	f000 fe3a 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2201      	movs	r2, #1
 8002e78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2201      	movs	r2, #1
 8002e80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2201      	movs	r2, #1
 8002e88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ec4:	2300      	movs	r3, #0
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3708      	adds	r7, #8
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bd80      	pop	{r7, pc}
	...

08002ed0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ede:	b2db      	uxtb	r3, r3
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d001      	beq.n	8002ee8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e044      	b.n	8002f72 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2202      	movs	r2, #2
 8002eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a1e      	ldr	r2, [pc, #120]	; (8002f80 <HAL_TIM_Base_Start_IT+0xb0>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d018      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f12:	d013      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a1a      	ldr	r2, [pc, #104]	; (8002f84 <HAL_TIM_Base_Start_IT+0xb4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00e      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a19      	ldr	r2, [pc, #100]	; (8002f88 <HAL_TIM_Base_Start_IT+0xb8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d009      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a17      	ldr	r2, [pc, #92]	; (8002f8c <HAL_TIM_Base_Start_IT+0xbc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d004      	beq.n	8002f3c <HAL_TIM_Base_Start_IT+0x6c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a16      	ldr	r2, [pc, #88]	; (8002f90 <HAL_TIM_Base_Start_IT+0xc0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d111      	bne.n	8002f60 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0307 	and.w	r3, r3, #7
 8002f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2b06      	cmp	r3, #6
 8002f4c:	d010      	beq.n	8002f70 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f5e:	e007      	b.n	8002f70 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681a      	ldr	r2, [r3, #0]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f70:	2300      	movs	r3, #0
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr
 8002f7e:	bf00      	nop
 8002f80:	40010000 	.word	0x40010000
 8002f84:	40000400 	.word	0x40000400
 8002f88:	40000800 	.word	0x40000800
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40014000 	.word	0x40014000

08002f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b082      	sub	sp, #8
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e041      	b.n	800302a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d106      	bne.n	8002fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002fba:	6878      	ldr	r0, [r7, #4]
 8002fbc:	f000 f839 	bl	8003032 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	3304      	adds	r3, #4
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	f000 fd88 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2201      	movs	r2, #1
 8002fdc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2201      	movs	r2, #1
 8002fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2201      	movs	r2, #1
 8002ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2201      	movs	r2, #1
 8003004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2201      	movs	r2, #1
 800300c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2201      	movs	r2, #1
 8003014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2201      	movs	r2, #1
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3708      	adds	r7, #8
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}

08003032 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003032:	b480      	push	{r7}
 8003034:	b083      	sub	sp, #12
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800303a:	bf00      	nop
 800303c:	370c      	adds	r7, #12
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b084      	sub	sp, #16
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
 8003050:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d109      	bne.n	800306c <HAL_TIM_PWM_Start+0x24>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800305e:	b2db      	uxtb	r3, r3
 8003060:	2b01      	cmp	r3, #1
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e022      	b.n	80030b2 <HAL_TIM_PWM_Start+0x6a>
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	2b04      	cmp	r3, #4
 8003070:	d109      	bne.n	8003086 <HAL_TIM_PWM_Start+0x3e>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003078:	b2db      	uxtb	r3, r3
 800307a:	2b01      	cmp	r3, #1
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	e015      	b.n	80030b2 <HAL_TIM_PWM_Start+0x6a>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	2b08      	cmp	r3, #8
 800308a:	d109      	bne.n	80030a0 <HAL_TIM_PWM_Start+0x58>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003092:	b2db      	uxtb	r3, r3
 8003094:	2b01      	cmp	r3, #1
 8003096:	bf14      	ite	ne
 8003098:	2301      	movne	r3, #1
 800309a:	2300      	moveq	r3, #0
 800309c:	b2db      	uxtb	r3, r3
 800309e:	e008      	b.n	80030b2 <HAL_TIM_PWM_Start+0x6a>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030a6:	b2db      	uxtb	r3, r3
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	bf14      	ite	ne
 80030ac:	2301      	movne	r3, #1
 80030ae:	2300      	moveq	r3, #0
 80030b0:	b2db      	uxtb	r3, r3
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d001      	beq.n	80030ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80030b6:	2301      	movs	r3, #1
 80030b8:	e068      	b.n	800318c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d104      	bne.n	80030ca <HAL_TIM_PWM_Start+0x82>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2202      	movs	r2, #2
 80030c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030c8:	e013      	b.n	80030f2 <HAL_TIM_PWM_Start+0xaa>
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	d104      	bne.n	80030da <HAL_TIM_PWM_Start+0x92>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2202      	movs	r2, #2
 80030d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030d8:	e00b      	b.n	80030f2 <HAL_TIM_PWM_Start+0xaa>
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b08      	cmp	r3, #8
 80030de:	d104      	bne.n	80030ea <HAL_TIM_PWM_Start+0xa2>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2202      	movs	r2, #2
 80030e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030e8:	e003      	b.n	80030f2 <HAL_TIM_PWM_Start+0xaa>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2202      	movs	r2, #2
 80030ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2201      	movs	r2, #1
 80030f8:	6839      	ldr	r1, [r7, #0]
 80030fa:	4618      	mov	r0, r3
 80030fc:	f001 f8c4 	bl	8004288 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a23      	ldr	r2, [pc, #140]	; (8003194 <HAL_TIM_PWM_Start+0x14c>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d107      	bne.n	800311a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003118:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1d      	ldr	r2, [pc, #116]	; (8003194 <HAL_TIM_PWM_Start+0x14c>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d018      	beq.n	8003156 <HAL_TIM_PWM_Start+0x10e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312c:	d013      	beq.n	8003156 <HAL_TIM_PWM_Start+0x10e>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a19      	ldr	r2, [pc, #100]	; (8003198 <HAL_TIM_PWM_Start+0x150>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d00e      	beq.n	8003156 <HAL_TIM_PWM_Start+0x10e>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a17      	ldr	r2, [pc, #92]	; (800319c <HAL_TIM_PWM_Start+0x154>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d009      	beq.n	8003156 <HAL_TIM_PWM_Start+0x10e>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4a16      	ldr	r2, [pc, #88]	; (80031a0 <HAL_TIM_PWM_Start+0x158>)
 8003148:	4293      	cmp	r3, r2
 800314a:	d004      	beq.n	8003156 <HAL_TIM_PWM_Start+0x10e>
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a14      	ldr	r2, [pc, #80]	; (80031a4 <HAL_TIM_PWM_Start+0x15c>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d111      	bne.n	800317a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	2b06      	cmp	r3, #6
 8003166:	d010      	beq.n	800318a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f042 0201 	orr.w	r2, r2, #1
 8003176:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	e007      	b.n	800318a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f042 0201 	orr.w	r2, r2, #1
 8003188:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800318a:	2300      	movs	r3, #0
}
 800318c:	4618      	mov	r0, r3
 800318e:	3710      	adds	r7, #16
 8003190:	46bd      	mov	sp, r7
 8003192:	bd80      	pop	{r7, pc}
 8003194:	40010000 	.word	0x40010000
 8003198:	40000400 	.word	0x40000400
 800319c:	40000800 	.word	0x40000800
 80031a0:	40000c00 	.word	0x40000c00
 80031a4:	40014000 	.word	0x40014000

080031a8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d101      	bne.n	80031ba <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	e041      	b.n	800323e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031c0:	b2db      	uxtb	r3, r3
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d106      	bne.n	80031d4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f839 	bl	8003246 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2202      	movs	r2, #2
 80031d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681a      	ldr	r2, [r3, #0]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	3304      	adds	r3, #4
 80031e4:	4619      	mov	r1, r3
 80031e6:	4610      	mov	r0, r2
 80031e8:	f000 fc7e 	bl	8003ae8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2201      	movs	r2, #1
 80031f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
 8003264:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d104      	bne.n	8003276 <HAL_TIM_IC_Start+0x1a>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003272:	b2db      	uxtb	r3, r3
 8003274:	e013      	b.n	800329e <HAL_TIM_IC_Start+0x42>
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b04      	cmp	r3, #4
 800327a:	d104      	bne.n	8003286 <HAL_TIM_IC_Start+0x2a>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003282:	b2db      	uxtb	r3, r3
 8003284:	e00b      	b.n	800329e <HAL_TIM_IC_Start+0x42>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b08      	cmp	r3, #8
 800328a:	d104      	bne.n	8003296 <HAL_TIM_IC_Start+0x3a>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003292:	b2db      	uxtb	r3, r3
 8003294:	e003      	b.n	800329e <HAL_TIM_IC_Start+0x42>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800329c:	b2db      	uxtb	r3, r3
 800329e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <HAL_TIM_IC_Start+0x54>
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80032ac:	b2db      	uxtb	r3, r3
 80032ae:	e013      	b.n	80032d8 <HAL_TIM_IC_Start+0x7c>
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d104      	bne.n	80032c0 <HAL_TIM_IC_Start+0x64>
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	e00b      	b.n	80032d8 <HAL_TIM_IC_Start+0x7c>
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	2b08      	cmp	r3, #8
 80032c4:	d104      	bne.n	80032d0 <HAL_TIM_IC_Start+0x74>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	e003      	b.n	80032d8 <HAL_TIM_IC_Start+0x7c>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80032da:	7bfb      	ldrb	r3, [r7, #15]
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d102      	bne.n	80032e6 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80032e0:	7bbb      	ldrb	r3, [r7, #14]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d001      	beq.n	80032ea <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e077      	b.n	80033da <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d104      	bne.n	80032fa <HAL_TIM_IC_Start+0x9e>
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2202      	movs	r2, #2
 80032f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032f8:	e013      	b.n	8003322 <HAL_TIM_IC_Start+0xc6>
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d104      	bne.n	800330a <HAL_TIM_IC_Start+0xae>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2202      	movs	r2, #2
 8003304:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003308:	e00b      	b.n	8003322 <HAL_TIM_IC_Start+0xc6>
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	2b08      	cmp	r3, #8
 800330e:	d104      	bne.n	800331a <HAL_TIM_IC_Start+0xbe>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2202      	movs	r2, #2
 8003314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003318:	e003      	b.n	8003322 <HAL_TIM_IC_Start+0xc6>
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2202      	movs	r2, #2
 800331e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	2b00      	cmp	r3, #0
 8003326:	d104      	bne.n	8003332 <HAL_TIM_IC_Start+0xd6>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2202      	movs	r2, #2
 800332c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003330:	e013      	b.n	800335a <HAL_TIM_IC_Start+0xfe>
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	2b04      	cmp	r3, #4
 8003336:	d104      	bne.n	8003342 <HAL_TIM_IC_Start+0xe6>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2202      	movs	r2, #2
 800333c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003340:	e00b      	b.n	800335a <HAL_TIM_IC_Start+0xfe>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	2b08      	cmp	r3, #8
 8003346:	d104      	bne.n	8003352 <HAL_TIM_IC_Start+0xf6>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2202      	movs	r2, #2
 800334c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003350:	e003      	b.n	800335a <HAL_TIM_IC_Start+0xfe>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	2202      	movs	r2, #2
 8003356:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2201      	movs	r2, #1
 8003360:	6839      	ldr	r1, [r7, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f000 ff90 	bl	8004288 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	4a1d      	ldr	r2, [pc, #116]	; (80033e4 <HAL_TIM_IC_Start+0x188>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d018      	beq.n	80033a4 <HAL_TIM_IC_Start+0x148>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800337a:	d013      	beq.n	80033a4 <HAL_TIM_IC_Start+0x148>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4a19      	ldr	r2, [pc, #100]	; (80033e8 <HAL_TIM_IC_Start+0x18c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00e      	beq.n	80033a4 <HAL_TIM_IC_Start+0x148>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a18      	ldr	r2, [pc, #96]	; (80033ec <HAL_TIM_IC_Start+0x190>)
 800338c:	4293      	cmp	r3, r2
 800338e:	d009      	beq.n	80033a4 <HAL_TIM_IC_Start+0x148>
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a16      	ldr	r2, [pc, #88]	; (80033f0 <HAL_TIM_IC_Start+0x194>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d004      	beq.n	80033a4 <HAL_TIM_IC_Start+0x148>
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a15      	ldr	r2, [pc, #84]	; (80033f4 <HAL_TIM_IC_Start+0x198>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d111      	bne.n	80033c8 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	689b      	ldr	r3, [r3, #8]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033b0:	68bb      	ldr	r3, [r7, #8]
 80033b2:	2b06      	cmp	r3, #6
 80033b4:	d010      	beq.n	80033d8 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f042 0201 	orr.w	r2, r2, #1
 80033c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c6:	e007      	b.n	80033d8 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d8:	2300      	movs	r3, #0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3710      	adds	r7, #16
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
 80033e2:	bf00      	nop
 80033e4:	40010000 	.word	0x40010000
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40000c00 	.word	0x40000c00
 80033f4:	40014000 	.word	0x40014000

080033f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68db      	ldr	r3, [r3, #12]
 8003406:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	691b      	ldr	r3, [r3, #16]
 800340e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0302 	and.w	r3, r3, #2
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0202 	mvn.w	r2, #2
 800342c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2201      	movs	r2, #1
 8003432:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699b      	ldr	r3, [r3, #24]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f7fd fd4c 	bl	8000ee0 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 fb2e 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 fb35 	bl	8003ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0204 	mvn.w	r2, #4
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2202      	movs	r2, #2
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f7fd fd26 	bl	8000ee0 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fb08 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 fb0f 	bl	8003ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d020      	beq.n	80034f4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0308 	and.w	r3, r3, #8
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d01b      	beq.n	80034f4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0208 	mvn.w	r2, #8
 80034c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2204      	movs	r2, #4
 80034ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	f003 0303 	and.w	r3, r3, #3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034da:	6878      	ldr	r0, [r7, #4]
 80034dc:	f7fd fd00 	bl	8000ee0 <HAL_TIM_IC_CaptureCallback>
 80034e0:	e005      	b.n	80034ee <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 fae2 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fae9 	bl	8003ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2200      	movs	r2, #0
 80034f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f4:	68bb      	ldr	r3, [r7, #8]
 80034f6:	f003 0310 	and.w	r3, r3, #16
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d020      	beq.n	8003540 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	f003 0310 	and.w	r3, r3, #16
 8003504:	2b00      	cmp	r3, #0
 8003506:	d01b      	beq.n	8003540 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f06f 0210 	mvn.w	r2, #16
 8003510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2208      	movs	r2, #8
 8003516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	69db      	ldr	r3, [r3, #28]
 800351e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003522:	2b00      	cmp	r3, #0
 8003524:	d003      	beq.n	800352e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f7fd fcda 	bl	8000ee0 <HAL_TIM_IC_CaptureCallback>
 800352c:	e005      	b.n	800353a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800352e:	6878      	ldr	r0, [r7, #4]
 8003530:	f000 fabc 	bl	8003aac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003534:	6878      	ldr	r0, [r7, #4]
 8003536:	f000 fac3 	bl	8003ac0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2200      	movs	r2, #0
 800353e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0201 	mvn.w	r2, #1
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f7fe fa36 	bl	80019d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356a:	2b00      	cmp	r3, #0
 800356c:	d00c      	beq.n	8003588 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003574:	2b00      	cmp	r3, #0
 8003576:	d007      	beq.n	8003588 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 ff1e 	bl	80043c4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d00c      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003598:	2b00      	cmp	r3, #0
 800359a:	d007      	beq.n	80035ac <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f000 fa94 	bl	8003ad4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	f003 0320 	and.w	r3, r3, #32
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00c      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	f003 0320 	and.w	r3, r3, #32
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d007      	beq.n	80035d0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0220 	mvn.w	r2, #32
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f000 fef0 	bl	80043b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d0:	bf00      	nop
 80035d2:	3710      	adds	r7, #16
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}

080035d8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	b086      	sub	sp, #24
 80035dc:	af00      	add	r7, sp, #0
 80035de:	60f8      	str	r0, [r7, #12]
 80035e0:	60b9      	str	r1, [r7, #8]
 80035e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e4:	2300      	movs	r3, #0
 80035e6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e088      	b.n	8003708 <HAL_TIM_IC_ConfigChannel+0x130>
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d11b      	bne.n	800363c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003614:	f000 fc80 	bl	8003f18 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699a      	ldr	r2, [r3, #24]
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 020c 	bic.w	r2, r2, #12
 8003626:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6999      	ldr	r1, [r3, #24]
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	430a      	orrs	r2, r1
 8003638:	619a      	str	r2, [r3, #24]
 800363a:	e060      	b.n	80036fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b04      	cmp	r3, #4
 8003640:	d11c      	bne.n	800367c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003646:	68bb      	ldr	r3, [r7, #8]
 8003648:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003652:	f000 fcf8 	bl	8004046 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	699a      	ldr	r2, [r3, #24]
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003664:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6999      	ldr	r1, [r3, #24]
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	021a      	lsls	r2, r3, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	619a      	str	r2, [r3, #24]
 800367a:	e040      	b.n	80036fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b08      	cmp	r3, #8
 8003680:	d11b      	bne.n	80036ba <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003686:	68bb      	ldr	r3, [r7, #8]
 8003688:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800368e:	68bb      	ldr	r3, [r7, #8]
 8003690:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003692:	f000 fd45 	bl	8004120 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	69da      	ldr	r2, [r3, #28]
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 020c 	bic.w	r2, r2, #12
 80036a4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69d9      	ldr	r1, [r3, #28]
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	689a      	ldr	r2, [r3, #8]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	430a      	orrs	r2, r1
 80036b6:	61da      	str	r2, [r3, #28]
 80036b8:	e021      	b.n	80036fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b0c      	cmp	r3, #12
 80036be:	d11c      	bne.n	80036fa <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80036d0:	f000 fd62 	bl	8004198 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	69da      	ldr	r2, [r3, #28]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80036e2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	69d9      	ldr	r1, [r3, #28]
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	021a      	lsls	r2, r3, #8
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	430a      	orrs	r2, r1
 80036f6:	61da      	str	r2, [r3, #28]
 80036f8:	e001      	b.n	80036fe <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003706:	7dfb      	ldrb	r3, [r7, #23]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b086      	sub	sp, #24
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	60b9      	str	r1, [r7, #8]
 800371a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800371c:	2300      	movs	r3, #0
 800371e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003726:	2b01      	cmp	r3, #1
 8003728:	d101      	bne.n	800372e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800372a:	2302      	movs	r3, #2
 800372c:	e0ae      	b.n	800388c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2b0c      	cmp	r3, #12
 800373a:	f200 809f 	bhi.w	800387c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800373e:	a201      	add	r2, pc, #4	; (adr r2, 8003744 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003740:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003744:	08003779 	.word	0x08003779
 8003748:	0800387d 	.word	0x0800387d
 800374c:	0800387d 	.word	0x0800387d
 8003750:	0800387d 	.word	0x0800387d
 8003754:	080037b9 	.word	0x080037b9
 8003758:	0800387d 	.word	0x0800387d
 800375c:	0800387d 	.word	0x0800387d
 8003760:	0800387d 	.word	0x0800387d
 8003764:	080037fb 	.word	0x080037fb
 8003768:	0800387d 	.word	0x0800387d
 800376c:	0800387d 	.word	0x0800387d
 8003770:	0800387d 	.word	0x0800387d
 8003774:	0800383b 	.word	0x0800383b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	68b9      	ldr	r1, [r7, #8]
 800377e:	4618      	mov	r0, r3
 8003780:	f000 fa3e 	bl	8003c00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	699a      	ldr	r2, [r3, #24]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f042 0208 	orr.w	r2, r2, #8
 8003792:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	699a      	ldr	r2, [r3, #24]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0204 	bic.w	r2, r2, #4
 80037a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	6999      	ldr	r1, [r3, #24]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	691a      	ldr	r2, [r3, #16]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	619a      	str	r2, [r3, #24]
      break;
 80037b6:	e064      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 fa84 	bl	8003ccc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699a      	ldr	r2, [r3, #24]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	699a      	ldr	r2, [r3, #24]
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	6999      	ldr	r1, [r3, #24]
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	021a      	lsls	r2, r3, #8
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	619a      	str	r2, [r3, #24]
      break;
 80037f8:	e043      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	68b9      	ldr	r1, [r7, #8]
 8003800:	4618      	mov	r0, r3
 8003802:	f000 facf 	bl	8003da4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	69da      	ldr	r2, [r3, #28]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0208 	orr.w	r2, r2, #8
 8003814:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	69da      	ldr	r2, [r3, #28]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0204 	bic.w	r2, r2, #4
 8003824:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	69d9      	ldr	r1, [r3, #28]
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	691a      	ldr	r2, [r3, #16]
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
      break;
 8003838:	e023      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	68b9      	ldr	r1, [r7, #8]
 8003840:	4618      	mov	r0, r3
 8003842:	f000 fb19 	bl	8003e78 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	69da      	ldr	r2, [r3, #28]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003854:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	69da      	ldr	r2, [r3, #28]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003864:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69d9      	ldr	r1, [r3, #28]
 800386c:	68bb      	ldr	r3, [r7, #8]
 800386e:	691b      	ldr	r3, [r3, #16]
 8003870:	021a      	lsls	r2, r3, #8
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	430a      	orrs	r2, r1
 8003878:	61da      	str	r2, [r3, #28]
      break;
 800387a:	e002      	b.n	8003882 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	75fb      	strb	r3, [r7, #23]
      break;
 8003880:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800388a:	7dfb      	ldrb	r3, [r7, #23]
}
 800388c:	4618      	mov	r0, r3
 800388e:	3718      	adds	r7, #24
 8003890:	46bd      	mov	sp, r7
 8003892:	bd80      	pop	{r7, pc}

08003894 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b084      	sub	sp, #16
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800389e:	2300      	movs	r3, #0
 80038a0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d101      	bne.n	80038b0 <HAL_TIM_ConfigClockSource+0x1c>
 80038ac:	2302      	movs	r3, #2
 80038ae:	e0b4      	b.n	8003a1a <HAL_TIM_ConfigClockSource+0x186>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80038ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038d6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038e8:	d03e      	beq.n	8003968 <HAL_TIM_ConfigClockSource+0xd4>
 80038ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ee:	f200 8087 	bhi.w	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 80038f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038f6:	f000 8086 	beq.w	8003a06 <HAL_TIM_ConfigClockSource+0x172>
 80038fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038fe:	d87f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003900:	2b70      	cmp	r3, #112	; 0x70
 8003902:	d01a      	beq.n	800393a <HAL_TIM_ConfigClockSource+0xa6>
 8003904:	2b70      	cmp	r3, #112	; 0x70
 8003906:	d87b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003908:	2b60      	cmp	r3, #96	; 0x60
 800390a:	d050      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x11a>
 800390c:	2b60      	cmp	r3, #96	; 0x60
 800390e:	d877      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003910:	2b50      	cmp	r3, #80	; 0x50
 8003912:	d03c      	beq.n	800398e <HAL_TIM_ConfigClockSource+0xfa>
 8003914:	2b50      	cmp	r3, #80	; 0x50
 8003916:	d873      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003918:	2b40      	cmp	r3, #64	; 0x40
 800391a:	d058      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x13a>
 800391c:	2b40      	cmp	r3, #64	; 0x40
 800391e:	d86f      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003920:	2b30      	cmp	r3, #48	; 0x30
 8003922:	d064      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003924:	2b30      	cmp	r3, #48	; 0x30
 8003926:	d86b      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003928:	2b20      	cmp	r3, #32
 800392a:	d060      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 800392c:	2b20      	cmp	r3, #32
 800392e:	d867      	bhi.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d05c      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003934:	2b10      	cmp	r3, #16
 8003936:	d05a      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x15a>
 8003938:	e062      	b.n	8003a00 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394a:	f000 fc7d 	bl	8004248 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800395c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	68ba      	ldr	r2, [r7, #8]
 8003964:	609a      	str	r2, [r3, #8]
      break;
 8003966:	e04f      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003978:	f000 fc66 	bl	8004248 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800398a:	609a      	str	r2, [r3, #8]
      break;
 800398c:	e03c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800399a:	461a      	mov	r2, r3
 800399c:	f000 fb24 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2150      	movs	r1, #80	; 0x50
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fc33 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 80039ac:	e02c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ba:	461a      	mov	r2, r3
 80039bc:	f000 fb80 	bl	80040c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2160      	movs	r1, #96	; 0x60
 80039c6:	4618      	mov	r0, r3
 80039c8:	f000 fc23 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 80039cc:	e01c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039da:	461a      	mov	r2, r3
 80039dc:	f000 fb04 	bl	8003fe8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2140      	movs	r1, #64	; 0x40
 80039e6:	4618      	mov	r0, r3
 80039e8:	f000 fc13 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 80039ec:	e00c      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4619      	mov	r1, r3
 80039f8:	4610      	mov	r0, r2
 80039fa:	f000 fc0a 	bl	8004212 <TIM_ITRx_SetConfig>
      break;
 80039fe:	e003      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003a00:	2301      	movs	r3, #1
 8003a02:	73fb      	strb	r3, [r7, #15]
      break;
 8003a04:	e000      	b.n	8003a08 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003a06:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2200      	movs	r2, #0
 8003a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	3710      	adds	r7, #16
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	bd80      	pop	{r7, pc}
	...

08003a24 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	2b0c      	cmp	r3, #12
 8003a36:	d831      	bhi.n	8003a9c <HAL_TIM_ReadCapturedValue+0x78>
 8003a38:	a201      	add	r2, pc, #4	; (adr r2, 8003a40 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003a3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3e:	bf00      	nop
 8003a40:	08003a75 	.word	0x08003a75
 8003a44:	08003a9d 	.word	0x08003a9d
 8003a48:	08003a9d 	.word	0x08003a9d
 8003a4c:	08003a9d 	.word	0x08003a9d
 8003a50:	08003a7f 	.word	0x08003a7f
 8003a54:	08003a9d 	.word	0x08003a9d
 8003a58:	08003a9d 	.word	0x08003a9d
 8003a5c:	08003a9d 	.word	0x08003a9d
 8003a60:	08003a89 	.word	0x08003a89
 8003a64:	08003a9d 	.word	0x08003a9d
 8003a68:	08003a9d 	.word	0x08003a9d
 8003a6c:	08003a9d 	.word	0x08003a9d
 8003a70:	08003a93 	.word	0x08003a93
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a7a:	60fb      	str	r3, [r7, #12]

      break;
 8003a7c:	e00f      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a84:	60fb      	str	r3, [r7, #12]

      break;
 8003a86:	e00a      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8e:	60fb      	str	r3, [r7, #12]

      break;
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a98:	60fb      	str	r3, [r7, #12]

      break;
 8003a9a:	e000      	b.n	8003a9e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003a9c:	bf00      	nop
  }

  return tmpreg;
 8003a9e:	68fb      	ldr	r3, [r7, #12]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3714      	adds	r7, #20
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b083      	sub	sp, #12
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003adc:	bf00      	nop
 8003ade:	370c      	adds	r7, #12
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae6:	4770      	bx	lr

08003ae8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	4a3a      	ldr	r2, [pc, #232]	; (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d00f      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b06:	d00b      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a37      	ldr	r2, [pc, #220]	; (8003be8 <TIM_Base_SetConfig+0x100>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d007      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	4a36      	ldr	r2, [pc, #216]	; (8003bec <TIM_Base_SetConfig+0x104>)
 8003b14:	4293      	cmp	r3, r2
 8003b16:	d003      	beq.n	8003b20 <TIM_Base_SetConfig+0x38>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	4a35      	ldr	r2, [pc, #212]	; (8003bf0 <TIM_Base_SetConfig+0x108>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d108      	bne.n	8003b32 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b26:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a2b      	ldr	r2, [pc, #172]	; (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d01b      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b40:	d017      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a28      	ldr	r2, [pc, #160]	; (8003be8 <TIM_Base_SetConfig+0x100>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d013      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a27      	ldr	r2, [pc, #156]	; (8003bec <TIM_Base_SetConfig+0x104>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d00f      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a26      	ldr	r2, [pc, #152]	; (8003bf0 <TIM_Base_SetConfig+0x108>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d00b      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a25      	ldr	r2, [pc, #148]	; (8003bf4 <TIM_Base_SetConfig+0x10c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d007      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a24      	ldr	r2, [pc, #144]	; (8003bf8 <TIM_Base_SetConfig+0x110>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d003      	beq.n	8003b72 <TIM_Base_SetConfig+0x8a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <TIM_Base_SetConfig+0x114>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d108      	bne.n	8003b84 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	68fa      	ldr	r2, [r7, #12]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b8a:	683b      	ldr	r3, [r7, #0]
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	68fa      	ldr	r2, [r7, #12]
 8003b96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689a      	ldr	r2, [r3, #8]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a0e      	ldr	r2, [pc, #56]	; (8003be4 <TIM_Base_SetConfig+0xfc>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d103      	bne.n	8003bb8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	691a      	ldr	r2, [r3, #16]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	691b      	ldr	r3, [r3, #16]
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d105      	bne.n	8003bd6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	691b      	ldr	r3, [r3, #16]
 8003bce:	f023 0201 	bic.w	r2, r3, #1
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	611a      	str	r2, [r3, #16]
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	40010000 	.word	0x40010000
 8003be8:	40000400 	.word	0x40000400
 8003bec:	40000800 	.word	0x40000800
 8003bf0:	40000c00 	.word	0x40000c00
 8003bf4:	40014000 	.word	0x40014000
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	40014800 	.word	0x40014800

08003c00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c00:	b480      	push	{r7}
 8003c02:	b087      	sub	sp, #28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
 8003c08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6a1b      	ldr	r3, [r3, #32]
 8003c0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a1b      	ldr	r3, [r3, #32]
 8003c14:	f023 0201 	bic.w	r2, r3, #1
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f023 0303 	bic.w	r3, r3, #3
 8003c36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	4313      	orrs	r3, r2
 8003c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003c42:	697b      	ldr	r3, [r7, #20]
 8003c44:	f023 0302 	bic.w	r3, r3, #2
 8003c48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	697a      	ldr	r2, [r7, #20]
 8003c50:	4313      	orrs	r3, r2
 8003c52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	4a1c      	ldr	r2, [pc, #112]	; (8003cc8 <TIM_OC1_SetConfig+0xc8>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d10c      	bne.n	8003c76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f023 0308 	bic.w	r3, r3, #8
 8003c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	68db      	ldr	r3, [r3, #12]
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f023 0304 	bic.w	r3, r3, #4
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a13      	ldr	r2, [pc, #76]	; (8003cc8 <TIM_OC1_SetConfig+0xc8>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d111      	bne.n	8003ca2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c86:	693b      	ldr	r3, [r7, #16]
 8003c88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003c8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	695b      	ldr	r3, [r3, #20]
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c98:	683b      	ldr	r3, [r7, #0]
 8003c9a:	699b      	ldr	r3, [r3, #24]
 8003c9c:	693a      	ldr	r2, [r7, #16]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	693a      	ldr	r2, [r7, #16]
 8003ca6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68fa      	ldr	r2, [r7, #12]
 8003cac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	685a      	ldr	r2, [r3, #4]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	621a      	str	r2, [r3, #32]
}
 8003cbc:	bf00      	nop
 8003cbe:	371c      	adds	r7, #28
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc6:	4770      	bx	lr
 8003cc8:	40010000 	.word	0x40010000

08003ccc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b087      	sub	sp, #28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6a1b      	ldr	r3, [r3, #32]
 8003cda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a1b      	ldr	r3, [r3, #32]
 8003ce0:	f023 0210 	bic.w	r2, r3, #16
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	699b      	ldr	r3, [r3, #24]
 8003cf2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003cfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	021b      	lsls	r3, r3, #8
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003d10:	697b      	ldr	r3, [r7, #20]
 8003d12:	f023 0320 	bic.w	r3, r3, #32
 8003d16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	4a1e      	ldr	r2, [pc, #120]	; (8003da0 <TIM_OC2_SetConfig+0xd4>)
 8003d28:	4293      	cmp	r3, r2
 8003d2a:	d10d      	bne.n	8003d48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003d2c:	697b      	ldr	r3, [r7, #20]
 8003d2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d40:	697b      	ldr	r3, [r7, #20]
 8003d42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d46:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	4a15      	ldr	r2, [pc, #84]	; (8003da0 <TIM_OC2_SetConfig+0xd4>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d113      	bne.n	8003d78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003d56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003d5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	695b      	ldr	r3, [r3, #20]
 8003d64:	009b      	lsls	r3, r3, #2
 8003d66:	693a      	ldr	r2, [r7, #16]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	699b      	ldr	r3, [r3, #24]
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68fa      	ldr	r2, [r7, #12]
 8003d82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	697a      	ldr	r2, [r7, #20]
 8003d90:	621a      	str	r2, [r3, #32]
}
 8003d92:	bf00      	nop
 8003d94:	371c      	adds	r7, #28
 8003d96:	46bd      	mov	sp, r7
 8003d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9c:	4770      	bx	lr
 8003d9e:	bf00      	nop
 8003da0:	40010000 	.word	0x40010000

08003da4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b087      	sub	sp, #28
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
 8003dac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	6a1b      	ldr	r3, [r3, #32]
 8003db2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6a1b      	ldr	r3, [r3, #32]
 8003db8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	69db      	ldr	r3, [r3, #28]
 8003dca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003dd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	f023 0303 	bic.w	r3, r3, #3
 8003dda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68fa      	ldr	r2, [r7, #12]
 8003de2:	4313      	orrs	r3, r2
 8003de4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003dec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	021b      	lsls	r3, r3, #8
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	4313      	orrs	r3, r2
 8003df8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	4a1d      	ldr	r2, [pc, #116]	; (8003e74 <TIM_OC3_SetConfig+0xd0>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d10d      	bne.n	8003e1e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e08:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	021b      	lsls	r3, r3, #8
 8003e10:	697a      	ldr	r2, [r7, #20]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a14      	ldr	r2, [pc, #80]	; (8003e74 <TIM_OC3_SetConfig+0xd0>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d113      	bne.n	8003e4e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e26:	693b      	ldr	r3, [r7, #16]
 8003e28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003e34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	699b      	ldr	r3, [r3, #24]
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	693a      	ldr	r2, [r7, #16]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	685a      	ldr	r2, [r3, #4]
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	621a      	str	r2, [r3, #32]
}
 8003e68:	bf00      	nop
 8003e6a:	371c      	adds	r7, #28
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40010000 	.word	0x40010000

08003e78 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a1b      	ldr	r3, [r3, #32]
 8003e86:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a1b      	ldr	r3, [r3, #32]
 8003e8c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	685b      	ldr	r3, [r3, #4]
 8003e98:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	69db      	ldr	r3, [r3, #28]
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ea6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	021b      	lsls	r3, r3, #8
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4313      	orrs	r3, r2
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003ec2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4a10      	ldr	r2, [pc, #64]	; (8003f14 <TIM_OC4_SetConfig+0x9c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d109      	bne.n	8003eec <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003ede:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	019b      	lsls	r3, r3, #6
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	697a      	ldr	r2, [r7, #20]
 8003ef0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	68fa      	ldr	r2, [r7, #12]
 8003ef6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	685a      	ldr	r2, [r3, #4]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	621a      	str	r2, [r3, #32]
}
 8003f06:	bf00      	nop
 8003f08:	371c      	adds	r7, #28
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
 8003f12:	bf00      	nop
 8003f14:	40010000 	.word	0x40010000

08003f18 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b087      	sub	sp, #28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	6a1b      	ldr	r3, [r3, #32]
 8003f30:	f023 0201 	bic.w	r2, r3, #1
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	699b      	ldr	r3, [r3, #24]
 8003f3c:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	4a24      	ldr	r2, [pc, #144]	; (8003fd4 <TIM_TI1_SetConfig+0xbc>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d013      	beq.n	8003f6e <TIM_TI1_SetConfig+0x56>
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f4c:	d00f      	beq.n	8003f6e <TIM_TI1_SetConfig+0x56>
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	4a21      	ldr	r2, [pc, #132]	; (8003fd8 <TIM_TI1_SetConfig+0xc0>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d00b      	beq.n	8003f6e <TIM_TI1_SetConfig+0x56>
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4a20      	ldr	r2, [pc, #128]	; (8003fdc <TIM_TI1_SetConfig+0xc4>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d007      	beq.n	8003f6e <TIM_TI1_SetConfig+0x56>
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a1f      	ldr	r2, [pc, #124]	; (8003fe0 <TIM_TI1_SetConfig+0xc8>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d003      	beq.n	8003f6e <TIM_TI1_SetConfig+0x56>
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a1e      	ldr	r2, [pc, #120]	; (8003fe4 <TIM_TI1_SetConfig+0xcc>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d101      	bne.n	8003f72 <TIM_TI1_SetConfig+0x5a>
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e000      	b.n	8003f74 <TIM_TI1_SetConfig+0x5c>
 8003f72:	2300      	movs	r3, #0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	f023 0303 	bic.w	r3, r3, #3
 8003f7e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003f80:	697a      	ldr	r2, [r7, #20]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
 8003f88:	e003      	b.n	8003f92 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	011b      	lsls	r3, r3, #4
 8003f9e:	b2db      	uxtb	r3, r3
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	f023 030a 	bic.w	r3, r3, #10
 8003fac:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003fae:	68bb      	ldr	r3, [r7, #8]
 8003fb0:	f003 030a 	and.w	r3, r3, #10
 8003fb4:	693a      	ldr	r2, [r7, #16]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	693a      	ldr	r2, [r7, #16]
 8003fc4:	621a      	str	r2, [r3, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	371c      	adds	r7, #28
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40010000 	.word	0x40010000
 8003fd8:	40000400 	.word	0x40000400
 8003fdc:	40000800 	.word	0x40000800
 8003fe0:	40000c00 	.word	0x40000c00
 8003fe4:	40014000 	.word	0x40014000

08003fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	b087      	sub	sp, #28
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	60f8      	str	r0, [r7, #12]
 8003ff0:	60b9      	str	r1, [r7, #8]
 8003ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a1b      	ldr	r3, [r3, #32]
 8003ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	f023 0201 	bic.w	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	011b      	lsls	r3, r3, #4
 8004018:	693a      	ldr	r2, [r7, #16]
 800401a:	4313      	orrs	r3, r2
 800401c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800401e:	697b      	ldr	r3, [r7, #20]
 8004020:	f023 030a 	bic.w	r3, r3, #10
 8004024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004026:	697a      	ldr	r2, [r7, #20]
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	4313      	orrs	r3, r2
 800402c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	693a      	ldr	r2, [r7, #16]
 8004032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	697a      	ldr	r2, [r7, #20]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr

08004046 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004046:	b480      	push	{r7}
 8004048:	b087      	sub	sp, #28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	6a1b      	ldr	r3, [r3, #32]
 800405e:	f023 0210 	bic.w	r2, r3, #16
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004072:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	021b      	lsls	r3, r3, #8
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	4313      	orrs	r3, r2
 800407c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004084:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	031b      	lsls	r3, r3, #12
 800408a:	b29b      	uxth	r3, r3
 800408c:	693a      	ldr	r2, [r7, #16]
 800408e:	4313      	orrs	r3, r2
 8004090:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004098:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80040a2:	697a      	ldr	r2, [r7, #20]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	693a      	ldr	r2, [r7, #16]
 80040ac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	697a      	ldr	r2, [r7, #20]
 80040b2:	621a      	str	r2, [r3, #32]
}
 80040b4:	bf00      	nop
 80040b6:	371c      	adds	r7, #28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b087      	sub	sp, #28
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	60f8      	str	r0, [r7, #12]
 80040c8:	60b9      	str	r1, [r7, #8]
 80040ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6a1b      	ldr	r3, [r3, #32]
 80040d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	6a1b      	ldr	r3, [r3, #32]
 80040d6:	f023 0210 	bic.w	r2, r3, #16
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	699b      	ldr	r3, [r3, #24]
 80040e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040e4:	693b      	ldr	r3, [r7, #16]
 80040e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80040ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	031b      	lsls	r3, r3, #12
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80040fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	011b      	lsls	r3, r3, #4
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	4313      	orrs	r3, r2
 8004106:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004120:	b480      	push	{r7}
 8004122:	b087      	sub	sp, #28
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	6a1b      	ldr	r3, [r3, #32]
 8004138:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	69db      	ldr	r3, [r3, #28]
 8004144:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	f023 0303 	bic.w	r3, r3, #3
 800414c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	4313      	orrs	r3, r2
 8004154:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800415c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	011b      	lsls	r3, r3, #4
 8004162:	b2db      	uxtb	r3, r3
 8004164:	693a      	ldr	r2, [r7, #16]
 8004166:	4313      	orrs	r3, r2
 8004168:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004170:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	021b      	lsls	r3, r3, #8
 8004176:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	4313      	orrs	r3, r2
 800417e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	693a      	ldr	r2, [r7, #16]
 8004184:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	697a      	ldr	r2, [r7, #20]
 800418a:	621a      	str	r2, [r3, #32]
}
 800418c:	bf00      	nop
 800418e:	371c      	adds	r7, #28
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004198:	b480      	push	{r7}
 800419a:	b087      	sub	sp, #28
 800419c:	af00      	add	r7, sp, #0
 800419e:	60f8      	str	r0, [r7, #12]
 80041a0:	60b9      	str	r1, [r7, #8]
 80041a2:	607a      	str	r2, [r7, #4]
 80041a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	6a1b      	ldr	r3, [r3, #32]
 80041aa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	6a1b      	ldr	r3, [r3, #32]
 80041b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	69db      	ldr	r3, [r3, #28]
 80041bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041c4:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	021b      	lsls	r3, r3, #8
 80041ca:	693a      	ldr	r2, [r7, #16]
 80041cc:	4313      	orrs	r3, r2
 80041ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80041d0:	693b      	ldr	r3, [r7, #16]
 80041d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d6:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	031b      	lsls	r3, r3, #12
 80041dc:	b29b      	uxth	r3, r3
 80041de:	693a      	ldr	r2, [r7, #16]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80041ea:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	031b      	lsls	r3, r3, #12
 80041f0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	693a      	ldr	r2, [r7, #16]
 80041fe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	697a      	ldr	r2, [r7, #20]
 8004204:	621a      	str	r2, [r3, #32]
}
 8004206:	bf00      	nop
 8004208:	371c      	adds	r7, #28
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004212:	b480      	push	{r7}
 8004214:	b085      	sub	sp, #20
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
 800421a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004228:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4313      	orrs	r3, r2
 8004230:	f043 0307 	orr.w	r3, r3, #7
 8004234:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	609a      	str	r2, [r3, #8]
}
 800423c:	bf00      	nop
 800423e:	3714      	adds	r7, #20
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
 8004254:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004262:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	021a      	lsls	r2, r3, #8
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	431a      	orrs	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4313      	orrs	r3, r2
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	4313      	orrs	r3, r2
 8004274:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	609a      	str	r2, [r3, #8]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr

08004288 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004288:	b480      	push	{r7}
 800428a:	b087      	sub	sp, #28
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f003 031f 	and.w	r3, r3, #31
 800429a:	2201      	movs	r2, #1
 800429c:	fa02 f303 	lsl.w	r3, r2, r3
 80042a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	6a1a      	ldr	r2, [r3, #32]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	43db      	mvns	r3, r3
 80042aa:	401a      	ands	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6a1a      	ldr	r2, [r3, #32]
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f003 031f 	and.w	r3, r3, #31
 80042ba:	6879      	ldr	r1, [r7, #4]
 80042bc:	fa01 f303 	lsl.w	r3, r1, r3
 80042c0:	431a      	orrs	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	621a      	str	r2, [r3, #32]
}
 80042c6:	bf00      	nop
 80042c8:	371c      	adds	r7, #28
 80042ca:	46bd      	mov	sp, r7
 80042cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d0:	4770      	bx	lr
	...

080042d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e050      	b.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004312:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68fa      	ldr	r2, [r7, #12]
 800431a:	4313      	orrs	r3, r2
 800431c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	68fa      	ldr	r2, [r7, #12]
 8004324:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4a1c      	ldr	r2, [pc, #112]	; (800439c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d018      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004338:	d013      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a18      	ldr	r2, [pc, #96]	; (80043a0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d00e      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a16      	ldr	r2, [pc, #88]	; (80043a4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d009      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a15      	ldr	r2, [pc, #84]	; (80043a8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d004      	beq.n	8004362 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a13      	ldr	r2, [pc, #76]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d10c      	bne.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004368:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	68ba      	ldr	r2, [r7, #8]
 8004370:	4313      	orrs	r3, r2
 8004372:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3714      	adds	r7, #20
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000
 80043a0:	40000400 	.word	0x40000400
 80043a4:	40000800 	.word	0x40000800
 80043a8:	40000c00 	.word	0x40000c00
 80043ac:	40014000 	.word	0x40014000

080043b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043b0:	b480      	push	{r7}
 80043b2:	b083      	sub	sp, #12
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043b8:	bf00      	nop
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <__NVIC_SetPriority>:
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	4603      	mov	r3, r0
 80043e0:	6039      	str	r1, [r7, #0]
 80043e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	db0a      	blt.n	8004402 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043ec:	683b      	ldr	r3, [r7, #0]
 80043ee:	b2da      	uxtb	r2, r3
 80043f0:	490c      	ldr	r1, [pc, #48]	; (8004424 <__NVIC_SetPriority+0x4c>)
 80043f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043f6:	0112      	lsls	r2, r2, #4
 80043f8:	b2d2      	uxtb	r2, r2
 80043fa:	440b      	add	r3, r1
 80043fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004400:	e00a      	b.n	8004418 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	b2da      	uxtb	r2, r3
 8004406:	4908      	ldr	r1, [pc, #32]	; (8004428 <__NVIC_SetPriority+0x50>)
 8004408:	79fb      	ldrb	r3, [r7, #7]
 800440a:	f003 030f 	and.w	r3, r3, #15
 800440e:	3b04      	subs	r3, #4
 8004410:	0112      	lsls	r2, r2, #4
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	440b      	add	r3, r1
 8004416:	761a      	strb	r2, [r3, #24]
}
 8004418:	bf00      	nop
 800441a:	370c      	adds	r7, #12
 800441c:	46bd      	mov	sp, r7
 800441e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004422:	4770      	bx	lr
 8004424:	e000e100 	.word	0xe000e100
 8004428:	e000ed00 	.word	0xe000ed00

0800442c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800442c:	b580      	push	{r7, lr}
 800442e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004430:	4b05      	ldr	r3, [pc, #20]	; (8004448 <SysTick_Handler+0x1c>)
 8004432:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004434:	f002 f93e 	bl	80066b4 <xTaskGetSchedulerState>
 8004438:	4603      	mov	r3, r0
 800443a:	2b01      	cmp	r3, #1
 800443c:	d001      	beq.n	8004442 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800443e:	f003 f823 	bl	8007488 <xPortSysTickHandler>
  }
}
 8004442:	bf00      	nop
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	e000e010 	.word	0xe000e010

0800444c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800444c:	b580      	push	{r7, lr}
 800444e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004450:	2100      	movs	r1, #0
 8004452:	f06f 0004 	mvn.w	r0, #4
 8004456:	f7ff ffbf 	bl	80043d8 <__NVIC_SetPriority>
#endif
}
 800445a:	bf00      	nop
 800445c:	bd80      	pop	{r7, pc}
	...

08004460 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004466:	f3ef 8305 	mrs	r3, IPSR
 800446a:	603b      	str	r3, [r7, #0]
  return(result);
 800446c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800446e:	2b00      	cmp	r3, #0
 8004470:	d003      	beq.n	800447a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004472:	f06f 0305 	mvn.w	r3, #5
 8004476:	607b      	str	r3, [r7, #4]
 8004478:	e00c      	b.n	8004494 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800447a:	4b0a      	ldr	r3, [pc, #40]	; (80044a4 <osKernelInitialize+0x44>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d105      	bne.n	800448e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004482:	4b08      	ldr	r3, [pc, #32]	; (80044a4 <osKernelInitialize+0x44>)
 8004484:	2201      	movs	r2, #1
 8004486:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004488:	2300      	movs	r3, #0
 800448a:	607b      	str	r3, [r7, #4]
 800448c:	e002      	b.n	8004494 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800448e:	f04f 33ff 	mov.w	r3, #4294967295
 8004492:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004494:	687b      	ldr	r3, [r7, #4]
}
 8004496:	4618      	mov	r0, r3
 8004498:	370c      	adds	r7, #12
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	200001a0 	.word	0x200001a0

080044a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b082      	sub	sp, #8
 80044ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044ae:	f3ef 8305 	mrs	r3, IPSR
 80044b2:	603b      	str	r3, [r7, #0]
  return(result);
 80044b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d003      	beq.n	80044c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80044ba:	f06f 0305 	mvn.w	r3, #5
 80044be:	607b      	str	r3, [r7, #4]
 80044c0:	e010      	b.n	80044e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80044c2:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <osKernelStart+0x48>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d109      	bne.n	80044de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80044ca:	f7ff ffbf 	bl	800444c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80044ce:	4b08      	ldr	r3, [pc, #32]	; (80044f0 <osKernelStart+0x48>)
 80044d0:	2202      	movs	r2, #2
 80044d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80044d4:	f001 fca6 	bl	8005e24 <vTaskStartScheduler>
      stat = osOK;
 80044d8:	2300      	movs	r3, #0
 80044da:	607b      	str	r3, [r7, #4]
 80044dc:	e002      	b.n	80044e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80044de:	f04f 33ff 	mov.w	r3, #4294967295
 80044e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80044e4:	687b      	ldr	r3, [r7, #4]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3708      	adds	r7, #8
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	200001a0 	.word	0x200001a0

080044f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b08e      	sub	sp, #56	; 0x38
 80044f8:	af04      	add	r7, sp, #16
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004504:	f3ef 8305 	mrs	r3, IPSR
 8004508:	617b      	str	r3, [r7, #20]
  return(result);
 800450a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800450c:	2b00      	cmp	r3, #0
 800450e:	d17e      	bne.n	800460e <osThreadNew+0x11a>
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d07b      	beq.n	800460e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004516:	2380      	movs	r3, #128	; 0x80
 8004518:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800451a:	2318      	movs	r3, #24
 800451c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800451e:	2300      	movs	r3, #0
 8004520:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004522:	f04f 33ff 	mov.w	r3, #4294967295
 8004526:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d045      	beq.n	80045ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d002      	beq.n	800453c <osThreadNew+0x48>
        name = attr->name;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d002      	beq.n	800454a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	699b      	ldr	r3, [r3, #24]
 8004548:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d008      	beq.n	8004562 <osThreadNew+0x6e>
 8004550:	69fb      	ldr	r3, [r7, #28]
 8004552:	2b38      	cmp	r3, #56	; 0x38
 8004554:	d805      	bhi.n	8004562 <osThreadNew+0x6e>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d001      	beq.n	8004566 <osThreadNew+0x72>
        return (NULL);
 8004562:	2300      	movs	r3, #0
 8004564:	e054      	b.n	8004610 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d003      	beq.n	8004576 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	695b      	ldr	r3, [r3, #20]
 8004572:	089b      	lsrs	r3, r3, #2
 8004574:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00e      	beq.n	800459c <osThreadNew+0xa8>
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	2b5b      	cmp	r3, #91	; 0x5b
 8004584:	d90a      	bls.n	800459c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	695b      	ldr	r3, [r3, #20]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d002      	beq.n	800459c <osThreadNew+0xa8>
        mem = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e010      	b.n	80045be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d10c      	bne.n	80045be <osThreadNew+0xca>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d108      	bne.n	80045be <osThreadNew+0xca>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	691b      	ldr	r3, [r3, #16]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d104      	bne.n	80045be <osThreadNew+0xca>
          mem = 0;
 80045b4:	2300      	movs	r3, #0
 80045b6:	61bb      	str	r3, [r7, #24]
 80045b8:	e001      	b.n	80045be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80045be:	69bb      	ldr	r3, [r7, #24]
 80045c0:	2b01      	cmp	r3, #1
 80045c2:	d110      	bne.n	80045e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80045c8:	687a      	ldr	r2, [r7, #4]
 80045ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80045cc:	9202      	str	r2, [sp, #8]
 80045ce:	9301      	str	r3, [sp, #4]
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	9300      	str	r3, [sp, #0]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	6a3a      	ldr	r2, [r7, #32]
 80045d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045da:	68f8      	ldr	r0, [r7, #12]
 80045dc:	f001 fa4c 	bl	8005a78 <xTaskCreateStatic>
 80045e0:	4603      	mov	r3, r0
 80045e2:	613b      	str	r3, [r7, #16]
 80045e4:	e013      	b.n	800460e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80045e6:	69bb      	ldr	r3, [r7, #24]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d110      	bne.n	800460e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80045ec:	6a3b      	ldr	r3, [r7, #32]
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	f107 0310 	add.w	r3, r7, #16
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	69fb      	ldr	r3, [r7, #28]
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045fe:	68f8      	ldr	r0, [r7, #12]
 8004600:	f001 fa97 	bl	8005b32 <xTaskCreate>
 8004604:	4603      	mov	r3, r0
 8004606:	2b01      	cmp	r3, #1
 8004608:	d001      	beq.n	800460e <osThreadNew+0x11a>
            hTask = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800460e:	693b      	ldr	r3, [r7, #16]
}
 8004610:	4618      	mov	r0, r3
 8004612:	3728      	adds	r7, #40	; 0x28
 8004614:	46bd      	mov	sp, r7
 8004616:	bd80      	pop	{r7, pc}

08004618 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004620:	f3ef 8305 	mrs	r3, IPSR
 8004624:	60bb      	str	r3, [r7, #8]
  return(result);
 8004626:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004628:	2b00      	cmp	r3, #0
 800462a:	d003      	beq.n	8004634 <osDelay+0x1c>
    stat = osErrorISR;
 800462c:	f06f 0305 	mvn.w	r3, #5
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e007      	b.n	8004644 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d002      	beq.n	8004644 <osDelay+0x2c>
      vTaskDelay(ticks);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f001 fbbc 	bl	8005dbc <vTaskDelay>
    }
  }

  return (stat);
 8004644:	68fb      	ldr	r3, [r7, #12]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3710      	adds	r7, #16
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800464e:	b580      	push	{r7, lr}
 8004650:	b08a      	sub	sp, #40	; 0x28
 8004652:	af02      	add	r7, sp, #8
 8004654:	60f8      	str	r0, [r7, #12]
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800465e:	f3ef 8305 	mrs	r3, IPSR
 8004662:	613b      	str	r3, [r7, #16]
  return(result);
 8004664:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004666:	2b00      	cmp	r3, #0
 8004668:	d175      	bne.n	8004756 <osSemaphoreNew+0x108>
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d072      	beq.n	8004756 <osSemaphoreNew+0x108>
 8004670:	68ba      	ldr	r2, [r7, #8]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	429a      	cmp	r2, r3
 8004676:	d86e      	bhi.n	8004756 <osSemaphoreNew+0x108>
    mem = -1;
 8004678:	f04f 33ff 	mov.w	r3, #4294967295
 800467c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d015      	beq.n	80046b0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d006      	beq.n	800469a <osSemaphoreNew+0x4c>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	2b4f      	cmp	r3, #79	; 0x4f
 8004692:	d902      	bls.n	800469a <osSemaphoreNew+0x4c>
        mem = 1;
 8004694:	2301      	movs	r3, #1
 8004696:	61bb      	str	r3, [r7, #24]
 8004698:	e00c      	b.n	80046b4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d108      	bne.n	80046b4 <osSemaphoreNew+0x66>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d104      	bne.n	80046b4 <osSemaphoreNew+0x66>
          mem = 0;
 80046aa:	2300      	movs	r3, #0
 80046ac:	61bb      	str	r3, [r7, #24]
 80046ae:	e001      	b.n	80046b4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80046b0:	2300      	movs	r3, #0
 80046b2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ba:	d04c      	beq.n	8004756 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d128      	bne.n	8004714 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80046c2:	69bb      	ldr	r3, [r7, #24]
 80046c4:	2b01      	cmp	r3, #1
 80046c6:	d10a      	bne.n	80046de <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	689b      	ldr	r3, [r3, #8]
 80046cc:	2203      	movs	r2, #3
 80046ce:	9200      	str	r2, [sp, #0]
 80046d0:	2200      	movs	r2, #0
 80046d2:	2100      	movs	r1, #0
 80046d4:	2001      	movs	r0, #1
 80046d6:	f000 fa29 	bl	8004b2c <xQueueGenericCreateStatic>
 80046da:	61f8      	str	r0, [r7, #28]
 80046dc:	e005      	b.n	80046ea <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80046de:	2203      	movs	r2, #3
 80046e0:	2100      	movs	r1, #0
 80046e2:	2001      	movs	r0, #1
 80046e4:	f000 fa9a 	bl	8004c1c <xQueueGenericCreate>
 80046e8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d022      	beq.n	8004736 <osSemaphoreNew+0xe8>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d01f      	beq.n	8004736 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80046f6:	2300      	movs	r3, #0
 80046f8:	2200      	movs	r2, #0
 80046fa:	2100      	movs	r1, #0
 80046fc:	69f8      	ldr	r0, [r7, #28]
 80046fe:	f000 fb55 	bl	8004dac <xQueueGenericSend>
 8004702:	4603      	mov	r3, r0
 8004704:	2b01      	cmp	r3, #1
 8004706:	d016      	beq.n	8004736 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004708:	69f8      	ldr	r0, [r7, #28]
 800470a:	f000 ffe1 	bl	80056d0 <vQueueDelete>
            hSemaphore = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
 8004712:	e010      	b.n	8004736 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004714:	69bb      	ldr	r3, [r7, #24]
 8004716:	2b01      	cmp	r3, #1
 8004718:	d108      	bne.n	800472c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	461a      	mov	r2, r3
 8004720:	68b9      	ldr	r1, [r7, #8]
 8004722:	68f8      	ldr	r0, [r7, #12]
 8004724:	f000 fad7 	bl	8004cd6 <xQueueCreateCountingSemaphoreStatic>
 8004728:	61f8      	str	r0, [r7, #28]
 800472a:	e004      	b.n	8004736 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800472c:	68b9      	ldr	r1, [r7, #8]
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f000 fb08 	bl	8004d44 <xQueueCreateCountingSemaphore>
 8004734:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d00c      	beq.n	8004756 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	617b      	str	r3, [r7, #20]
 8004748:	e001      	b.n	800474e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800474a:	2300      	movs	r3, #0
 800474c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800474e:	6979      	ldr	r1, [r7, #20]
 8004750:	69f8      	ldr	r0, [r7, #28]
 8004752:	f001 f909 	bl	8005968 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004756:	69fb      	ldr	r3, [r7, #28]
}
 8004758:	4618      	mov	r0, r3
 800475a:	3720      	adds	r7, #32
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004760:	b580      	push	{r7, lr}
 8004762:	b086      	sub	sp, #24
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004772:	693b      	ldr	r3, [r7, #16]
 8004774:	2b00      	cmp	r3, #0
 8004776:	d103      	bne.n	8004780 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004778:	f06f 0303 	mvn.w	r3, #3
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e039      	b.n	80047f4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004780:	f3ef 8305 	mrs	r3, IPSR
 8004784:	60fb      	str	r3, [r7, #12]
  return(result);
 8004786:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004788:	2b00      	cmp	r3, #0
 800478a:	d022      	beq.n	80047d2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004792:	f06f 0303 	mvn.w	r3, #3
 8004796:	617b      	str	r3, [r7, #20]
 8004798:	e02c      	b.n	80047f4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800479a:	2300      	movs	r3, #0
 800479c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800479e:	f107 0308 	add.w	r3, r7, #8
 80047a2:	461a      	mov	r2, r3
 80047a4:	2100      	movs	r1, #0
 80047a6:	6938      	ldr	r0, [r7, #16]
 80047a8:	f000 ff12 	bl	80055d0 <xQueueReceiveFromISR>
 80047ac:	4603      	mov	r3, r0
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d003      	beq.n	80047ba <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80047b2:	f06f 0302 	mvn.w	r3, #2
 80047b6:	617b      	str	r3, [r7, #20]
 80047b8:	e01c      	b.n	80047f4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d019      	beq.n	80047f4 <osSemaphoreAcquire+0x94>
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <osSemaphoreAcquire+0xa0>)
 80047c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	f3bf 8f4f 	dsb	sy
 80047cc:	f3bf 8f6f 	isb	sy
 80047d0:	e010      	b.n	80047f4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80047d2:	6839      	ldr	r1, [r7, #0]
 80047d4:	6938      	ldr	r0, [r7, #16]
 80047d6:	f000 fdef 	bl	80053b8 <xQueueSemaphoreTake>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d009      	beq.n	80047f4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d003      	beq.n	80047ee <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80047e6:	f06f 0301 	mvn.w	r3, #1
 80047ea:	617b      	str	r3, [r7, #20]
 80047ec:	e002      	b.n	80047f4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80047ee:	f06f 0302 	mvn.w	r3, #2
 80047f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80047f4:	697b      	ldr	r3, [r7, #20]
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3718      	adds	r7, #24
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	e000ed04 	.word	0xe000ed04

08004804 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004804:	b580      	push	{r7, lr}
 8004806:	b086      	sub	sp, #24
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d103      	bne.n	8004822 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800481a:	f06f 0303 	mvn.w	r3, #3
 800481e:	617b      	str	r3, [r7, #20]
 8004820:	e02c      	b.n	800487c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004822:	f3ef 8305 	mrs	r3, IPSR
 8004826:	60fb      	str	r3, [r7, #12]
  return(result);
 8004828:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800482a:	2b00      	cmp	r3, #0
 800482c:	d01a      	beq.n	8004864 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800482e:	2300      	movs	r3, #0
 8004830:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004832:	f107 0308 	add.w	r3, r7, #8
 8004836:	4619      	mov	r1, r3
 8004838:	6938      	ldr	r0, [r7, #16]
 800483a:	f000 fc50 	bl	80050de <xQueueGiveFromISR>
 800483e:	4603      	mov	r3, r0
 8004840:	2b01      	cmp	r3, #1
 8004842:	d003      	beq.n	800484c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004844:	f06f 0302 	mvn.w	r3, #2
 8004848:	617b      	str	r3, [r7, #20]
 800484a:	e017      	b.n	800487c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800484c:	68bb      	ldr	r3, [r7, #8]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d014      	beq.n	800487c <osSemaphoreRelease+0x78>
 8004852:	4b0d      	ldr	r3, [pc, #52]	; (8004888 <osSemaphoreRelease+0x84>)
 8004854:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004858:	601a      	str	r2, [r3, #0]
 800485a:	f3bf 8f4f 	dsb	sy
 800485e:	f3bf 8f6f 	isb	sy
 8004862:	e00b      	b.n	800487c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004864:	2300      	movs	r3, #0
 8004866:	2200      	movs	r2, #0
 8004868:	2100      	movs	r1, #0
 800486a:	6938      	ldr	r0, [r7, #16]
 800486c:	f000 fa9e 	bl	8004dac <xQueueGenericSend>
 8004870:	4603      	mov	r3, r0
 8004872:	2b01      	cmp	r3, #1
 8004874:	d002      	beq.n	800487c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004876:	f06f 0302 	mvn.w	r3, #2
 800487a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800487c:	697b      	ldr	r3, [r7, #20]
}
 800487e:	4618      	mov	r0, r3
 8004880:	3718      	adds	r7, #24
 8004882:	46bd      	mov	sp, r7
 8004884:	bd80      	pop	{r7, pc}
 8004886:	bf00      	nop
 8004888:	e000ed04 	.word	0xe000ed04

0800488c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	60f8      	str	r0, [r7, #12]
 8004894:	60b9      	str	r1, [r7, #8]
 8004896:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a07      	ldr	r2, [pc, #28]	; (80048b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800489c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	4a06      	ldr	r2, [pc, #24]	; (80048bc <vApplicationGetIdleTaskMemory+0x30>)
 80048a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2280      	movs	r2, #128	; 0x80
 80048a8:	601a      	str	r2, [r3, #0]
}
 80048aa:	bf00      	nop
 80048ac:	3714      	adds	r7, #20
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	200001a4 	.word	0x200001a4
 80048bc:	20000200 	.word	0x20000200

080048c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048c0:	b480      	push	{r7}
 80048c2:	b085      	sub	sp, #20
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	4a07      	ldr	r2, [pc, #28]	; (80048ec <vApplicationGetTimerTaskMemory+0x2c>)
 80048d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	4a06      	ldr	r2, [pc, #24]	; (80048f0 <vApplicationGetTimerTaskMemory+0x30>)
 80048d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048de:	601a      	str	r2, [r3, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3714      	adds	r7, #20
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr
 80048ec:	20000400 	.word	0x20000400
 80048f0:	2000045c 	.word	0x2000045c

080048f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80048f4:	b480      	push	{r7}
 80048f6:	b083      	sub	sp, #12
 80048f8:	af00      	add	r7, sp, #0
 80048fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f103 0208 	add.w	r2, r3, #8
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	f04f 32ff 	mov.w	r2, #4294967295
 800490c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f103 0208 	add.w	r2, r3, #8
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	f103 0208 	add.w	r2, r3, #8
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2200      	movs	r2, #0
 8004940:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004942:	bf00      	nop
 8004944:	370c      	adds	r7, #12
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800494e:	b480      	push	{r7}
 8004950:	b085      	sub	sp, #20
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
 8004956:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	685b      	ldr	r3, [r3, #4]
 800495c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	68fa      	ldr	r2, [r7, #12]
 8004962:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	689a      	ldr	r2, [r3, #8]
 8004968:	683b      	ldr	r3, [r7, #0]
 800496a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	683a      	ldr	r2, [r7, #0]
 8004972:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	687a      	ldr	r2, [r7, #4]
 800497e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	601a      	str	r2, [r3, #0]
}
 800498a:	bf00      	nop
 800498c:	3714      	adds	r7, #20
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d103      	bne.n	80049b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	e00c      	b.n	80049d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3308      	adds	r3, #8
 80049ba:	60fb      	str	r3, [r7, #12]
 80049bc:	e002      	b.n	80049c4 <vListInsert+0x2e>
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	60fb      	str	r3, [r7, #12]
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	68ba      	ldr	r2, [r7, #8]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d2f6      	bcs.n	80049be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	685b      	ldr	r3, [r3, #4]
 80049dc:	683a      	ldr	r2, [r7, #0]
 80049de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	68fa      	ldr	r2, [r7, #12]
 80049e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	601a      	str	r2, [r3, #0]
}
 80049fc:	bf00      	nop
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	691b      	ldr	r3, [r3, #16]
 8004a14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	6892      	ldr	r2, [r2, #8]
 8004a1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	687a      	ldr	r2, [r7, #4]
 8004a26:	6852      	ldr	r2, [r2, #4]
 8004a28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	687a      	ldr	r2, [r7, #4]
 8004a30:	429a      	cmp	r2, r3
 8004a32:	d103      	bne.n	8004a3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689a      	ldr	r2, [r3, #8]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	1e5a      	subs	r2, r3, #1
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
}
 8004a50:	4618      	mov	r0, r3
 8004a52:	3714      	adds	r7, #20
 8004a54:	46bd      	mov	sp, r7
 8004a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a5a:	4770      	bx	lr

08004a5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d10a      	bne.n	8004a86 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a74:	f383 8811 	msr	BASEPRI, r3
 8004a78:	f3bf 8f6f 	isb	sy
 8004a7c:	f3bf 8f4f 	dsb	sy
 8004a80:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a82:	bf00      	nop
 8004a84:	e7fe      	b.n	8004a84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a86:	f002 fc6d 	bl	8007364 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	68f9      	ldr	r1, [r7, #12]
 8004a94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004a96:	fb01 f303 	mul.w	r3, r1, r3
 8004a9a:	441a      	add	r2, r3
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	681a      	ldr	r2, [r3, #0]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681a      	ldr	r2, [r3, #0]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	3b01      	subs	r3, #1
 8004ab8:	68f9      	ldr	r1, [r7, #12]
 8004aba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004abc:	fb01 f303 	mul.w	r3, r1, r3
 8004ac0:	441a      	add	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	22ff      	movs	r2, #255	; 0xff
 8004aca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	22ff      	movs	r2, #255	; 0xff
 8004ad2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d114      	bne.n	8004b06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	691b      	ldr	r3, [r3, #16]
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d01a      	beq.n	8004b1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	3310      	adds	r3, #16
 8004ae8:	4618      	mov	r0, r3
 8004aea:	f001 fc25 	bl	8006338 <xTaskRemoveFromEventList>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d012      	beq.n	8004b1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004af4:	4b0c      	ldr	r3, [pc, #48]	; (8004b28 <xQueueGenericReset+0xcc>)
 8004af6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004afa:	601a      	str	r2, [r3, #0]
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	f3bf 8f6f 	isb	sy
 8004b04:	e009      	b.n	8004b1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	3310      	adds	r3, #16
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	f7ff fef2 	bl	80048f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3324      	adds	r3, #36	; 0x24
 8004b14:	4618      	mov	r0, r3
 8004b16:	f7ff feed 	bl	80048f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b1a:	f002 fc53 	bl	80073c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b1e:	2301      	movs	r3, #1
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	3710      	adds	r7, #16
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	; 0x38
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d10a      	bne.n	8004b56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b44:	f383 8811 	msr	BASEPRI, r3
 8004b48:	f3bf 8f6f 	isb	sy
 8004b4c:	f3bf 8f4f 	dsb	sy
 8004b50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b52:	bf00      	nop
 8004b54:	e7fe      	b.n	8004b54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d10a      	bne.n	8004b72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d002      	beq.n	8004b7e <xQueueGenericCreateStatic+0x52>
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d001      	beq.n	8004b82 <xQueueGenericCreateStatic+0x56>
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e000      	b.n	8004b84 <xQueueGenericCreateStatic+0x58>
 8004b82:	2300      	movs	r3, #0
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d10a      	bne.n	8004b9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b8c:	f383 8811 	msr	BASEPRI, r3
 8004b90:	f3bf 8f6f 	isb	sy
 8004b94:	f3bf 8f4f 	dsb	sy
 8004b98:	623b      	str	r3, [r7, #32]
}
 8004b9a:	bf00      	nop
 8004b9c:	e7fe      	b.n	8004b9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d102      	bne.n	8004baa <xQueueGenericCreateStatic+0x7e>
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d101      	bne.n	8004bae <xQueueGenericCreateStatic+0x82>
 8004baa:	2301      	movs	r3, #1
 8004bac:	e000      	b.n	8004bb0 <xQueueGenericCreateStatic+0x84>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d10a      	bne.n	8004bca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bb8:	f383 8811 	msr	BASEPRI, r3
 8004bbc:	f3bf 8f6f 	isb	sy
 8004bc0:	f3bf 8f4f 	dsb	sy
 8004bc4:	61fb      	str	r3, [r7, #28]
}
 8004bc6:	bf00      	nop
 8004bc8:	e7fe      	b.n	8004bc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bca:	2350      	movs	r3, #80	; 0x50
 8004bcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	2b50      	cmp	r3, #80	; 0x50
 8004bd2:	d00a      	beq.n	8004bea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61bb      	str	r3, [r7, #24]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d00d      	beq.n	8004c12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004bfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	9300      	str	r3, [sp, #0]
 8004c06:	4613      	mov	r3, r2
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68b9      	ldr	r1, [r7, #8]
 8004c0c:	68f8      	ldr	r0, [r7, #12]
 8004c0e:	f000 f83f 	bl	8004c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3730      	adds	r7, #48	; 0x30
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b08a      	sub	sp, #40	; 0x28
 8004c20:	af02      	add	r7, sp, #8
 8004c22:	60f8      	str	r0, [r7, #12]
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	4613      	mov	r3, r2
 8004c28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	68ba      	ldr	r2, [r7, #8]
 8004c4a:	fb02 f303 	mul.w	r3, r2, r3
 8004c4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3350      	adds	r3, #80	; 0x50
 8004c54:	4618      	mov	r0, r3
 8004c56:	f002 fca7 	bl	80075a8 <pvPortMalloc>
 8004c5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c5c:	69bb      	ldr	r3, [r7, #24]
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d011      	beq.n	8004c86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c62:	69bb      	ldr	r3, [r7, #24]
 8004c64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	3350      	adds	r3, #80	; 0x50
 8004c6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c6c:	69bb      	ldr	r3, [r7, #24]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c74:	79fa      	ldrb	r2, [r7, #7]
 8004c76:	69bb      	ldr	r3, [r7, #24]
 8004c78:	9300      	str	r3, [sp, #0]
 8004c7a:	4613      	mov	r3, r2
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	68b9      	ldr	r1, [r7, #8]
 8004c80:	68f8      	ldr	r0, [r7, #12]
 8004c82:	f000 f805 	bl	8004c90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c86:	69bb      	ldr	r3, [r7, #24]
	}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3720      	adds	r7, #32
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}

08004c90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	b084      	sub	sp, #16
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	60f8      	str	r0, [r7, #12]
 8004c98:	60b9      	str	r1, [r7, #8]
 8004c9a:	607a      	str	r2, [r7, #4]
 8004c9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d103      	bne.n	8004cac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	69ba      	ldr	r2, [r7, #24]
 8004ca8:	601a      	str	r2, [r3, #0]
 8004caa:	e002      	b.n	8004cb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	687a      	ldr	r2, [r7, #4]
 8004cb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cb2:	69bb      	ldr	r3, [r7, #24]
 8004cb4:	68fa      	ldr	r2, [r7, #12]
 8004cb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	68ba      	ldr	r2, [r7, #8]
 8004cbc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cbe:	2101      	movs	r1, #1
 8004cc0:	69b8      	ldr	r0, [r7, #24]
 8004cc2:	f7ff fecb 	bl	8004a5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	78fa      	ldrb	r2, [r7, #3]
 8004cca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cce:	bf00      	nop
 8004cd0:	3710      	adds	r7, #16
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	bd80      	pop	{r7, pc}

08004cd6 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004cd6:	b580      	push	{r7, lr}
 8004cd8:	b08a      	sub	sp, #40	; 0x28
 8004cda:	af02      	add	r7, sp, #8
 8004cdc:	60f8      	str	r0, [r7, #12]
 8004cde:	60b9      	str	r1, [r7, #8]
 8004ce0:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d10a      	bne.n	8004cfe <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cec:	f383 8811 	msr	BASEPRI, r3
 8004cf0:	f3bf 8f6f 	isb	sy
 8004cf4:	f3bf 8f4f 	dsb	sy
 8004cf8:	61bb      	str	r3, [r7, #24]
}
 8004cfa:	bf00      	nop
 8004cfc:	e7fe      	b.n	8004cfc <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d90a      	bls.n	8004d1c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	617b      	str	r3, [r7, #20]
}
 8004d18:	bf00      	nop
 8004d1a:	e7fe      	b.n	8004d1a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d1c:	2302      	movs	r3, #2
 8004d1e:	9300      	str	r3, [sp, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2200      	movs	r2, #0
 8004d24:	2100      	movs	r1, #0
 8004d26:	68f8      	ldr	r0, [r7, #12]
 8004d28:	f7ff ff00 	bl	8004b2c <xQueueGenericCreateStatic>
 8004d2c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d002      	beq.n	8004d3a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	68ba      	ldr	r2, [r7, #8]
 8004d38:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d3a:	69fb      	ldr	r3, [r7, #28]
	}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3720      	adds	r7, #32
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b086      	sub	sp, #24
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
 8004d4c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	613b      	str	r3, [r7, #16]
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d6a:	683a      	ldr	r2, [r7, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	d90a      	bls.n	8004d88 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	60fb      	str	r3, [r7, #12]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d88:	2202      	movs	r2, #2
 8004d8a:	2100      	movs	r1, #0
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff45 	bl	8004c1c <xQueueGenericCreate>
 8004d92:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	683a      	ldr	r2, [r7, #0]
 8004d9e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004da0:	697b      	ldr	r3, [r7, #20]
	}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
	...

08004dac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b08e      	sub	sp, #56	; 0x38
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	607a      	str	r2, [r7, #4]
 8004db8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d10a      	bne.n	8004dde <xQueueGenericSend+0x32>
	__asm volatile
 8004dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dcc:	f383 8811 	msr	BASEPRI, r3
 8004dd0:	f3bf 8f6f 	isb	sy
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004dda:	bf00      	nop
 8004ddc:	e7fe      	b.n	8004ddc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004dde:	68bb      	ldr	r3, [r7, #8]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <xQueueGenericSend+0x40>
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d101      	bne.n	8004df0 <xQueueGenericSend+0x44>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e000      	b.n	8004df2 <xQueueGenericSend+0x46>
 8004df0:	2300      	movs	r3, #0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10a      	bne.n	8004e0c <xQueueGenericSend+0x60>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e08:	bf00      	nop
 8004e0a:	e7fe      	b.n	8004e0a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x6e>
 8004e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d101      	bne.n	8004e1e <xQueueGenericSend+0x72>
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	e000      	b.n	8004e20 <xQueueGenericSend+0x74>
 8004e1e:	2300      	movs	r3, #0
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <xQueueGenericSend+0x8e>
	__asm volatile
 8004e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e28:	f383 8811 	msr	BASEPRI, r3
 8004e2c:	f3bf 8f6f 	isb	sy
 8004e30:	f3bf 8f4f 	dsb	sy
 8004e34:	623b      	str	r3, [r7, #32]
}
 8004e36:	bf00      	nop
 8004e38:	e7fe      	b.n	8004e38 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e3a:	f001 fc3b 	bl	80066b4 <xTaskGetSchedulerState>
 8004e3e:	4603      	mov	r3, r0
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d102      	bne.n	8004e4a <xQueueGenericSend+0x9e>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d101      	bne.n	8004e4e <xQueueGenericSend+0xa2>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueGenericSend+0xa4>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueGenericSend+0xbe>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	61fb      	str	r3, [r7, #28]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e6a:	f002 fa7b 	bl	8007364 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e76:	429a      	cmp	r2, r3
 8004e78:	d302      	bcc.n	8004e80 <xQueueGenericSend+0xd4>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d129      	bne.n	8004ed4 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e80:	683a      	ldr	r2, [r7, #0]
 8004e82:	68b9      	ldr	r1, [r7, #8]
 8004e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e86:	f000 fc5e 	bl	8005746 <prvCopyDataToQueue>
 8004e8a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d010      	beq.n	8004eb6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	3324      	adds	r3, #36	; 0x24
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f001 fa4d 	bl	8006338 <xTaskRemoveFromEventList>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d013      	beq.n	8004ecc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ea4:	4b3f      	ldr	r3, [pc, #252]	; (8004fa4 <xQueueGenericSend+0x1f8>)
 8004ea6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eaa:	601a      	str	r2, [r3, #0]
 8004eac:	f3bf 8f4f 	dsb	sy
 8004eb0:	f3bf 8f6f 	isb	sy
 8004eb4:	e00a      	b.n	8004ecc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d007      	beq.n	8004ecc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004ebc:	4b39      	ldr	r3, [pc, #228]	; (8004fa4 <xQueueGenericSend+0x1f8>)
 8004ebe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	f3bf 8f4f 	dsb	sy
 8004ec8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004ecc:	f002 fa7a 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e063      	b.n	8004f9c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004eda:	f002 fa73 	bl	80073c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	e05c      	b.n	8004f9c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d106      	bne.n	8004ef6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004ee8:	f107 0314 	add.w	r3, r7, #20
 8004eec:	4618      	mov	r0, r3
 8004eee:	f001 fa87 	bl	8006400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004ef6:	f002 fa65 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004efa:	f000 fff9 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004efe:	f002 fa31 	bl	8007364 <vPortEnterCritical>
 8004f02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f04:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f08:	b25b      	sxtb	r3, r3
 8004f0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f0e:	d103      	bne.n	8004f18 <xQueueGenericSend+0x16c>
 8004f10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f12:	2200      	movs	r2, #0
 8004f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f1a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d103      	bne.n	8004f2e <xQueueGenericSend+0x182>
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f2e:	f002 fa49 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f32:	1d3a      	adds	r2, r7, #4
 8004f34:	f107 0314 	add.w	r3, r7, #20
 8004f38:	4611      	mov	r1, r2
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f001 fa76 	bl	800642c <xTaskCheckForTimeOut>
 8004f40:	4603      	mov	r3, r0
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d124      	bne.n	8004f90 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f46:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f48:	f000 fcf5 	bl	8005936 <prvIsQueueFull>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d018      	beq.n	8004f84 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f54:	3310      	adds	r3, #16
 8004f56:	687a      	ldr	r2, [r7, #4]
 8004f58:	4611      	mov	r1, r2
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	f001 f99c 	bl	8006298 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f62:	f000 fc80 	bl	8005866 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f66:	f000 ffd1 	bl	8005f0c <xTaskResumeAll>
 8004f6a:	4603      	mov	r3, r0
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f47f af7c 	bne.w	8004e6a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004f72:	4b0c      	ldr	r3, [pc, #48]	; (8004fa4 <xQueueGenericSend+0x1f8>)
 8004f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f78:	601a      	str	r2, [r3, #0]
 8004f7a:	f3bf 8f4f 	dsb	sy
 8004f7e:	f3bf 8f6f 	isb	sy
 8004f82:	e772      	b.n	8004e6a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f86:	f000 fc6e 	bl	8005866 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f8a:	f000 ffbf 	bl	8005f0c <xTaskResumeAll>
 8004f8e:	e76c      	b.n	8004e6a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f92:	f000 fc68 	bl	8005866 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f96:	f000 ffb9 	bl	8005f0c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f9a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3738      	adds	r7, #56	; 0x38
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	e000ed04 	.word	0xe000ed04

08004fa8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b090      	sub	sp, #64	; 0x40
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	60f8      	str	r0, [r7, #12]
 8004fb0:	60b9      	str	r1, [r7, #8]
 8004fb2:	607a      	str	r2, [r7, #4]
 8004fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d10a      	bne.n	8004fd6 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fc4:	f383 8811 	msr	BASEPRI, r3
 8004fc8:	f3bf 8f6f 	isb	sy
 8004fcc:	f3bf 8f4f 	dsb	sy
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004fd2:	bf00      	nop
 8004fd4:	e7fe      	b.n	8004fd4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d103      	bne.n	8004fe4 <xQueueGenericSendFromISR+0x3c>
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <xQueueGenericSendFromISR+0x40>
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e000      	b.n	8004fea <xQueueGenericSendFromISR+0x42>
 8004fe8:	2300      	movs	r3, #0
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d10a      	bne.n	8005004 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff2:	f383 8811 	msr	BASEPRI, r3
 8004ff6:	f3bf 8f6f 	isb	sy
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005000:	bf00      	nop
 8005002:	e7fe      	b.n	8005002 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	2b02      	cmp	r3, #2
 8005008:	d103      	bne.n	8005012 <xQueueGenericSendFromISR+0x6a>
 800500a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d101      	bne.n	8005016 <xQueueGenericSendFromISR+0x6e>
 8005012:	2301      	movs	r3, #1
 8005014:	e000      	b.n	8005018 <xQueueGenericSendFromISR+0x70>
 8005016:	2300      	movs	r3, #0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	623b      	str	r3, [r7, #32]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005032:	f002 fa79 	bl	8007528 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005036:	f3ef 8211 	mrs	r2, BASEPRI
 800503a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	61fa      	str	r2, [r7, #28]
 800504c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800504e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005052:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005054:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005058:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800505a:	429a      	cmp	r2, r3
 800505c:	d302      	bcc.n	8005064 <xQueueGenericSendFromISR+0xbc>
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	2b02      	cmp	r3, #2
 8005062:	d12f      	bne.n	80050c4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005066:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800506a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	68b9      	ldr	r1, [r7, #8]
 8005078:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800507a:	f000 fb64 	bl	8005746 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800507e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005086:	d112      	bne.n	80050ae <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b00      	cmp	r3, #0
 800508e:	d016      	beq.n	80050be <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005092:	3324      	adds	r3, #36	; 0x24
 8005094:	4618      	mov	r0, r3
 8005096:	f001 f94f 	bl	8006338 <xTaskRemoveFromEventList>
 800509a:	4603      	mov	r3, r0
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00e      	beq.n	80050be <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00b      	beq.n	80050be <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2201      	movs	r2, #1
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	e007      	b.n	80050be <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050b2:	3301      	adds	r3, #1
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	b25a      	sxtb	r2, r3
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050be:	2301      	movs	r3, #1
 80050c0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050c2:	e001      	b.n	80050c8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050c4:	2300      	movs	r3, #0
 80050c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050ca:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80050d2:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80050d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80050d6:	4618      	mov	r0, r3
 80050d8:	3740      	adds	r7, #64	; 0x40
 80050da:	46bd      	mov	sp, r7
 80050dc:	bd80      	pop	{r7, pc}

080050de <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80050de:	b580      	push	{r7, lr}
 80050e0:	b08e      	sub	sp, #56	; 0x38
 80050e2:	af00      	add	r7, sp, #0
 80050e4:	6078      	str	r0, [r7, #4]
 80050e6:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80050ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <xQueueGiveFromISR+0x2a>
	__asm volatile
 80050f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f6:	f383 8811 	msr	BASEPRI, r3
 80050fa:	f3bf 8f6f 	isb	sy
 80050fe:	f3bf 8f4f 	dsb	sy
 8005102:	623b      	str	r3, [r7, #32]
}
 8005104:	bf00      	nop
 8005106:	e7fe      	b.n	8005106 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00a      	beq.n	8005126 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	61fb      	str	r3, [r7, #28]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d103      	bne.n	8005136 <xQueueGiveFromISR+0x58>
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d101      	bne.n	800513a <xQueueGiveFromISR+0x5c>
 8005136:	2301      	movs	r3, #1
 8005138:	e000      	b.n	800513c <xQueueGiveFromISR+0x5e>
 800513a:	2300      	movs	r3, #0
 800513c:	2b00      	cmp	r3, #0
 800513e:	d10a      	bne.n	8005156 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	61bb      	str	r3, [r7, #24]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005156:	f002 f9e7 	bl	8007528 <vPortValidateInterruptPriority>
	__asm volatile
 800515a:	f3ef 8211 	mrs	r2, BASEPRI
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	617a      	str	r2, [r7, #20]
 8005170:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005172:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005174:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005178:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800517c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005182:	429a      	cmp	r2, r3
 8005184:	d22b      	bcs.n	80051de <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005188:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800518c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005198:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800519c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051a0:	d112      	bne.n	80051c8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d016      	beq.n	80051d8 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	3324      	adds	r3, #36	; 0x24
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 f8c2 	bl	8006338 <xTaskRemoveFromEventList>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00e      	beq.n	80051d8 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00b      	beq.n	80051d8 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	e007      	b.n	80051d8 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051cc:	3301      	adds	r3, #1
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	b25a      	sxtb	r2, r3
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80051d8:	2301      	movs	r3, #1
 80051da:	637b      	str	r3, [r7, #52]	; 0x34
 80051dc:	e001      	b.n	80051e2 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80051de:	2300      	movs	r3, #0
 80051e0:	637b      	str	r3, [r7, #52]	; 0x34
 80051e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051e4:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	f383 8811 	msr	BASEPRI, r3
}
 80051ec:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3738      	adds	r7, #56	; 0x38
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08c      	sub	sp, #48	; 0x30
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005204:	2300      	movs	r3, #0
 8005206:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	2b00      	cmp	r3, #0
 8005210:	d10a      	bne.n	8005228 <xQueueReceive+0x30>
	__asm volatile
 8005212:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005216:	f383 8811 	msr	BASEPRI, r3
 800521a:	f3bf 8f6f 	isb	sy
 800521e:	f3bf 8f4f 	dsb	sy
 8005222:	623b      	str	r3, [r7, #32]
}
 8005224:	bf00      	nop
 8005226:	e7fe      	b.n	8005226 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d103      	bne.n	8005236 <xQueueReceive+0x3e>
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <xQueueReceive+0x42>
 8005236:	2301      	movs	r3, #1
 8005238:	e000      	b.n	800523c <xQueueReceive+0x44>
 800523a:	2300      	movs	r3, #0
 800523c:	2b00      	cmp	r3, #0
 800523e:	d10a      	bne.n	8005256 <xQueueReceive+0x5e>
	__asm volatile
 8005240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005244:	f383 8811 	msr	BASEPRI, r3
 8005248:	f3bf 8f6f 	isb	sy
 800524c:	f3bf 8f4f 	dsb	sy
 8005250:	61fb      	str	r3, [r7, #28]
}
 8005252:	bf00      	nop
 8005254:	e7fe      	b.n	8005254 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005256:	f001 fa2d 	bl	80066b4 <xTaskGetSchedulerState>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d102      	bne.n	8005266 <xQueueReceive+0x6e>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueReceive+0x72>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueReceive+0x74>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueReceive+0x8e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005286:	f002 f86d 	bl	8007364 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800528a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005292:	2b00      	cmp	r3, #0
 8005294:	d01f      	beq.n	80052d6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005296:	68b9      	ldr	r1, [r7, #8]
 8005298:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529a:	f000 fabe 	bl	800581a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800529e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a0:	1e5a      	subs	r2, r3, #1
 80052a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00f      	beq.n	80052ce <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b0:	3310      	adds	r3, #16
 80052b2:	4618      	mov	r0, r3
 80052b4:	f001 f840 	bl	8006338 <xTaskRemoveFromEventList>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d007      	beq.n	80052ce <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052be:	4b3d      	ldr	r3, [pc, #244]	; (80053b4 <xQueueReceive+0x1bc>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052ce:	f002 f879 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e069      	b.n	80053aa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d103      	bne.n	80052e4 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80052dc:	f002 f872 	bl	80073c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80052e0:	2300      	movs	r3, #0
 80052e2:	e062      	b.n	80053aa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80052e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d106      	bne.n	80052f8 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80052ea:	f107 0310 	add.w	r3, r7, #16
 80052ee:	4618      	mov	r0, r3
 80052f0:	f001 f886 	bl	8006400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80052f4:	2301      	movs	r3, #1
 80052f6:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80052f8:	f002 f864 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80052fc:	f000 fdf8 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005300:	f002 f830 	bl	8007364 <vPortEnterCritical>
 8005304:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800530a:	b25b      	sxtb	r3, r3
 800530c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005310:	d103      	bne.n	800531a <xQueueReceive+0x122>
 8005312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005320:	b25b      	sxtb	r3, r3
 8005322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005326:	d103      	bne.n	8005330 <xQueueReceive+0x138>
 8005328:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800532a:	2200      	movs	r2, #0
 800532c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005330:	f002 f848 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005334:	1d3a      	adds	r2, r7, #4
 8005336:	f107 0310 	add.w	r3, r7, #16
 800533a:	4611      	mov	r1, r2
 800533c:	4618      	mov	r0, r3
 800533e:	f001 f875 	bl	800642c <xTaskCheckForTimeOut>
 8005342:	4603      	mov	r3, r0
 8005344:	2b00      	cmp	r3, #0
 8005346:	d123      	bne.n	8005390 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005348:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800534a:	f000 fade 	bl	800590a <prvIsQueueEmpty>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d017      	beq.n	8005384 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005356:	3324      	adds	r3, #36	; 0x24
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	4611      	mov	r1, r2
 800535c:	4618      	mov	r0, r3
 800535e:	f000 ff9b 	bl	8006298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005364:	f000 fa7f 	bl	8005866 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005368:	f000 fdd0 	bl	8005f0c <xTaskResumeAll>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d189      	bne.n	8005286 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005372:	4b10      	ldr	r3, [pc, #64]	; (80053b4 <xQueueReceive+0x1bc>)
 8005374:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005378:	601a      	str	r2, [r3, #0]
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	e780      	b.n	8005286 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005384:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005386:	f000 fa6e 	bl	8005866 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800538a:	f000 fdbf 	bl	8005f0c <xTaskResumeAll>
 800538e:	e77a      	b.n	8005286 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005390:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005392:	f000 fa68 	bl	8005866 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005396:	f000 fdb9 	bl	8005f0c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800539a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800539c:	f000 fab5 	bl	800590a <prvIsQueueEmpty>
 80053a0:	4603      	mov	r3, r0
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f43f af6f 	beq.w	8005286 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053a8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3730      	adds	r7, #48	; 0x30
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bd80      	pop	{r7, pc}
 80053b2:	bf00      	nop
 80053b4:	e000ed04 	.word	0xe000ed04

080053b8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b08e      	sub	sp, #56	; 0x38
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053c2:	2300      	movs	r3, #0
 80053c4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053ca:	2300      	movs	r3, #0
 80053cc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10a      	bne.n	80053ea <xQueueSemaphoreTake+0x32>
	__asm volatile
 80053d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d8:	f383 8811 	msr	BASEPRI, r3
 80053dc:	f3bf 8f6f 	isb	sy
 80053e0:	f3bf 8f4f 	dsb	sy
 80053e4:	623b      	str	r3, [r7, #32]
}
 80053e6:	bf00      	nop
 80053e8:	e7fe      	b.n	80053e8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d00a      	beq.n	8005408 <xQueueSemaphoreTake+0x50>
	__asm volatile
 80053f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f6:	f383 8811 	msr	BASEPRI, r3
 80053fa:	f3bf 8f6f 	isb	sy
 80053fe:	f3bf 8f4f 	dsb	sy
 8005402:	61fb      	str	r3, [r7, #28]
}
 8005404:	bf00      	nop
 8005406:	e7fe      	b.n	8005406 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005408:	f001 f954 	bl	80066b4 <xTaskGetSchedulerState>
 800540c:	4603      	mov	r3, r0
 800540e:	2b00      	cmp	r3, #0
 8005410:	d102      	bne.n	8005418 <xQueueSemaphoreTake+0x60>
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	2b00      	cmp	r3, #0
 8005416:	d101      	bne.n	800541c <xQueueSemaphoreTake+0x64>
 8005418:	2301      	movs	r3, #1
 800541a:	e000      	b.n	800541e <xQueueSemaphoreTake+0x66>
 800541c:	2300      	movs	r3, #0
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10a      	bne.n	8005438 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	61bb      	str	r3, [r7, #24]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005438:	f001 ff94 	bl	8007364 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800543c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005440:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005444:	2b00      	cmp	r3, #0
 8005446:	d024      	beq.n	8005492 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800544a:	1e5a      	subs	r2, r3, #1
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d104      	bne.n	8005462 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005458:	f001 faa2 	bl	80069a0 <pvTaskIncrementMutexHeldCount>
 800545c:	4602      	mov	r2, r0
 800545e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005460:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005464:	691b      	ldr	r3, [r3, #16]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00f      	beq.n	800548a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	3310      	adds	r3, #16
 800546e:	4618      	mov	r0, r3
 8005470:	f000 ff62 	bl	8006338 <xTaskRemoveFromEventList>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d007      	beq.n	800548a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800547a:	4b54      	ldr	r3, [pc, #336]	; (80055cc <xQueueSemaphoreTake+0x214>)
 800547c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005480:	601a      	str	r2, [r3, #0]
 8005482:	f3bf 8f4f 	dsb	sy
 8005486:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800548a:	f001 ff9b 	bl	80073c4 <vPortExitCritical>
				return pdPASS;
 800548e:	2301      	movs	r3, #1
 8005490:	e097      	b.n	80055c2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d111      	bne.n	80054bc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800549e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a2:	f383 8811 	msr	BASEPRI, r3
 80054a6:	f3bf 8f6f 	isb	sy
 80054aa:	f3bf 8f4f 	dsb	sy
 80054ae:	617b      	str	r3, [r7, #20]
}
 80054b0:	bf00      	nop
 80054b2:	e7fe      	b.n	80054b2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054b4:	f001 ff86 	bl	80073c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054b8:	2300      	movs	r3, #0
 80054ba:	e082      	b.n	80055c2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054c2:	f107 030c 	add.w	r3, r7, #12
 80054c6:	4618      	mov	r0, r3
 80054c8:	f000 ff9a 	bl	8006400 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054cc:	2301      	movs	r3, #1
 80054ce:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054d0:	f001 ff78 	bl	80073c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054d4:	f000 fd0c 	bl	8005ef0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d8:	f001 ff44 	bl	8007364 <vPortEnterCritical>
 80054dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054de:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueSemaphoreTake+0x13a>
 80054ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80054f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f8:	b25b      	sxtb	r3, r3
 80054fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054fe:	d103      	bne.n	8005508 <xQueueSemaphoreTake+0x150>
 8005500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005502:	2200      	movs	r2, #0
 8005504:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005508:	f001 ff5c 	bl	80073c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800550c:	463a      	mov	r2, r7
 800550e:	f107 030c 	add.w	r3, r7, #12
 8005512:	4611      	mov	r1, r2
 8005514:	4618      	mov	r0, r3
 8005516:	f000 ff89 	bl	800642c <xTaskCheckForTimeOut>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d132      	bne.n	8005586 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005522:	f000 f9f2 	bl	800590a <prvIsQueueEmpty>
 8005526:	4603      	mov	r3, r0
 8005528:	2b00      	cmp	r3, #0
 800552a:	d026      	beq.n	800557a <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800552c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d109      	bne.n	8005548 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005534:	f001 ff16 	bl	8007364 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	4618      	mov	r0, r3
 800553e:	f001 f8d7 	bl	80066f0 <xTaskPriorityInherit>
 8005542:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005544:	f001 ff3e 	bl	80073c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554a:	3324      	adds	r3, #36	; 0x24
 800554c:	683a      	ldr	r2, [r7, #0]
 800554e:	4611      	mov	r1, r2
 8005550:	4618      	mov	r0, r3
 8005552:	f000 fea1 	bl	8006298 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005556:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005558:	f000 f985 	bl	8005866 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800555c:	f000 fcd6 	bl	8005f0c <xTaskResumeAll>
 8005560:	4603      	mov	r3, r0
 8005562:	2b00      	cmp	r3, #0
 8005564:	f47f af68 	bne.w	8005438 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005568:	4b18      	ldr	r3, [pc, #96]	; (80055cc <xQueueSemaphoreTake+0x214>)
 800556a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f3bf 8f4f 	dsb	sy
 8005574:	f3bf 8f6f 	isb	sy
 8005578:	e75e      	b.n	8005438 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800557a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800557c:	f000 f973 	bl	8005866 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005580:	f000 fcc4 	bl	8005f0c <xTaskResumeAll>
 8005584:	e758      	b.n	8005438 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005588:	f000 f96d 	bl	8005866 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800558c:	f000 fcbe 	bl	8005f0c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005590:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005592:	f000 f9ba 	bl	800590a <prvIsQueueEmpty>
 8005596:	4603      	mov	r3, r0
 8005598:	2b00      	cmp	r3, #0
 800559a:	f43f af4d 	beq.w	8005438 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800559e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d00d      	beq.n	80055c0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80055a4:	f001 fede 	bl	8007364 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055aa:	f000 f8b4 	bl	8005716 <prvGetDisinheritPriorityAfterTimeout>
 80055ae:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055b6:	4618      	mov	r0, r3
 80055b8:	f001 f970 	bl	800689c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055bc:	f001 ff02 	bl	80073c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3738      	adds	r7, #56	; 0x38
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	e000ed04 	.word	0xe000ed04

080055d0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b08e      	sub	sp, #56	; 0x38
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d10a      	bne.n	80055fc <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80055e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ea:	f383 8811 	msr	BASEPRI, r3
 80055ee:	f3bf 8f6f 	isb	sy
 80055f2:	f3bf 8f4f 	dsb	sy
 80055f6:	623b      	str	r3, [r7, #32]
}
 80055f8:	bf00      	nop
 80055fa:	e7fe      	b.n	80055fa <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d103      	bne.n	800560a <xQueueReceiveFromISR+0x3a>
 8005602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005606:	2b00      	cmp	r3, #0
 8005608:	d101      	bne.n	800560e <xQueueReceiveFromISR+0x3e>
 800560a:	2301      	movs	r3, #1
 800560c:	e000      	b.n	8005610 <xQueueReceiveFromISR+0x40>
 800560e:	2300      	movs	r3, #0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d10a      	bne.n	800562a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61fb      	str	r3, [r7, #28]
}
 8005626:	bf00      	nop
 8005628:	e7fe      	b.n	8005628 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800562a:	f001 ff7d 	bl	8007528 <vPortValidateInterruptPriority>
	__asm volatile
 800562e:	f3ef 8211 	mrs	r2, BASEPRI
 8005632:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	61ba      	str	r2, [r7, #24]
 8005644:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005646:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005648:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800564a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	d02f      	beq.n	80056b6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800565c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005660:	68b9      	ldr	r1, [r7, #8]
 8005662:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005664:	f000 f8d9 	bl	800581a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005668:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566a:	1e5a      	subs	r2, r3, #1
 800566c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800566e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005670:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005678:	d112      	bne.n	80056a0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d016      	beq.n	80056b0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005684:	3310      	adds	r3, #16
 8005686:	4618      	mov	r0, r3
 8005688:	f000 fe56 	bl	8006338 <xTaskRemoveFromEventList>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d00b      	beq.n	80056b0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	601a      	str	r2, [r3, #0]
 800569e:	e007      	b.n	80056b0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80056a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056a4:	3301      	adds	r3, #1
 80056a6:	b2db      	uxtb	r3, r3
 80056a8:	b25a      	sxtb	r2, r3
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80056b0:	2301      	movs	r3, #1
 80056b2:	637b      	str	r3, [r7, #52]	; 0x34
 80056b4:	e001      	b.n	80056ba <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80056b6:	2300      	movs	r3, #0
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056bc:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	f383 8811 	msr	BASEPRI, r3
}
 80056c4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056c8:	4618      	mov	r0, r3
 80056ca:	3738      	adds	r7, #56	; 0x38
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d10a      	bne.n	80056f8 <vQueueDelete+0x28>
	__asm volatile
 80056e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e6:	f383 8811 	msr	BASEPRI, r3
 80056ea:	f3bf 8f6f 	isb	sy
 80056ee:	f3bf 8f4f 	dsb	sy
 80056f2:	60bb      	str	r3, [r7, #8]
}
 80056f4:	bf00      	nop
 80056f6:	e7fe      	b.n	80056f6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80056f8:	68f8      	ldr	r0, [r7, #12]
 80056fa:	f000 f95f 	bl	80059bc <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005704:	2b00      	cmp	r3, #0
 8005706:	d102      	bne.n	800570e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f002 f819 	bl	8007740 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800570e:	bf00      	nop
 8005710:	3710      	adds	r7, #16
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005716:	b480      	push	{r7}
 8005718:	b085      	sub	sp, #20
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	2b00      	cmp	r3, #0
 8005724:	d006      	beq.n	8005734 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005730:	60fb      	str	r3, [r7, #12]
 8005732:	e001      	b.n	8005738 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005734:	2300      	movs	r3, #0
 8005736:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005738:	68fb      	ldr	r3, [r7, #12]
	}
 800573a:	4618      	mov	r0, r3
 800573c:	3714      	adds	r7, #20
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr

08005746 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b086      	sub	sp, #24
 800574a:	af00      	add	r7, sp, #0
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005752:	2300      	movs	r3, #0
 8005754:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005760:	2b00      	cmp	r3, #0
 8005762:	d10d      	bne.n	8005780 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d14d      	bne.n	8005808 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	689b      	ldr	r3, [r3, #8]
 8005770:	4618      	mov	r0, r3
 8005772:	f001 f825 	bl	80067c0 <xTaskPriorityDisinherit>
 8005776:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	2200      	movs	r2, #0
 800577c:	609a      	str	r2, [r3, #8]
 800577e:	e043      	b.n	8005808 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d119      	bne.n	80057ba <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6858      	ldr	r0, [r3, #4]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	461a      	mov	r2, r3
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	f002 f91f 	bl	80079d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	685a      	ldr	r2, [r3, #4]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800579e:	441a      	add	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	685a      	ldr	r2, [r3, #4]
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	429a      	cmp	r2, r3
 80057ae:	d32b      	bcc.n	8005808 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	605a      	str	r2, [r3, #4]
 80057b8:	e026      	b.n	8005808 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	68d8      	ldr	r0, [r3, #12]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	461a      	mov	r2, r3
 80057c4:	68b9      	ldr	r1, [r7, #8]
 80057c6:	f002 f905 	bl	80079d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	68da      	ldr	r2, [r3, #12]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057d2:	425b      	negs	r3, r3
 80057d4:	441a      	add	r2, r3
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	68da      	ldr	r2, [r3, #12]
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	429a      	cmp	r2, r3
 80057e4:	d207      	bcs.n	80057f6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	689a      	ldr	r2, [r3, #8]
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ee:	425b      	negs	r3, r3
 80057f0:	441a      	add	r2, r3
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2b02      	cmp	r3, #2
 80057fa:	d105      	bne.n	8005808 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d002      	beq.n	8005808 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005802:	693b      	ldr	r3, [r7, #16]
 8005804:	3b01      	subs	r3, #1
 8005806:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005810:	697b      	ldr	r3, [r7, #20]
}
 8005812:	4618      	mov	r0, r3
 8005814:	3718      	adds	r7, #24
 8005816:	46bd      	mov	sp, r7
 8005818:	bd80      	pop	{r7, pc}

0800581a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b082      	sub	sp, #8
 800581e:	af00      	add	r7, sp, #0
 8005820:	6078      	str	r0, [r7, #4]
 8005822:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005828:	2b00      	cmp	r3, #0
 800582a:	d018      	beq.n	800585e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	68da      	ldr	r2, [r3, #12]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	441a      	add	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	68da      	ldr	r2, [r3, #12]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	429a      	cmp	r2, r3
 8005844:	d303      	bcc.n	800584e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	68d9      	ldr	r1, [r3, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005856:	461a      	mov	r2, r3
 8005858:	6838      	ldr	r0, [r7, #0]
 800585a:	f002 f8bb 	bl	80079d4 <memcpy>
	}
}
 800585e:	bf00      	nop
 8005860:	3708      	adds	r7, #8
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}

08005866 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005866:	b580      	push	{r7, lr}
 8005868:	b084      	sub	sp, #16
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800586e:	f001 fd79 	bl	8007364 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005878:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800587a:	e011      	b.n	80058a0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b00      	cmp	r3, #0
 8005882:	d012      	beq.n	80058aa <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	3324      	adds	r3, #36	; 0x24
 8005888:	4618      	mov	r0, r3
 800588a:	f000 fd55 	bl	8006338 <xTaskRemoveFromEventList>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005894:	f000 fe2c 	bl	80064f0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005898:	7bfb      	ldrb	r3, [r7, #15]
 800589a:	3b01      	subs	r3, #1
 800589c:	b2db      	uxtb	r3, r3
 800589e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	dce9      	bgt.n	800587c <prvUnlockQueue+0x16>
 80058a8:	e000      	b.n	80058ac <prvUnlockQueue+0x46>
					break;
 80058aa:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	22ff      	movs	r2, #255	; 0xff
 80058b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058b4:	f001 fd86 	bl	80073c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058b8:	f001 fd54 	bl	8007364 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058c2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058c4:	e011      	b.n	80058ea <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d012      	beq.n	80058f4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	3310      	adds	r3, #16
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 fd30 	bl	8006338 <xTaskRemoveFromEventList>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d001      	beq.n	80058e2 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80058de:	f000 fe07 	bl	80064f0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80058e2:	7bbb      	ldrb	r3, [r7, #14]
 80058e4:	3b01      	subs	r3, #1
 80058e6:	b2db      	uxtb	r3, r3
 80058e8:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	dce9      	bgt.n	80058c6 <prvUnlockQueue+0x60>
 80058f2:	e000      	b.n	80058f6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80058f4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	22ff      	movs	r2, #255	; 0xff
 80058fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80058fe:	f001 fd61 	bl	80073c4 <vPortExitCritical>
}
 8005902:	bf00      	nop
 8005904:	3710      	adds	r7, #16
 8005906:	46bd      	mov	sp, r7
 8005908:	bd80      	pop	{r7, pc}

0800590a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800590a:	b580      	push	{r7, lr}
 800590c:	b084      	sub	sp, #16
 800590e:	af00      	add	r7, sp, #0
 8005910:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005912:	f001 fd27 	bl	8007364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591a:	2b00      	cmp	r3, #0
 800591c:	d102      	bne.n	8005924 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800591e:	2301      	movs	r3, #1
 8005920:	60fb      	str	r3, [r7, #12]
 8005922:	e001      	b.n	8005928 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005928:	f001 fd4c 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 800592c:	68fb      	ldr	r3, [r7, #12]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3710      	adds	r7, #16
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800593e:	f001 fd11 	bl	8007364 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800594a:	429a      	cmp	r2, r3
 800594c:	d102      	bne.n	8005954 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e001      	b.n	8005958 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005958:	f001 fd34 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}
	...

08005968 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005968:	b480      	push	{r7}
 800596a:	b085      	sub	sp, #20
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
 8005970:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005972:	2300      	movs	r3, #0
 8005974:	60fb      	str	r3, [r7, #12]
 8005976:	e014      	b.n	80059a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005978:	4a0f      	ldr	r2, [pc, #60]	; (80059b8 <vQueueAddToRegistry+0x50>)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005980:	2b00      	cmp	r3, #0
 8005982:	d10b      	bne.n	800599c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005984:	490c      	ldr	r1, [pc, #48]	; (80059b8 <vQueueAddToRegistry+0x50>)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	683a      	ldr	r2, [r7, #0]
 800598a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800598e:	4a0a      	ldr	r2, [pc, #40]	; (80059b8 <vQueueAddToRegistry+0x50>)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	00db      	lsls	r3, r3, #3
 8005994:	4413      	add	r3, r2
 8005996:	687a      	ldr	r2, [r7, #4]
 8005998:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800599a:	e006      	b.n	80059aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3301      	adds	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2b07      	cmp	r3, #7
 80059a6:	d9e7      	bls.n	8005978 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059a8:	bf00      	nop
 80059aa:	bf00      	nop
 80059ac:	3714      	adds	r7, #20
 80059ae:	46bd      	mov	sp, r7
 80059b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b4:	4770      	bx	lr
 80059b6:	bf00      	nop
 80059b8:	2000085c 	.word	0x2000085c

080059bc <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80059bc:	b480      	push	{r7}
 80059be:	b085      	sub	sp, #20
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059c4:	2300      	movs	r3, #0
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e016      	b.n	80059f8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80059ca:	4a10      	ldr	r2, [pc, #64]	; (8005a0c <vQueueUnregisterQueue+0x50>)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	429a      	cmp	r2, r3
 80059d8:	d10b      	bne.n	80059f2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80059da:	4a0c      	ldr	r2, [pc, #48]	; (8005a0c <vQueueUnregisterQueue+0x50>)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2100      	movs	r1, #0
 80059e0:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80059e4:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <vQueueUnregisterQueue+0x50>)
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	00db      	lsls	r3, r3, #3
 80059ea:	4413      	add	r3, r2
 80059ec:	2200      	movs	r2, #0
 80059ee:	605a      	str	r2, [r3, #4]
				break;
 80059f0:	e006      	b.n	8005a00 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	3301      	adds	r3, #1
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2b07      	cmp	r3, #7
 80059fc:	d9e5      	bls.n	80059ca <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80059fe:	bf00      	nop
 8005a00:	bf00      	nop
 8005a02:	3714      	adds	r7, #20
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	2000085c 	.word	0x2000085c

08005a10 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a20:	f001 fca0 	bl	8007364 <vPortEnterCritical>
 8005a24:	697b      	ldr	r3, [r7, #20]
 8005a26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a2a:	b25b      	sxtb	r3, r3
 8005a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a30:	d103      	bne.n	8005a3a <vQueueWaitForMessageRestricted+0x2a>
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	2200      	movs	r2, #0
 8005a36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a3a:	697b      	ldr	r3, [r7, #20]
 8005a3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a40:	b25b      	sxtb	r3, r3
 8005a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a46:	d103      	bne.n	8005a50 <vQueueWaitForMessageRestricted+0x40>
 8005a48:	697b      	ldr	r3, [r7, #20]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a50:	f001 fcb8 	bl	80073c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d106      	bne.n	8005a6a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	3324      	adds	r3, #36	; 0x24
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	4618      	mov	r0, r3
 8005a66:	f000 fc3b 	bl	80062e0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a6a:	6978      	ldr	r0, [r7, #20]
 8005a6c:	f7ff fefb 	bl	8005866 <prvUnlockQueue>
	}
 8005a70:	bf00      	nop
 8005a72:	3718      	adds	r7, #24
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}

08005a78 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b08e      	sub	sp, #56	; 0x38
 8005a7c:	af04      	add	r7, sp, #16
 8005a7e:	60f8      	str	r0, [r7, #12]
 8005a80:	60b9      	str	r1, [r7, #8]
 8005a82:	607a      	str	r2, [r7, #4]
 8005a84:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	623b      	str	r3, [r7, #32]
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d10a      	bne.n	8005abe <xTaskCreateStatic+0x46>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	61fb      	str	r3, [r7, #28]
}
 8005aba:	bf00      	nop
 8005abc:	e7fe      	b.n	8005abc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005abe:	235c      	movs	r3, #92	; 0x5c
 8005ac0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	2b5c      	cmp	r3, #92	; 0x5c
 8005ac6:	d00a      	beq.n	8005ade <xTaskCreateStatic+0x66>
	__asm volatile
 8005ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005acc:	f383 8811 	msr	BASEPRI, r3
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	f3bf 8f4f 	dsb	sy
 8005ad8:	61bb      	str	r3, [r7, #24]
}
 8005ada:	bf00      	nop
 8005adc:	e7fe      	b.n	8005adc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005ade:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d01e      	beq.n	8005b24 <xTaskCreateStatic+0xac>
 8005ae6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d01b      	beq.n	8005b24 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005af4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005af8:	2202      	movs	r2, #2
 8005afa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005afe:	2300      	movs	r3, #0
 8005b00:	9303      	str	r3, [sp, #12]
 8005b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b04:	9302      	str	r3, [sp, #8]
 8005b06:	f107 0314 	add.w	r3, r7, #20
 8005b0a:	9301      	str	r3, [sp, #4]
 8005b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0e:	9300      	str	r3, [sp, #0]
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	687a      	ldr	r2, [r7, #4]
 8005b14:	68b9      	ldr	r1, [r7, #8]
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f000 f850 	bl	8005bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b1e:	f000 f8dd 	bl	8005cdc <prvAddNewTaskToReadyList>
 8005b22:	e001      	b.n	8005b28 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b24:	2300      	movs	r3, #0
 8005b26:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b28:	697b      	ldr	r3, [r7, #20]
	}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3728      	adds	r7, #40	; 0x28
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}

08005b32 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b32:	b580      	push	{r7, lr}
 8005b34:	b08c      	sub	sp, #48	; 0x30
 8005b36:	af04      	add	r7, sp, #16
 8005b38:	60f8      	str	r0, [r7, #12]
 8005b3a:	60b9      	str	r1, [r7, #8]
 8005b3c:	603b      	str	r3, [r7, #0]
 8005b3e:	4613      	mov	r3, r2
 8005b40:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	4618      	mov	r0, r3
 8005b48:	f001 fd2e 	bl	80075a8 <pvPortMalloc>
 8005b4c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00e      	beq.n	8005b72 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b54:	205c      	movs	r0, #92	; 0x5c
 8005b56:	f001 fd27 	bl	80075a8 <pvPortMalloc>
 8005b5a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d003      	beq.n	8005b6a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	697a      	ldr	r2, [r7, #20]
 8005b66:	631a      	str	r2, [r3, #48]	; 0x30
 8005b68:	e005      	b.n	8005b76 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b6a:	6978      	ldr	r0, [r7, #20]
 8005b6c:	f001 fde8 	bl	8007740 <vPortFree>
 8005b70:	e001      	b.n	8005b76 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005b72:	2300      	movs	r3, #0
 8005b74:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d017      	beq.n	8005bac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	2300      	movs	r3, #0
 8005b88:	9303      	str	r3, [sp, #12]
 8005b8a:	69fb      	ldr	r3, [r7, #28]
 8005b8c:	9302      	str	r3, [sp, #8]
 8005b8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b90:	9301      	str	r3, [sp, #4]
 8005b92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b94:	9300      	str	r3, [sp, #0]
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68b9      	ldr	r1, [r7, #8]
 8005b9a:	68f8      	ldr	r0, [r7, #12]
 8005b9c:	f000 f80e 	bl	8005bbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005ba0:	69f8      	ldr	r0, [r7, #28]
 8005ba2:	f000 f89b 	bl	8005cdc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ba6:	2301      	movs	r3, #1
 8005ba8:	61bb      	str	r3, [r7, #24]
 8005baa:	e002      	b.n	8005bb2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bac:	f04f 33ff 	mov.w	r3, #4294967295
 8005bb0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bb2:	69bb      	ldr	r3, [r7, #24]
	}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b088      	sub	sp, #32
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
 8005bc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bcc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	21a5      	movs	r1, #165	; 0xa5
 8005bd6:	f001 fed1 	bl	800797c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bdc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005be4:	3b01      	subs	r3, #1
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005bec:	69bb      	ldr	r3, [r7, #24]
 8005bee:	f023 0307 	bic.w	r3, r3, #7
 8005bf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005bf4:	69bb      	ldr	r3, [r7, #24]
 8005bf6:	f003 0307 	and.w	r3, r3, #7
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d00a      	beq.n	8005c14 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c02:	f383 8811 	msr	BASEPRI, r3
 8005c06:	f3bf 8f6f 	isb	sy
 8005c0a:	f3bf 8f4f 	dsb	sy
 8005c0e:	617b      	str	r3, [r7, #20]
}
 8005c10:	bf00      	nop
 8005c12:	e7fe      	b.n	8005c12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d01f      	beq.n	8005c5a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	61fb      	str	r3, [r7, #28]
 8005c1e:	e012      	b.n	8005c46 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c20:	68ba      	ldr	r2, [r7, #8]
 8005c22:	69fb      	ldr	r3, [r7, #28]
 8005c24:	4413      	add	r3, r2
 8005c26:	7819      	ldrb	r1, [r3, #0]
 8005c28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c2a:	69fb      	ldr	r3, [r7, #28]
 8005c2c:	4413      	add	r3, r2
 8005c2e:	3334      	adds	r3, #52	; 0x34
 8005c30:	460a      	mov	r2, r1
 8005c32:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c34:	68ba      	ldr	r2, [r7, #8]
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	4413      	add	r3, r2
 8005c3a:	781b      	ldrb	r3, [r3, #0]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d006      	beq.n	8005c4e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	3301      	adds	r3, #1
 8005c44:	61fb      	str	r3, [r7, #28]
 8005c46:	69fb      	ldr	r3, [r7, #28]
 8005c48:	2b0f      	cmp	r3, #15
 8005c4a:	d9e9      	bls.n	8005c20 <prvInitialiseNewTask+0x64>
 8005c4c:	e000      	b.n	8005c50 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c4e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c58:	e003      	b.n	8005c62 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c64:	2b37      	cmp	r3, #55	; 0x37
 8005c66:	d901      	bls.n	8005c6c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c68:	2337      	movs	r3, #55	; 0x37
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c70:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c76:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c80:	3304      	adds	r3, #4
 8005c82:	4618      	mov	r0, r3
 8005c84:	f7fe fe56 	bl	8004934 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8a:	3318      	adds	r3, #24
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	f7fe fe51 	bl	8004934 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c96:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c9a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ca6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	2200      	movs	r2, #0
 8005cac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	68f9      	ldr	r1, [r7, #12]
 8005cba:	69b8      	ldr	r0, [r7, #24]
 8005cbc:	f001 fa26 	bl	800710c <pxPortInitialiseStack>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005ccc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cd2:	bf00      	nop
 8005cd4:	3720      	adds	r7, #32
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
	...

08005cdc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	b082      	sub	sp, #8
 8005ce0:	af00      	add	r7, sp, #0
 8005ce2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ce4:	f001 fb3e 	bl	8007364 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ce8:	4b2d      	ldr	r3, [pc, #180]	; (8005da0 <prvAddNewTaskToReadyList+0xc4>)
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	3301      	adds	r3, #1
 8005cee:	4a2c      	ldr	r2, [pc, #176]	; (8005da0 <prvAddNewTaskToReadyList+0xc4>)
 8005cf0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005cf2:	4b2c      	ldr	r3, [pc, #176]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d109      	bne.n	8005d0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cfa:	4a2a      	ldr	r2, [pc, #168]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d00:	4b27      	ldr	r3, [pc, #156]	; (8005da0 <prvAddNewTaskToReadyList+0xc4>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d110      	bne.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d08:	f000 fc16 	bl	8006538 <prvInitialiseTaskLists>
 8005d0c:	e00d      	b.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d0e:	4b26      	ldr	r3, [pc, #152]	; (8005da8 <prvAddNewTaskToReadyList+0xcc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d109      	bne.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d16:	4b23      	ldr	r3, [pc, #140]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	429a      	cmp	r2, r3
 8005d22:	d802      	bhi.n	8005d2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d24:	4a1f      	ldr	r2, [pc, #124]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d2a:	4b20      	ldr	r3, [pc, #128]	; (8005dac <prvAddNewTaskToReadyList+0xd0>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	3301      	adds	r3, #1
 8005d30:	4a1e      	ldr	r2, [pc, #120]	; (8005dac <prvAddNewTaskToReadyList+0xd0>)
 8005d32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d34:	4b1d      	ldr	r3, [pc, #116]	; (8005dac <prvAddNewTaskToReadyList+0xd0>)
 8005d36:	681a      	ldr	r2, [r3, #0]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d40:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <prvAddNewTaskToReadyList+0xd4>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	429a      	cmp	r2, r3
 8005d46:	d903      	bls.n	8005d50 <prvAddNewTaskToReadyList+0x74>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4c:	4a18      	ldr	r2, [pc, #96]	; (8005db0 <prvAddNewTaskToReadyList+0xd4>)
 8005d4e:	6013      	str	r3, [r2, #0]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d54:	4613      	mov	r3, r2
 8005d56:	009b      	lsls	r3, r3, #2
 8005d58:	4413      	add	r3, r2
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	4a15      	ldr	r2, [pc, #84]	; (8005db4 <prvAddNewTaskToReadyList+0xd8>)
 8005d5e:	441a      	add	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3304      	adds	r3, #4
 8005d64:	4619      	mov	r1, r3
 8005d66:	4610      	mov	r0, r2
 8005d68:	f7fe fdf1 	bl	800494e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d6c:	f001 fb2a 	bl	80073c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d70:	4b0d      	ldr	r3, [pc, #52]	; (8005da8 <prvAddNewTaskToReadyList+0xcc>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00e      	beq.n	8005d96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d78:	4b0a      	ldr	r3, [pc, #40]	; (8005da4 <prvAddNewTaskToReadyList+0xc8>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d82:	429a      	cmp	r2, r3
 8005d84:	d207      	bcs.n	8005d96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d86:	4b0c      	ldr	r3, [pc, #48]	; (8005db8 <prvAddNewTaskToReadyList+0xdc>)
 8005d88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d8c:	601a      	str	r2, [r3, #0]
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d96:	bf00      	nop
 8005d98:	3708      	adds	r7, #8
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	bd80      	pop	{r7, pc}
 8005d9e:	bf00      	nop
 8005da0:	20000d70 	.word	0x20000d70
 8005da4:	2000089c 	.word	0x2000089c
 8005da8:	20000d7c 	.word	0x20000d7c
 8005dac:	20000d8c 	.word	0x20000d8c
 8005db0:	20000d78 	.word	0x20000d78
 8005db4:	200008a0 	.word	0x200008a0
 8005db8:	e000ed04 	.word	0xe000ed04

08005dbc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d017      	beq.n	8005dfe <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005dce:	4b13      	ldr	r3, [pc, #76]	; (8005e1c <vTaskDelay+0x60>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d00a      	beq.n	8005dec <vTaskDelay+0x30>
	__asm volatile
 8005dd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dda:	f383 8811 	msr	BASEPRI, r3
 8005dde:	f3bf 8f6f 	isb	sy
 8005de2:	f3bf 8f4f 	dsb	sy
 8005de6:	60bb      	str	r3, [r7, #8]
}
 8005de8:	bf00      	nop
 8005dea:	e7fe      	b.n	8005dea <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005dec:	f000 f880 	bl	8005ef0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005df0:	2100      	movs	r1, #0
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 fde8 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005df8:	f000 f888 	bl	8005f0c <xTaskResumeAll>
 8005dfc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d107      	bne.n	8005e14 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e04:	4b06      	ldr	r3, [pc, #24]	; (8005e20 <vTaskDelay+0x64>)
 8005e06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e0a:	601a      	str	r2, [r3, #0]
 8005e0c:	f3bf 8f4f 	dsb	sy
 8005e10:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e14:	bf00      	nop
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	20000d98 	.word	0x20000d98
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b08a      	sub	sp, #40	; 0x28
 8005e28:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e2e:	2300      	movs	r3, #0
 8005e30:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e32:	463a      	mov	r2, r7
 8005e34:	1d39      	adds	r1, r7, #4
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f7fe fd26 	bl	800488c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e40:	6839      	ldr	r1, [r7, #0]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	68ba      	ldr	r2, [r7, #8]
 8005e46:	9202      	str	r2, [sp, #8]
 8005e48:	9301      	str	r3, [sp, #4]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	2300      	movs	r3, #0
 8005e50:	460a      	mov	r2, r1
 8005e52:	4921      	ldr	r1, [pc, #132]	; (8005ed8 <vTaskStartScheduler+0xb4>)
 8005e54:	4821      	ldr	r0, [pc, #132]	; (8005edc <vTaskStartScheduler+0xb8>)
 8005e56:	f7ff fe0f 	bl	8005a78 <xTaskCreateStatic>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	4a20      	ldr	r2, [pc, #128]	; (8005ee0 <vTaskStartScheduler+0xbc>)
 8005e5e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e60:	4b1f      	ldr	r3, [pc, #124]	; (8005ee0 <vTaskStartScheduler+0xbc>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d002      	beq.n	8005e6e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	617b      	str	r3, [r7, #20]
 8005e6c:	e001      	b.n	8005e72 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e72:	697b      	ldr	r3, [r7, #20]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d102      	bne.n	8005e7e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e78:	f000 fdfa 	bl	8006a70 <xTimerCreateTimerTask>
 8005e7c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d116      	bne.n	8005eb2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	613b      	str	r3, [r7, #16]
}
 8005e96:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e98:	4b12      	ldr	r3, [pc, #72]	; (8005ee4 <vTaskStartScheduler+0xc0>)
 8005e9a:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005ea0:	4b11      	ldr	r3, [pc, #68]	; (8005ee8 <vTaskStartScheduler+0xc4>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005ea6:	4b11      	ldr	r3, [pc, #68]	; (8005eec <vTaskStartScheduler+0xc8>)
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005eac:	f001 f9b8 	bl	8007220 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005eb0:	e00e      	b.n	8005ed0 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005eb8:	d10a      	bne.n	8005ed0 <vTaskStartScheduler+0xac>
	__asm volatile
 8005eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebe:	f383 8811 	msr	BASEPRI, r3
 8005ec2:	f3bf 8f6f 	isb	sy
 8005ec6:	f3bf 8f4f 	dsb	sy
 8005eca:	60fb      	str	r3, [r7, #12]
}
 8005ecc:	bf00      	nop
 8005ece:	e7fe      	b.n	8005ece <vTaskStartScheduler+0xaa>
}
 8005ed0:	bf00      	nop
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}
 8005ed8:	08007a84 	.word	0x08007a84
 8005edc:	08006509 	.word	0x08006509
 8005ee0:	20000d94 	.word	0x20000d94
 8005ee4:	20000d90 	.word	0x20000d90
 8005ee8:	20000d7c 	.word	0x20000d7c
 8005eec:	20000d74 	.word	0x20000d74

08005ef0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ef4:	4b04      	ldr	r3, [pc, #16]	; (8005f08 <vTaskSuspendAll+0x18>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	4a03      	ldr	r2, [pc, #12]	; (8005f08 <vTaskSuspendAll+0x18>)
 8005efc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005efe:	bf00      	nop
 8005f00:	46bd      	mov	sp, r7
 8005f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f06:	4770      	bx	lr
 8005f08:	20000d98 	.word	0x20000d98

08005f0c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b084      	sub	sp, #16
 8005f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f12:	2300      	movs	r3, #0
 8005f14:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f16:	2300      	movs	r3, #0
 8005f18:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f1a:	4b42      	ldr	r3, [pc, #264]	; (8006024 <xTaskResumeAll+0x118>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d10a      	bne.n	8005f38 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f26:	f383 8811 	msr	BASEPRI, r3
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	f3bf 8f4f 	dsb	sy
 8005f32:	603b      	str	r3, [r7, #0]
}
 8005f34:	bf00      	nop
 8005f36:	e7fe      	b.n	8005f36 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f38:	f001 fa14 	bl	8007364 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f3c:	4b39      	ldr	r3, [pc, #228]	; (8006024 <xTaskResumeAll+0x118>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	3b01      	subs	r3, #1
 8005f42:	4a38      	ldr	r2, [pc, #224]	; (8006024 <xTaskResumeAll+0x118>)
 8005f44:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f46:	4b37      	ldr	r3, [pc, #220]	; (8006024 <xTaskResumeAll+0x118>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d162      	bne.n	8006014 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f4e:	4b36      	ldr	r3, [pc, #216]	; (8006028 <xTaskResumeAll+0x11c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d05e      	beq.n	8006014 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f56:	e02f      	b.n	8005fb8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f58:	4b34      	ldr	r3, [pc, #208]	; (800602c <xTaskResumeAll+0x120>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	68db      	ldr	r3, [r3, #12]
 8005f5e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	3318      	adds	r3, #24
 8005f64:	4618      	mov	r0, r3
 8005f66:	f7fe fd4f 	bl	8004a08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	3304      	adds	r3, #4
 8005f6e:	4618      	mov	r0, r3
 8005f70:	f7fe fd4a 	bl	8004a08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f78:	4b2d      	ldr	r3, [pc, #180]	; (8006030 <xTaskResumeAll+0x124>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d903      	bls.n	8005f88 <xTaskResumeAll+0x7c>
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <xTaskResumeAll+0x124>)
 8005f86:	6013      	str	r3, [r2, #0]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	009b      	lsls	r3, r3, #2
 8005f94:	4a27      	ldr	r2, [pc, #156]	; (8006034 <xTaskResumeAll+0x128>)
 8005f96:	441a      	add	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	3304      	adds	r3, #4
 8005f9c:	4619      	mov	r1, r3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	f7fe fcd5 	bl	800494e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fa8:	4b23      	ldr	r3, [pc, #140]	; (8006038 <xTaskResumeAll+0x12c>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d302      	bcc.n	8005fb8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005fb2:	4b22      	ldr	r3, [pc, #136]	; (800603c <xTaskResumeAll+0x130>)
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fb8:	4b1c      	ldr	r3, [pc, #112]	; (800602c <xTaskResumeAll+0x120>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1cb      	bne.n	8005f58 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d001      	beq.n	8005fca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005fc6:	f000 fb55 	bl	8006674 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005fca:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <xTaskResumeAll+0x134>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d010      	beq.n	8005ff8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fd6:	f000 f847 	bl	8006068 <xTaskIncrementTick>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fe0:	4b16      	ldr	r3, [pc, #88]	; (800603c <xTaskResumeAll+0x130>)
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	3b01      	subs	r3, #1
 8005fea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f1      	bne.n	8005fd6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <xTaskResumeAll+0x134>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ff8:	4b10      	ldr	r3, [pc, #64]	; (800603c <xTaskResumeAll+0x130>)
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d009      	beq.n	8006014 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006000:	2301      	movs	r3, #1
 8006002:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006004:	4b0f      	ldr	r3, [pc, #60]	; (8006044 <xTaskResumeAll+0x138>)
 8006006:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800600a:	601a      	str	r2, [r3, #0]
 800600c:	f3bf 8f4f 	dsb	sy
 8006010:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006014:	f001 f9d6 	bl	80073c4 <vPortExitCritical>

	return xAlreadyYielded;
 8006018:	68bb      	ldr	r3, [r7, #8]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3710      	adds	r7, #16
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000d98 	.word	0x20000d98
 8006028:	20000d70 	.word	0x20000d70
 800602c:	20000d30 	.word	0x20000d30
 8006030:	20000d78 	.word	0x20000d78
 8006034:	200008a0 	.word	0x200008a0
 8006038:	2000089c 	.word	0x2000089c
 800603c:	20000d84 	.word	0x20000d84
 8006040:	20000d80 	.word	0x20000d80
 8006044:	e000ed04 	.word	0xe000ed04

08006048 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800604e:	4b05      	ldr	r3, [pc, #20]	; (8006064 <xTaskGetTickCount+0x1c>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006054:	687b      	ldr	r3, [r7, #4]
}
 8006056:	4618      	mov	r0, r3
 8006058:	370c      	adds	r7, #12
 800605a:	46bd      	mov	sp, r7
 800605c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006060:	4770      	bx	lr
 8006062:	bf00      	nop
 8006064:	20000d74 	.word	0x20000d74

08006068 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b086      	sub	sp, #24
 800606c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800606e:	2300      	movs	r3, #0
 8006070:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006072:	4b4f      	ldr	r3, [pc, #316]	; (80061b0 <xTaskIncrementTick+0x148>)
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	2b00      	cmp	r3, #0
 8006078:	f040 808f 	bne.w	800619a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800607c:	4b4d      	ldr	r3, [pc, #308]	; (80061b4 <xTaskIncrementTick+0x14c>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3301      	adds	r3, #1
 8006082:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006084:	4a4b      	ldr	r2, [pc, #300]	; (80061b4 <xTaskIncrementTick+0x14c>)
 8006086:	693b      	ldr	r3, [r7, #16]
 8006088:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d120      	bne.n	80060d2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006090:	4b49      	ldr	r3, [pc, #292]	; (80061b8 <xTaskIncrementTick+0x150>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d00a      	beq.n	80060b0 <xTaskIncrementTick+0x48>
	__asm volatile
 800609a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800609e:	f383 8811 	msr	BASEPRI, r3
 80060a2:	f3bf 8f6f 	isb	sy
 80060a6:	f3bf 8f4f 	dsb	sy
 80060aa:	603b      	str	r3, [r7, #0]
}
 80060ac:	bf00      	nop
 80060ae:	e7fe      	b.n	80060ae <xTaskIncrementTick+0x46>
 80060b0:	4b41      	ldr	r3, [pc, #260]	; (80061b8 <xTaskIncrementTick+0x150>)
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	60fb      	str	r3, [r7, #12]
 80060b6:	4b41      	ldr	r3, [pc, #260]	; (80061bc <xTaskIncrementTick+0x154>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a3f      	ldr	r2, [pc, #252]	; (80061b8 <xTaskIncrementTick+0x150>)
 80060bc:	6013      	str	r3, [r2, #0]
 80060be:	4a3f      	ldr	r2, [pc, #252]	; (80061bc <xTaskIncrementTick+0x154>)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	6013      	str	r3, [r2, #0]
 80060c4:	4b3e      	ldr	r3, [pc, #248]	; (80061c0 <xTaskIncrementTick+0x158>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	4a3d      	ldr	r2, [pc, #244]	; (80061c0 <xTaskIncrementTick+0x158>)
 80060cc:	6013      	str	r3, [r2, #0]
 80060ce:	f000 fad1 	bl	8006674 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80060d2:	4b3c      	ldr	r3, [pc, #240]	; (80061c4 <xTaskIncrementTick+0x15c>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	693a      	ldr	r2, [r7, #16]
 80060d8:	429a      	cmp	r2, r3
 80060da:	d349      	bcc.n	8006170 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060dc:	4b36      	ldr	r3, [pc, #216]	; (80061b8 <xTaskIncrementTick+0x150>)
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d104      	bne.n	80060f0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e6:	4b37      	ldr	r3, [pc, #220]	; (80061c4 <xTaskIncrementTick+0x15c>)
 80060e8:	f04f 32ff 	mov.w	r2, #4294967295
 80060ec:	601a      	str	r2, [r3, #0]
					break;
 80060ee:	e03f      	b.n	8006170 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f0:	4b31      	ldr	r3, [pc, #196]	; (80061b8 <xTaskIncrementTick+0x150>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	68db      	ldr	r3, [r3, #12]
 80060f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	429a      	cmp	r2, r3
 8006106:	d203      	bcs.n	8006110 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006108:	4a2e      	ldr	r2, [pc, #184]	; (80061c4 <xTaskIncrementTick+0x15c>)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800610e:	e02f      	b.n	8006170 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	3304      	adds	r3, #4
 8006114:	4618      	mov	r0, r3
 8006116:	f7fe fc77 	bl	8004a08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800611e:	2b00      	cmp	r3, #0
 8006120:	d004      	beq.n	800612c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	3318      	adds	r3, #24
 8006126:	4618      	mov	r0, r3
 8006128:	f7fe fc6e 	bl	8004a08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800612c:	68bb      	ldr	r3, [r7, #8]
 800612e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <xTaskIncrementTick+0x160>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	429a      	cmp	r2, r3
 8006136:	d903      	bls.n	8006140 <xTaskIncrementTick+0xd8>
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800613c:	4a22      	ldr	r2, [pc, #136]	; (80061c8 <xTaskIncrementTick+0x160>)
 800613e:	6013      	str	r3, [r2, #0]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <xTaskIncrementTick+0x164>)
 800614e:	441a      	add	r2, r3
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	3304      	adds	r3, #4
 8006154:	4619      	mov	r1, r3
 8006156:	4610      	mov	r0, r2
 8006158:	f7fe fbf9 	bl	800494e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006160:	4b1b      	ldr	r3, [pc, #108]	; (80061d0 <xTaskIncrementTick+0x168>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006166:	429a      	cmp	r2, r3
 8006168:	d3b8      	bcc.n	80060dc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800616a:	2301      	movs	r3, #1
 800616c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800616e:	e7b5      	b.n	80060dc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006170:	4b17      	ldr	r3, [pc, #92]	; (80061d0 <xTaskIncrementTick+0x168>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006176:	4915      	ldr	r1, [pc, #84]	; (80061cc <xTaskIncrementTick+0x164>)
 8006178:	4613      	mov	r3, r2
 800617a:	009b      	lsls	r3, r3, #2
 800617c:	4413      	add	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	440b      	add	r3, r1
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	2b01      	cmp	r3, #1
 8006186:	d901      	bls.n	800618c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006188:	2301      	movs	r3, #1
 800618a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800618c:	4b11      	ldr	r3, [pc, #68]	; (80061d4 <xTaskIncrementTick+0x16c>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d007      	beq.n	80061a4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006194:	2301      	movs	r3, #1
 8006196:	617b      	str	r3, [r7, #20]
 8006198:	e004      	b.n	80061a4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800619a:	4b0f      	ldr	r3, [pc, #60]	; (80061d8 <xTaskIncrementTick+0x170>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	4a0d      	ldr	r2, [pc, #52]	; (80061d8 <xTaskIncrementTick+0x170>)
 80061a2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80061a4:	697b      	ldr	r3, [r7, #20]
}
 80061a6:	4618      	mov	r0, r3
 80061a8:	3718      	adds	r7, #24
 80061aa:	46bd      	mov	sp, r7
 80061ac:	bd80      	pop	{r7, pc}
 80061ae:	bf00      	nop
 80061b0:	20000d98 	.word	0x20000d98
 80061b4:	20000d74 	.word	0x20000d74
 80061b8:	20000d28 	.word	0x20000d28
 80061bc:	20000d2c 	.word	0x20000d2c
 80061c0:	20000d88 	.word	0x20000d88
 80061c4:	20000d90 	.word	0x20000d90
 80061c8:	20000d78 	.word	0x20000d78
 80061cc:	200008a0 	.word	0x200008a0
 80061d0:	2000089c 	.word	0x2000089c
 80061d4:	20000d84 	.word	0x20000d84
 80061d8:	20000d80 	.word	0x20000d80

080061dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061dc:	b480      	push	{r7}
 80061de:	b085      	sub	sp, #20
 80061e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061e2:	4b28      	ldr	r3, [pc, #160]	; (8006284 <vTaskSwitchContext+0xa8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061ea:	4b27      	ldr	r3, [pc, #156]	; (8006288 <vTaskSwitchContext+0xac>)
 80061ec:	2201      	movs	r2, #1
 80061ee:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061f0:	e041      	b.n	8006276 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 80061f2:	4b25      	ldr	r3, [pc, #148]	; (8006288 <vTaskSwitchContext+0xac>)
 80061f4:	2200      	movs	r2, #0
 80061f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061f8:	4b24      	ldr	r3, [pc, #144]	; (800628c <vTaskSwitchContext+0xb0>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	60fb      	str	r3, [r7, #12]
 80061fe:	e010      	b.n	8006222 <vTaskSwitchContext+0x46>
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d10a      	bne.n	800621c <vTaskSwitchContext+0x40>
	__asm volatile
 8006206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620a:	f383 8811 	msr	BASEPRI, r3
 800620e:	f3bf 8f6f 	isb	sy
 8006212:	f3bf 8f4f 	dsb	sy
 8006216:	607b      	str	r3, [r7, #4]
}
 8006218:	bf00      	nop
 800621a:	e7fe      	b.n	800621a <vTaskSwitchContext+0x3e>
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	3b01      	subs	r3, #1
 8006220:	60fb      	str	r3, [r7, #12]
 8006222:	491b      	ldr	r1, [pc, #108]	; (8006290 <vTaskSwitchContext+0xb4>)
 8006224:	68fa      	ldr	r2, [r7, #12]
 8006226:	4613      	mov	r3, r2
 8006228:	009b      	lsls	r3, r3, #2
 800622a:	4413      	add	r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d0e4      	beq.n	8006200 <vTaskSwitchContext+0x24>
 8006236:	68fa      	ldr	r2, [r7, #12]
 8006238:	4613      	mov	r3, r2
 800623a:	009b      	lsls	r3, r3, #2
 800623c:	4413      	add	r3, r2
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4a13      	ldr	r2, [pc, #76]	; (8006290 <vTaskSwitchContext+0xb4>)
 8006242:	4413      	add	r3, r2
 8006244:	60bb      	str	r3, [r7, #8]
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	685b      	ldr	r3, [r3, #4]
 800624a:	685a      	ldr	r2, [r3, #4]
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	605a      	str	r2, [r3, #4]
 8006250:	68bb      	ldr	r3, [r7, #8]
 8006252:	685a      	ldr	r2, [r3, #4]
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	3308      	adds	r3, #8
 8006258:	429a      	cmp	r2, r3
 800625a:	d104      	bne.n	8006266 <vTaskSwitchContext+0x8a>
 800625c:	68bb      	ldr	r3, [r7, #8]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	685a      	ldr	r2, [r3, #4]
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	685b      	ldr	r3, [r3, #4]
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a09      	ldr	r2, [pc, #36]	; (8006294 <vTaskSwitchContext+0xb8>)
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	4a06      	ldr	r2, [pc, #24]	; (800628c <vTaskSwitchContext+0xb0>)
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	6013      	str	r3, [r2, #0]
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20000d98 	.word	0x20000d98
 8006288:	20000d84 	.word	0x20000d84
 800628c:	20000d78 	.word	0x20000d78
 8006290:	200008a0 	.word	0x200008a0
 8006294:	2000089c 	.word	0x2000089c

08006298 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d10a      	bne.n	80062be <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80062a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ac:	f383 8811 	msr	BASEPRI, r3
 80062b0:	f3bf 8f6f 	isb	sy
 80062b4:	f3bf 8f4f 	dsb	sy
 80062b8:	60fb      	str	r3, [r7, #12]
}
 80062ba:	bf00      	nop
 80062bc:	e7fe      	b.n	80062bc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062be:	4b07      	ldr	r3, [pc, #28]	; (80062dc <vTaskPlaceOnEventList+0x44>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	3318      	adds	r3, #24
 80062c4:	4619      	mov	r1, r3
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f7fe fb65 	bl	8004996 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062cc:	2101      	movs	r1, #1
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	f000 fb7a 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
}
 80062d4:	bf00      	nop
 80062d6:	3710      	adds	r7, #16
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	2000089c 	.word	0x2000089c

080062e0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b086      	sub	sp, #24
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10a      	bne.n	8006308 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f6:	f383 8811 	msr	BASEPRI, r3
 80062fa:	f3bf 8f6f 	isb	sy
 80062fe:	f3bf 8f4f 	dsb	sy
 8006302:	617b      	str	r3, [r7, #20]
}
 8006304:	bf00      	nop
 8006306:	e7fe      	b.n	8006306 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006308:	4b0a      	ldr	r3, [pc, #40]	; (8006334 <vTaskPlaceOnEventListRestricted+0x54>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3318      	adds	r3, #24
 800630e:	4619      	mov	r1, r3
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f7fe fb1c 	bl	800494e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d002      	beq.n	8006322 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800631c:	f04f 33ff 	mov.w	r3, #4294967295
 8006320:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	68b8      	ldr	r0, [r7, #8]
 8006326:	f000 fb4f 	bl	80069c8 <prvAddCurrentTaskToDelayedList>
	}
 800632a:	bf00      	nop
 800632c:	3718      	adds	r7, #24
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	2000089c 	.word	0x2000089c

08006338 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68db      	ldr	r3, [r3, #12]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d10a      	bne.n	8006364 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800634e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006352:	f383 8811 	msr	BASEPRI, r3
 8006356:	f3bf 8f6f 	isb	sy
 800635a:	f3bf 8f4f 	dsb	sy
 800635e:	60fb      	str	r3, [r7, #12]
}
 8006360:	bf00      	nop
 8006362:	e7fe      	b.n	8006362 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	3318      	adds	r3, #24
 8006368:	4618      	mov	r0, r3
 800636a:	f7fe fb4d 	bl	8004a08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800636e:	4b1e      	ldr	r3, [pc, #120]	; (80063e8 <xTaskRemoveFromEventList+0xb0>)
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d11d      	bne.n	80063b2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	3304      	adds	r3, #4
 800637a:	4618      	mov	r0, r3
 800637c:	f7fe fb44 	bl	8004a08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006380:	693b      	ldr	r3, [r7, #16]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4b19      	ldr	r3, [pc, #100]	; (80063ec <xTaskRemoveFromEventList+0xb4>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	429a      	cmp	r2, r3
 800638a:	d903      	bls.n	8006394 <xTaskRemoveFromEventList+0x5c>
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006390:	4a16      	ldr	r2, [pc, #88]	; (80063ec <xTaskRemoveFromEventList+0xb4>)
 8006392:	6013      	str	r3, [r2, #0]
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006398:	4613      	mov	r3, r2
 800639a:	009b      	lsls	r3, r3, #2
 800639c:	4413      	add	r3, r2
 800639e:	009b      	lsls	r3, r3, #2
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <xTaskRemoveFromEventList+0xb8>)
 80063a2:	441a      	add	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	3304      	adds	r3, #4
 80063a8:	4619      	mov	r1, r3
 80063aa:	4610      	mov	r0, r2
 80063ac:	f7fe facf 	bl	800494e <vListInsertEnd>
 80063b0:	e005      	b.n	80063be <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	3318      	adds	r3, #24
 80063b6:	4619      	mov	r1, r3
 80063b8:	480e      	ldr	r0, [pc, #56]	; (80063f4 <xTaskRemoveFromEventList+0xbc>)
 80063ba:	f7fe fac8 	bl	800494e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80063be:	693b      	ldr	r3, [r7, #16]
 80063c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063c2:	4b0d      	ldr	r3, [pc, #52]	; (80063f8 <xTaskRemoveFromEventList+0xc0>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d905      	bls.n	80063d8 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063d0:	4b0a      	ldr	r3, [pc, #40]	; (80063fc <xTaskRemoveFromEventList+0xc4>)
 80063d2:	2201      	movs	r2, #1
 80063d4:	601a      	str	r2, [r3, #0]
 80063d6:	e001      	b.n	80063dc <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063dc:	697b      	ldr	r3, [r7, #20]
}
 80063de:	4618      	mov	r0, r3
 80063e0:	3718      	adds	r7, #24
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	20000d98 	.word	0x20000d98
 80063ec:	20000d78 	.word	0x20000d78
 80063f0:	200008a0 	.word	0x200008a0
 80063f4:	20000d30 	.word	0x20000d30
 80063f8:	2000089c 	.word	0x2000089c
 80063fc:	20000d84 	.word	0x20000d84

08006400 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006408:	4b06      	ldr	r3, [pc, #24]	; (8006424 <vTaskInternalSetTimeOutState+0x24>)
 800640a:	681a      	ldr	r2, [r3, #0]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006410:	4b05      	ldr	r3, [pc, #20]	; (8006428 <vTaskInternalSetTimeOutState+0x28>)
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	605a      	str	r2, [r3, #4]
}
 8006418:	bf00      	nop
 800641a:	370c      	adds	r7, #12
 800641c:	46bd      	mov	sp, r7
 800641e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006422:	4770      	bx	lr
 8006424:	20000d88 	.word	0x20000d88
 8006428:	20000d74 	.word	0x20000d74

0800642c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b088      	sub	sp, #32
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
 8006434:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	613b      	str	r3, [r7, #16]
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d10a      	bne.n	800646e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006458:	f04f 0350 	mov.w	r3, #80	; 0x50
 800645c:	f383 8811 	msr	BASEPRI, r3
 8006460:	f3bf 8f6f 	isb	sy
 8006464:	f3bf 8f4f 	dsb	sy
 8006468:	60fb      	str	r3, [r7, #12]
}
 800646a:	bf00      	nop
 800646c:	e7fe      	b.n	800646c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800646e:	f000 ff79 	bl	8007364 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006472:	4b1d      	ldr	r3, [pc, #116]	; (80064e8 <xTaskCheckForTimeOut+0xbc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	685b      	ldr	r3, [r3, #4]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	1ad3      	subs	r3, r2, r3
 8006480:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800648a:	d102      	bne.n	8006492 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800648c:	2300      	movs	r3, #0
 800648e:	61fb      	str	r3, [r7, #28]
 8006490:	e023      	b.n	80064da <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	4b15      	ldr	r3, [pc, #84]	; (80064ec <xTaskCheckForTimeOut+0xc0>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	429a      	cmp	r2, r3
 800649c:	d007      	beq.n	80064ae <xTaskCheckForTimeOut+0x82>
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	685b      	ldr	r3, [r3, #4]
 80064a2:	69ba      	ldr	r2, [r7, #24]
 80064a4:	429a      	cmp	r2, r3
 80064a6:	d302      	bcc.n	80064ae <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064a8:	2301      	movs	r3, #1
 80064aa:	61fb      	str	r3, [r7, #28]
 80064ac:	e015      	b.n	80064da <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	697a      	ldr	r2, [r7, #20]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d20b      	bcs.n	80064d0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	697b      	ldr	r3, [r7, #20]
 80064be:	1ad2      	subs	r2, r2, r3
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f7ff ff9b 	bl	8006400 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064ca:	2300      	movs	r3, #0
 80064cc:	61fb      	str	r3, [r7, #28]
 80064ce:	e004      	b.n	80064da <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	2200      	movs	r2, #0
 80064d4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064d6:	2301      	movs	r3, #1
 80064d8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064da:	f000 ff73 	bl	80073c4 <vPortExitCritical>

	return xReturn;
 80064de:	69fb      	ldr	r3, [r7, #28]
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3720      	adds	r7, #32
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}
 80064e8:	20000d74 	.word	0x20000d74
 80064ec:	20000d88 	.word	0x20000d88

080064f0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064f4:	4b03      	ldr	r3, [pc, #12]	; (8006504 <vTaskMissedYield+0x14>)
 80064f6:	2201      	movs	r2, #1
 80064f8:	601a      	str	r2, [r3, #0]
}
 80064fa:	bf00      	nop
 80064fc:	46bd      	mov	sp, r7
 80064fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006502:	4770      	bx	lr
 8006504:	20000d84 	.word	0x20000d84

08006508 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006508:	b580      	push	{r7, lr}
 800650a:	b082      	sub	sp, #8
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006510:	f000 f852 	bl	80065b8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006514:	4b06      	ldr	r3, [pc, #24]	; (8006530 <prvIdleTask+0x28>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b01      	cmp	r3, #1
 800651a:	d9f9      	bls.n	8006510 <prvIdleTask+0x8>
			{
				taskYIELD();
 800651c:	4b05      	ldr	r3, [pc, #20]	; (8006534 <prvIdleTask+0x2c>)
 800651e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006522:	601a      	str	r2, [r3, #0]
 8006524:	f3bf 8f4f 	dsb	sy
 8006528:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800652c:	e7f0      	b.n	8006510 <prvIdleTask+0x8>
 800652e:	bf00      	nop
 8006530:	200008a0 	.word	0x200008a0
 8006534:	e000ed04 	.word	0xe000ed04

08006538 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006538:	b580      	push	{r7, lr}
 800653a:	b082      	sub	sp, #8
 800653c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800653e:	2300      	movs	r3, #0
 8006540:	607b      	str	r3, [r7, #4]
 8006542:	e00c      	b.n	800655e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	4613      	mov	r3, r2
 8006548:	009b      	lsls	r3, r3, #2
 800654a:	4413      	add	r3, r2
 800654c:	009b      	lsls	r3, r3, #2
 800654e:	4a12      	ldr	r2, [pc, #72]	; (8006598 <prvInitialiseTaskLists+0x60>)
 8006550:	4413      	add	r3, r2
 8006552:	4618      	mov	r0, r3
 8006554:	f7fe f9ce 	bl	80048f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3301      	adds	r3, #1
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2b37      	cmp	r3, #55	; 0x37
 8006562:	d9ef      	bls.n	8006544 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006564:	480d      	ldr	r0, [pc, #52]	; (800659c <prvInitialiseTaskLists+0x64>)
 8006566:	f7fe f9c5 	bl	80048f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800656a:	480d      	ldr	r0, [pc, #52]	; (80065a0 <prvInitialiseTaskLists+0x68>)
 800656c:	f7fe f9c2 	bl	80048f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006570:	480c      	ldr	r0, [pc, #48]	; (80065a4 <prvInitialiseTaskLists+0x6c>)
 8006572:	f7fe f9bf 	bl	80048f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006576:	480c      	ldr	r0, [pc, #48]	; (80065a8 <prvInitialiseTaskLists+0x70>)
 8006578:	f7fe f9bc 	bl	80048f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800657c:	480b      	ldr	r0, [pc, #44]	; (80065ac <prvInitialiseTaskLists+0x74>)
 800657e:	f7fe f9b9 	bl	80048f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006582:	4b0b      	ldr	r3, [pc, #44]	; (80065b0 <prvInitialiseTaskLists+0x78>)
 8006584:	4a05      	ldr	r2, [pc, #20]	; (800659c <prvInitialiseTaskLists+0x64>)
 8006586:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006588:	4b0a      	ldr	r3, [pc, #40]	; (80065b4 <prvInitialiseTaskLists+0x7c>)
 800658a:	4a05      	ldr	r2, [pc, #20]	; (80065a0 <prvInitialiseTaskLists+0x68>)
 800658c:	601a      	str	r2, [r3, #0]
}
 800658e:	bf00      	nop
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	200008a0 	.word	0x200008a0
 800659c:	20000d00 	.word	0x20000d00
 80065a0:	20000d14 	.word	0x20000d14
 80065a4:	20000d30 	.word	0x20000d30
 80065a8:	20000d44 	.word	0x20000d44
 80065ac:	20000d5c 	.word	0x20000d5c
 80065b0:	20000d28 	.word	0x20000d28
 80065b4:	20000d2c 	.word	0x20000d2c

080065b8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065be:	e019      	b.n	80065f4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80065c0:	f000 fed0 	bl	8007364 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065c4:	4b10      	ldr	r3, [pc, #64]	; (8006608 <prvCheckTasksWaitingTermination+0x50>)
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	68db      	ldr	r3, [r3, #12]
 80065ca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe fa19 	bl	8004a08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <prvCheckTasksWaitingTermination+0x54>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	3b01      	subs	r3, #1
 80065dc:	4a0b      	ldr	r2, [pc, #44]	; (800660c <prvCheckTasksWaitingTermination+0x54>)
 80065de:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <prvCheckTasksWaitingTermination+0x58>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	3b01      	subs	r3, #1
 80065e6:	4a0a      	ldr	r2, [pc, #40]	; (8006610 <prvCheckTasksWaitingTermination+0x58>)
 80065e8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065ea:	f000 feeb 	bl	80073c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 f810 	bl	8006614 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065f4:	4b06      	ldr	r3, [pc, #24]	; (8006610 <prvCheckTasksWaitingTermination+0x58>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d1e1      	bne.n	80065c0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065fc:	bf00      	nop
 80065fe:	bf00      	nop
 8006600:	3708      	adds	r7, #8
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	20000d44 	.word	0x20000d44
 800660c:	20000d70 	.word	0x20000d70
 8006610:	20000d58 	.word	0x20000d58

08006614 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b084      	sub	sp, #16
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006622:	2b00      	cmp	r3, #0
 8006624:	d108      	bne.n	8006638 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4618      	mov	r0, r3
 800662c:	f001 f888 	bl	8007740 <vPortFree>
				vPortFree( pxTCB );
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f001 f885 	bl	8007740 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006636:	e018      	b.n	800666a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800663e:	2b01      	cmp	r3, #1
 8006640:	d103      	bne.n	800664a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f001 f87c 	bl	8007740 <vPortFree>
	}
 8006648:	e00f      	b.n	800666a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006650:	2b02      	cmp	r3, #2
 8006652:	d00a      	beq.n	800666a <prvDeleteTCB+0x56>
	__asm volatile
 8006654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	60fb      	str	r3, [r7, #12]
}
 8006666:	bf00      	nop
 8006668:	e7fe      	b.n	8006668 <prvDeleteTCB+0x54>
	}
 800666a:	bf00      	nop
 800666c:	3710      	adds	r7, #16
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}
	...

08006674 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006674:	b480      	push	{r7}
 8006676:	b083      	sub	sp, #12
 8006678:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <prvResetNextTaskUnblockTime+0x38>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d104      	bne.n	800668e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006684:	4b0a      	ldr	r3, [pc, #40]	; (80066b0 <prvResetNextTaskUnblockTime+0x3c>)
 8006686:	f04f 32ff 	mov.w	r2, #4294967295
 800668a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800668c:	e008      	b.n	80066a0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800668e:	4b07      	ldr	r3, [pc, #28]	; (80066ac <prvResetNextTaskUnblockTime+0x38>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	68db      	ldr	r3, [r3, #12]
 8006694:	68db      	ldr	r3, [r3, #12]
 8006696:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	4a04      	ldr	r2, [pc, #16]	; (80066b0 <prvResetNextTaskUnblockTime+0x3c>)
 800669e:	6013      	str	r3, [r2, #0]
}
 80066a0:	bf00      	nop
 80066a2:	370c      	adds	r7, #12
 80066a4:	46bd      	mov	sp, r7
 80066a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066aa:	4770      	bx	lr
 80066ac:	20000d28 	.word	0x20000d28
 80066b0:	20000d90 	.word	0x20000d90

080066b4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066b4:	b480      	push	{r7}
 80066b6:	b083      	sub	sp, #12
 80066b8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066ba:	4b0b      	ldr	r3, [pc, #44]	; (80066e8 <xTaskGetSchedulerState+0x34>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066c2:	2301      	movs	r3, #1
 80066c4:	607b      	str	r3, [r7, #4]
 80066c6:	e008      	b.n	80066da <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c8:	4b08      	ldr	r3, [pc, #32]	; (80066ec <xTaskGetSchedulerState+0x38>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066d0:	2302      	movs	r3, #2
 80066d2:	607b      	str	r3, [r7, #4]
 80066d4:	e001      	b.n	80066da <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066d6:	2300      	movs	r3, #0
 80066d8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066da:	687b      	ldr	r3, [r7, #4]
	}
 80066dc:	4618      	mov	r0, r3
 80066de:	370c      	adds	r7, #12
 80066e0:	46bd      	mov	sp, r7
 80066e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e6:	4770      	bx	lr
 80066e8:	20000d7c 	.word	0x20000d7c
 80066ec:	20000d98 	.word	0x20000d98

080066f0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066fc:	2300      	movs	r3, #0
 80066fe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2b00      	cmp	r3, #0
 8006704:	d051      	beq.n	80067aa <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670a:	4b2a      	ldr	r3, [pc, #168]	; (80067b4 <xTaskPriorityInherit+0xc4>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	429a      	cmp	r2, r3
 8006712:	d241      	bcs.n	8006798 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	2b00      	cmp	r3, #0
 800671a:	db06      	blt.n	800672a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800671c:	4b25      	ldr	r3, [pc, #148]	; (80067b4 <xTaskPriorityInherit+0xc4>)
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	6959      	ldr	r1, [r3, #20]
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	4613      	mov	r3, r2
 8006734:	009b      	lsls	r3, r3, #2
 8006736:	4413      	add	r3, r2
 8006738:	009b      	lsls	r3, r3, #2
 800673a:	4a1f      	ldr	r2, [pc, #124]	; (80067b8 <xTaskPriorityInherit+0xc8>)
 800673c:	4413      	add	r3, r2
 800673e:	4299      	cmp	r1, r3
 8006740:	d122      	bne.n	8006788 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	3304      	adds	r3, #4
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe f95e 	bl	8004a08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800674c:	4b19      	ldr	r3, [pc, #100]	; (80067b4 <xTaskPriorityInherit+0xc4>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800675a:	4b18      	ldr	r3, [pc, #96]	; (80067bc <xTaskPriorityInherit+0xcc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	429a      	cmp	r2, r3
 8006760:	d903      	bls.n	800676a <xTaskPriorityInherit+0x7a>
 8006762:	68bb      	ldr	r3, [r7, #8]
 8006764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006766:	4a15      	ldr	r2, [pc, #84]	; (80067bc <xTaskPriorityInherit+0xcc>)
 8006768:	6013      	str	r3, [r2, #0]
 800676a:	68bb      	ldr	r3, [r7, #8]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	4a10      	ldr	r2, [pc, #64]	; (80067b8 <xTaskPriorityInherit+0xc8>)
 8006778:	441a      	add	r2, r3
 800677a:	68bb      	ldr	r3, [r7, #8]
 800677c:	3304      	adds	r3, #4
 800677e:	4619      	mov	r1, r3
 8006780:	4610      	mov	r0, r2
 8006782:	f7fe f8e4 	bl	800494e <vListInsertEnd>
 8006786:	e004      	b.n	8006792 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006788:	4b0a      	ldr	r3, [pc, #40]	; (80067b4 <xTaskPriorityInherit+0xc4>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	68bb      	ldr	r3, [r7, #8]
 8006790:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006792:	2301      	movs	r3, #1
 8006794:	60fb      	str	r3, [r7, #12]
 8006796:	e008      	b.n	80067aa <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800679c:	4b05      	ldr	r3, [pc, #20]	; (80067b4 <xTaskPriorityInherit+0xc4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d201      	bcs.n	80067aa <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80067a6:	2301      	movs	r3, #1
 80067a8:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067aa:	68fb      	ldr	r3, [r7, #12]
	}
 80067ac:	4618      	mov	r0, r3
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	2000089c 	.word	0x2000089c
 80067b8:	200008a0 	.word	0x200008a0
 80067bc:	20000d78 	.word	0x20000d78

080067c0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067cc:	2300      	movs	r3, #0
 80067ce:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d056      	beq.n	8006884 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067d6:	4b2e      	ldr	r3, [pc, #184]	; (8006890 <xTaskPriorityDisinherit+0xd0>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	693a      	ldr	r2, [r7, #16]
 80067dc:	429a      	cmp	r2, r3
 80067de:	d00a      	beq.n	80067f6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e4:	f383 8811 	msr	BASEPRI, r3
 80067e8:	f3bf 8f6f 	isb	sy
 80067ec:	f3bf 8f4f 	dsb	sy
 80067f0:	60fb      	str	r3, [r7, #12]
}
 80067f2:	bf00      	nop
 80067f4:	e7fe      	b.n	80067f4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006802:	f383 8811 	msr	BASEPRI, r3
 8006806:	f3bf 8f6f 	isb	sy
 800680a:	f3bf 8f4f 	dsb	sy
 800680e:	60bb      	str	r3, [r7, #8]
}
 8006810:	bf00      	nop
 8006812:	e7fe      	b.n	8006812 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006818:	1e5a      	subs	r2, r3, #1
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006826:	429a      	cmp	r2, r3
 8006828:	d02c      	beq.n	8006884 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800682e:	2b00      	cmp	r3, #0
 8006830:	d128      	bne.n	8006884 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	3304      	adds	r3, #4
 8006836:	4618      	mov	r0, r3
 8006838:	f7fe f8e6 	bl	8004a08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006854:	4b0f      	ldr	r3, [pc, #60]	; (8006894 <xTaskPriorityDisinherit+0xd4>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d903      	bls.n	8006864 <xTaskPriorityDisinherit+0xa4>
 800685c:	693b      	ldr	r3, [r7, #16]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	4a0c      	ldr	r2, [pc, #48]	; (8006894 <xTaskPriorityDisinherit+0xd4>)
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	693b      	ldr	r3, [r7, #16]
 8006866:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006868:	4613      	mov	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4413      	add	r3, r2
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4a09      	ldr	r2, [pc, #36]	; (8006898 <xTaskPriorityDisinherit+0xd8>)
 8006872:	441a      	add	r2, r3
 8006874:	693b      	ldr	r3, [r7, #16]
 8006876:	3304      	adds	r3, #4
 8006878:	4619      	mov	r1, r3
 800687a:	4610      	mov	r0, r2
 800687c:	f7fe f867 	bl	800494e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006880:	2301      	movs	r3, #1
 8006882:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006884:	697b      	ldr	r3, [r7, #20]
	}
 8006886:	4618      	mov	r0, r3
 8006888:	3718      	adds	r7, #24
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop
 8006890:	2000089c 	.word	0x2000089c
 8006894:	20000d78 	.word	0x20000d78
 8006898:	200008a0 	.word	0x200008a0

0800689c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800689c:	b580      	push	{r7, lr}
 800689e:	b088      	sub	sp, #32
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80068aa:	2301      	movs	r3, #1
 80068ac:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d06a      	beq.n	800698a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80068b4:	69bb      	ldr	r3, [r7, #24]
 80068b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d10a      	bne.n	80068d2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80068bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c0:	f383 8811 	msr	BASEPRI, r3
 80068c4:	f3bf 8f6f 	isb	sy
 80068c8:	f3bf 8f4f 	dsb	sy
 80068cc:	60fb      	str	r3, [r7, #12]
}
 80068ce:	bf00      	nop
 80068d0:	e7fe      	b.n	80068d0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d902      	bls.n	80068e2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	61fb      	str	r3, [r7, #28]
 80068e0:	e002      	b.n	80068e8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80068e2:	69bb      	ldr	r3, [r7, #24]
 80068e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068e6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068ec:	69fa      	ldr	r2, [r7, #28]
 80068ee:	429a      	cmp	r2, r3
 80068f0:	d04b      	beq.n	800698a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80068f2:	69bb      	ldr	r3, [r7, #24]
 80068f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	429a      	cmp	r2, r3
 80068fa:	d146      	bne.n	800698a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80068fc:	4b25      	ldr	r3, [pc, #148]	; (8006994 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	69ba      	ldr	r2, [r7, #24]
 8006902:	429a      	cmp	r2, r3
 8006904:	d10a      	bne.n	800691c <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690a:	f383 8811 	msr	BASEPRI, r3
 800690e:	f3bf 8f6f 	isb	sy
 8006912:	f3bf 8f4f 	dsb	sy
 8006916:	60bb      	str	r3, [r7, #8]
}
 8006918:	bf00      	nop
 800691a:	e7fe      	b.n	800691a <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800691c:	69bb      	ldr	r3, [r7, #24]
 800691e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006920:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006922:	69bb      	ldr	r3, [r7, #24]
 8006924:	69fa      	ldr	r2, [r7, #28]
 8006926:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006928:	69bb      	ldr	r3, [r7, #24]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	2b00      	cmp	r3, #0
 800692e:	db04      	blt.n	800693a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006930:	69fb      	ldr	r3, [r7, #28]
 8006932:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006936:	69bb      	ldr	r3, [r7, #24]
 8006938:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	6959      	ldr	r1, [r3, #20]
 800693e:	693a      	ldr	r2, [r7, #16]
 8006940:	4613      	mov	r3, r2
 8006942:	009b      	lsls	r3, r3, #2
 8006944:	4413      	add	r3, r2
 8006946:	009b      	lsls	r3, r3, #2
 8006948:	4a13      	ldr	r2, [pc, #76]	; (8006998 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800694a:	4413      	add	r3, r2
 800694c:	4299      	cmp	r1, r3
 800694e:	d11c      	bne.n	800698a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	3304      	adds	r3, #4
 8006954:	4618      	mov	r0, r3
 8006956:	f7fe f857 	bl	8004a08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800695e:	4b0f      	ldr	r3, [pc, #60]	; (800699c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	429a      	cmp	r2, r3
 8006964:	d903      	bls.n	800696e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800696a:	4a0c      	ldr	r2, [pc, #48]	; (800699c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	69bb      	ldr	r3, [r7, #24]
 8006970:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006972:	4613      	mov	r3, r2
 8006974:	009b      	lsls	r3, r3, #2
 8006976:	4413      	add	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4a07      	ldr	r2, [pc, #28]	; (8006998 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800697c:	441a      	add	r2, r3
 800697e:	69bb      	ldr	r3, [r7, #24]
 8006980:	3304      	adds	r3, #4
 8006982:	4619      	mov	r1, r3
 8006984:	4610      	mov	r0, r2
 8006986:	f7fd ffe2 	bl	800494e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800698a:	bf00      	nop
 800698c:	3720      	adds	r7, #32
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	2000089c 	.word	0x2000089c
 8006998:	200008a0 	.word	0x200008a0
 800699c:	20000d78 	.word	0x20000d78

080069a0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80069a0:	b480      	push	{r7}
 80069a2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80069a4:	4b07      	ldr	r3, [pc, #28]	; (80069c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d004      	beq.n	80069b6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80069b2:	3201      	adds	r2, #1
 80069b4:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80069b6:	4b03      	ldr	r3, [pc, #12]	; (80069c4 <pvTaskIncrementMutexHeldCount+0x24>)
 80069b8:	681b      	ldr	r3, [r3, #0]
	}
 80069ba:	4618      	mov	r0, r3
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr
 80069c4:	2000089c 	.word	0x2000089c

080069c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b084      	sub	sp, #16
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
 80069d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069d2:	4b21      	ldr	r3, [pc, #132]	; (8006a58 <prvAddCurrentTaskToDelayedList+0x90>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d8:	4b20      	ldr	r3, [pc, #128]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	3304      	adds	r3, #4
 80069de:	4618      	mov	r0, r3
 80069e0:	f7fe f812 	bl	8004a08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ea:	d10a      	bne.n	8006a02 <prvAddCurrentTaskToDelayedList+0x3a>
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d007      	beq.n	8006a02 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069f2:	4b1a      	ldr	r3, [pc, #104]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	3304      	adds	r3, #4
 80069f8:	4619      	mov	r1, r3
 80069fa:	4819      	ldr	r0, [pc, #100]	; (8006a60 <prvAddCurrentTaskToDelayedList+0x98>)
 80069fc:	f7fd ffa7 	bl	800494e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a00:	e026      	b.n	8006a50 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a02:	68fa      	ldr	r2, [r7, #12]
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	4413      	add	r3, r2
 8006a08:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a0a:	4b14      	ldr	r3, [pc, #80]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d209      	bcs.n	8006a2e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a1a:	4b12      	ldr	r3, [pc, #72]	; (8006a64 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b0f      	ldr	r3, [pc, #60]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	3304      	adds	r3, #4
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f7fd ffb5 	bl	8004996 <vListInsert>
}
 8006a2c:	e010      	b.n	8006a50 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a2e:	4b0e      	ldr	r3, [pc, #56]	; (8006a68 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	4b0a      	ldr	r3, [pc, #40]	; (8006a5c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fd ffab 	bl	8004996 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a40:	4b0a      	ldr	r3, [pc, #40]	; (8006a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68ba      	ldr	r2, [r7, #8]
 8006a46:	429a      	cmp	r2, r3
 8006a48:	d202      	bcs.n	8006a50 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a4a:	4a08      	ldr	r2, [pc, #32]	; (8006a6c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	bf00      	nop
 8006a52:	3710      	adds	r7, #16
 8006a54:	46bd      	mov	sp, r7
 8006a56:	bd80      	pop	{r7, pc}
 8006a58:	20000d74 	.word	0x20000d74
 8006a5c:	2000089c 	.word	0x2000089c
 8006a60:	20000d5c 	.word	0x20000d5c
 8006a64:	20000d2c 	.word	0x20000d2c
 8006a68:	20000d28 	.word	0x20000d28
 8006a6c:	20000d90 	.word	0x20000d90

08006a70 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b08a      	sub	sp, #40	; 0x28
 8006a74:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a76:	2300      	movs	r3, #0
 8006a78:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a7a:	f000 fb07 	bl	800708c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a7e:	4b1c      	ldr	r3, [pc, #112]	; (8006af0 <xTimerCreateTimerTask+0x80>)
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d021      	beq.n	8006aca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a8e:	1d3a      	adds	r2, r7, #4
 8006a90:	f107 0108 	add.w	r1, r7, #8
 8006a94:	f107 030c 	add.w	r3, r7, #12
 8006a98:	4618      	mov	r0, r3
 8006a9a:	f7fd ff11 	bl	80048c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a9e:	6879      	ldr	r1, [r7, #4]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	68fa      	ldr	r2, [r7, #12]
 8006aa4:	9202      	str	r2, [sp, #8]
 8006aa6:	9301      	str	r3, [sp, #4]
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	9300      	str	r3, [sp, #0]
 8006aac:	2300      	movs	r3, #0
 8006aae:	460a      	mov	r2, r1
 8006ab0:	4910      	ldr	r1, [pc, #64]	; (8006af4 <xTimerCreateTimerTask+0x84>)
 8006ab2:	4811      	ldr	r0, [pc, #68]	; (8006af8 <xTimerCreateTimerTask+0x88>)
 8006ab4:	f7fe ffe0 	bl	8005a78 <xTaskCreateStatic>
 8006ab8:	4603      	mov	r3, r0
 8006aba:	4a10      	ldr	r2, [pc, #64]	; (8006afc <xTimerCreateTimerTask+0x8c>)
 8006abc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006abe:	4b0f      	ldr	r3, [pc, #60]	; (8006afc <xTimerCreateTimerTask+0x8c>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d001      	beq.n	8006aca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ac6:	2301      	movs	r3, #1
 8006ac8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad4:	f383 8811 	msr	BASEPRI, r3
 8006ad8:	f3bf 8f6f 	isb	sy
 8006adc:	f3bf 8f4f 	dsb	sy
 8006ae0:	613b      	str	r3, [r7, #16]
}
 8006ae2:	bf00      	nop
 8006ae4:	e7fe      	b.n	8006ae4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ae6:	697b      	ldr	r3, [r7, #20]
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	3718      	adds	r7, #24
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	20000dcc 	.word	0x20000dcc
 8006af4:	08007a8c 	.word	0x08007a8c
 8006af8:	08006c35 	.word	0x08006c35
 8006afc:	20000dd0 	.word	0x20000dd0

08006b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	; 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10a      	bne.n	8006b2e <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	e7fe      	b.n	8006b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b2e:	4b1a      	ldr	r3, [pc, #104]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d02a      	beq.n	8006b8c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b36:	68bb      	ldr	r3, [r7, #8]
 8006b38:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b05      	cmp	r3, #5
 8006b46:	dc18      	bgt.n	8006b7a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b48:	f7ff fdb4 	bl	80066b4 <xTaskGetSchedulerState>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	2b02      	cmp	r3, #2
 8006b50:	d109      	bne.n	8006b66 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b52:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	f107 0110 	add.w	r1, r7, #16
 8006b5a:	2300      	movs	r3, #0
 8006b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b5e:	f7fe f925 	bl	8004dac <xQueueGenericSend>
 8006b62:	6278      	str	r0, [r7, #36]	; 0x24
 8006b64:	e012      	b.n	8006b8c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b66:	4b0c      	ldr	r3, [pc, #48]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b68:	6818      	ldr	r0, [r3, #0]
 8006b6a:	f107 0110 	add.w	r1, r7, #16
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2200      	movs	r2, #0
 8006b72:	f7fe f91b 	bl	8004dac <xQueueGenericSend>
 8006b76:	6278      	str	r0, [r7, #36]	; 0x24
 8006b78:	e008      	b.n	8006b8c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <xTimerGenericCommand+0x98>)
 8006b7c:	6818      	ldr	r0, [r3, #0]
 8006b7e:	f107 0110 	add.w	r1, r7, #16
 8006b82:	2300      	movs	r3, #0
 8006b84:	683a      	ldr	r2, [r7, #0]
 8006b86:	f7fe fa0f 	bl	8004fa8 <xQueueGenericSendFromISR>
 8006b8a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b8e:	4618      	mov	r0, r3
 8006b90:	3728      	adds	r7, #40	; 0x28
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop
 8006b98:	20000dcc 	.word	0x20000dcc

08006b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba6:	4b22      	ldr	r3, [pc, #136]	; (8006c30 <prvProcessExpiredTimer+0x94>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fd ff27 	bl	8004a08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d022      	beq.n	8006c0e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	18d1      	adds	r1, r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6978      	ldr	r0, [r7, #20]
 8006bd6:	f000 f8d1 	bl	8006d7c <prvInsertTimerInActiveList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d01f      	beq.n	8006c20 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	2100      	movs	r1, #0
 8006bea:	6978      	ldr	r0, [r7, #20]
 8006bec:	f7ff ff88 	bl	8006b00 <xTimerGenericCommand>
 8006bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d113      	bne.n	8006c20 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60fb      	str	r3, [r7, #12]
}
 8006c0a:	bf00      	nop
 8006c0c:	e7fe      	b.n	8006c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c14:	f023 0301 	bic.w	r3, r3, #1
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c20:	697b      	ldr	r3, [r7, #20]
 8006c22:	6a1b      	ldr	r3, [r3, #32]
 8006c24:	6978      	ldr	r0, [r7, #20]
 8006c26:	4798      	blx	r3
}
 8006c28:	bf00      	nop
 8006c2a:	3718      	adds	r7, #24
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000dc4 	.word	0x20000dc4

08006c34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b084      	sub	sp, #16
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c3c:	f107 0308 	add.w	r3, r7, #8
 8006c40:	4618      	mov	r0, r3
 8006c42:	f000 f857 	bl	8006cf4 <prvGetNextExpireTime>
 8006c46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	68f8      	ldr	r0, [r7, #12]
 8006c4e:	f000 f803 	bl	8006c58 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c52:	f000 f8d5 	bl	8006e00 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c56:	e7f1      	b.n	8006c3c <prvTimerTask+0x8>

08006c58 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c58:	b580      	push	{r7, lr}
 8006c5a:	b084      	sub	sp, #16
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
 8006c60:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c62:	f7ff f945 	bl	8005ef0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c66:	f107 0308 	add.w	r3, r7, #8
 8006c6a:	4618      	mov	r0, r3
 8006c6c:	f000 f866 	bl	8006d3c <prvSampleTimeNow>
 8006c70:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c72:	68bb      	ldr	r3, [r7, #8]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d130      	bne.n	8006cda <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c78:	683b      	ldr	r3, [r7, #0]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d10a      	bne.n	8006c94 <prvProcessTimerOrBlockTask+0x3c>
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	429a      	cmp	r2, r3
 8006c84:	d806      	bhi.n	8006c94 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c86:	f7ff f941 	bl	8005f0c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff ff85 	bl	8006b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c92:	e024      	b.n	8006cde <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d008      	beq.n	8006cac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c9a:	4b13      	ldr	r3, [pc, #76]	; (8006ce8 <prvProcessTimerOrBlockTask+0x90>)
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d101      	bne.n	8006ca8 <prvProcessTimerOrBlockTask+0x50>
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	e000      	b.n	8006caa <prvProcessTimerOrBlockTask+0x52>
 8006ca8:	2300      	movs	r3, #0
 8006caa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cac:	4b0f      	ldr	r3, [pc, #60]	; (8006cec <prvProcessTimerOrBlockTask+0x94>)
 8006cae:	6818      	ldr	r0, [r3, #0]
 8006cb0:	687a      	ldr	r2, [r7, #4]
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	1ad3      	subs	r3, r2, r3
 8006cb6:	683a      	ldr	r2, [r7, #0]
 8006cb8:	4619      	mov	r1, r3
 8006cba:	f7fe fea9 	bl	8005a10 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cbe:	f7ff f925 	bl	8005f0c <xTaskResumeAll>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d10a      	bne.n	8006cde <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cc8:	4b09      	ldr	r3, [pc, #36]	; (8006cf0 <prvProcessTimerOrBlockTask+0x98>)
 8006cca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cce:	601a      	str	r2, [r3, #0]
 8006cd0:	f3bf 8f4f 	dsb	sy
 8006cd4:	f3bf 8f6f 	isb	sy
}
 8006cd8:	e001      	b.n	8006cde <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cda:	f7ff f917 	bl	8005f0c <xTaskResumeAll>
}
 8006cde:	bf00      	nop
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	20000dc8 	.word	0x20000dc8
 8006cec:	20000dcc 	.word	0x20000dcc
 8006cf0:	e000ed04 	.word	0xe000ed04

08006cf4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cf4:	b480      	push	{r7}
 8006cf6:	b085      	sub	sp, #20
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006cfc:	4b0e      	ldr	r3, [pc, #56]	; (8006d38 <prvGetNextExpireTime+0x44>)
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d101      	bne.n	8006d0a <prvGetNextExpireTime+0x16>
 8006d06:	2201      	movs	r2, #1
 8006d08:	e000      	b.n	8006d0c <prvGetNextExpireTime+0x18>
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d105      	bne.n	8006d24 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d18:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <prvGetNextExpireTime+0x44>)
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	68db      	ldr	r3, [r3, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	e001      	b.n	8006d28 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d24:	2300      	movs	r3, #0
 8006d26:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d28:	68fb      	ldr	r3, [r7, #12]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3714      	adds	r7, #20
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d34:	4770      	bx	lr
 8006d36:	bf00      	nop
 8006d38:	20000dc4 	.word	0x20000dc4

08006d3c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d3c:	b580      	push	{r7, lr}
 8006d3e:	b084      	sub	sp, #16
 8006d40:	af00      	add	r7, sp, #0
 8006d42:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d44:	f7ff f980 	bl	8006048 <xTaskGetTickCount>
 8006d48:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d4a:	4b0b      	ldr	r3, [pc, #44]	; (8006d78 <prvSampleTimeNow+0x3c>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d205      	bcs.n	8006d60 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d54:	f000 f936 	bl	8006fc4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	601a      	str	r2, [r3, #0]
 8006d5e:	e002      	b.n	8006d66 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d66:	4a04      	ldr	r2, [pc, #16]	; (8006d78 <prvSampleTimeNow+0x3c>)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
}
 8006d6e:	4618      	mov	r0, r3
 8006d70:	3710      	adds	r7, #16
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000dd4 	.word	0x20000dd4

08006d7c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	60f8      	str	r0, [r7, #12]
 8006d84:	60b9      	str	r1, [r7, #8]
 8006d86:	607a      	str	r2, [r7, #4]
 8006d88:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	68fa      	ldr	r2, [r7, #12]
 8006d98:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d812      	bhi.n	8006dc8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	683b      	ldr	r3, [r7, #0]
 8006da6:	1ad2      	subs	r2, r2, r3
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	699b      	ldr	r3, [r3, #24]
 8006dac:	429a      	cmp	r2, r3
 8006dae:	d302      	bcc.n	8006db6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006db0:	2301      	movs	r3, #1
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e01b      	b.n	8006dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006db6:	4b10      	ldr	r3, [pc, #64]	; (8006df8 <prvInsertTimerInActiveList+0x7c>)
 8006db8:	681a      	ldr	r2, [r3, #0]
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	f7fd fde8 	bl	8004996 <vListInsert>
 8006dc6:	e012      	b.n	8006dee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dc8:	687a      	ldr	r2, [r7, #4]
 8006dca:	683b      	ldr	r3, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d206      	bcs.n	8006dde <prvInsertTimerInActiveList+0x62>
 8006dd0:	68ba      	ldr	r2, [r7, #8]
 8006dd2:	683b      	ldr	r3, [r7, #0]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d302      	bcc.n	8006dde <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
 8006ddc:	e007      	b.n	8006dee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <prvInsertTimerInActiveList+0x80>)
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	3304      	adds	r3, #4
 8006de6:	4619      	mov	r1, r3
 8006de8:	4610      	mov	r0, r2
 8006dea:	f7fd fdd4 	bl	8004996 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dee:	697b      	ldr	r3, [r7, #20]
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3718      	adds	r7, #24
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}
 8006df8:	20000dc8 	.word	0x20000dc8
 8006dfc:	20000dc4 	.word	0x20000dc4

08006e00 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b08e      	sub	sp, #56	; 0x38
 8006e04:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e06:	e0ca      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	da18      	bge.n	8006e40 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e0e:	1d3b      	adds	r3, r7, #4
 8006e10:	3304      	adds	r3, #4
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d10a      	bne.n	8006e30 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e1e:	f383 8811 	msr	BASEPRI, r3
 8006e22:	f3bf 8f6f 	isb	sy
 8006e26:	f3bf 8f4f 	dsb	sy
 8006e2a:	61fb      	str	r3, [r7, #28]
}
 8006e2c:	bf00      	nop
 8006e2e:	e7fe      	b.n	8006e2e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e36:	6850      	ldr	r0, [r2, #4]
 8006e38:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e3a:	6892      	ldr	r2, [r2, #8]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f2c0 80ab 	blt.w	8006f9e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d004      	beq.n	8006e5e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e56:	3304      	adds	r3, #4
 8006e58:	4618      	mov	r0, r3
 8006e5a:	f7fd fdd5 	bl	8004a08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e5e:	463b      	mov	r3, r7
 8006e60:	4618      	mov	r0, r3
 8006e62:	f7ff ff6b 	bl	8006d3c <prvSampleTimeNow>
 8006e66:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	2b09      	cmp	r3, #9
 8006e6c:	f200 8096 	bhi.w	8006f9c <prvProcessReceivedCommands+0x19c>
 8006e70:	a201      	add	r2, pc, #4	; (adr r2, 8006e78 <prvProcessReceivedCommands+0x78>)
 8006e72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e76:	bf00      	nop
 8006e78:	08006ea1 	.word	0x08006ea1
 8006e7c:	08006ea1 	.word	0x08006ea1
 8006e80:	08006ea1 	.word	0x08006ea1
 8006e84:	08006f15 	.word	0x08006f15
 8006e88:	08006f29 	.word	0x08006f29
 8006e8c:	08006f73 	.word	0x08006f73
 8006e90:	08006ea1 	.word	0x08006ea1
 8006e94:	08006ea1 	.word	0x08006ea1
 8006e98:	08006f15 	.word	0x08006f15
 8006e9c:	08006f29 	.word	0x08006f29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ea2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	b2da      	uxtb	r2, r3
 8006eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006eb2:	68ba      	ldr	r2, [r7, #8]
 8006eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb6:	699b      	ldr	r3, [r3, #24]
 8006eb8:	18d1      	adds	r1, r2, r3
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ebe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ec0:	f7ff ff5c 	bl	8006d7c <prvInsertTimerInActiveList>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d069      	beq.n	8006f9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	6a1b      	ldr	r3, [r3, #32]
 8006ece:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ed8:	f003 0304 	and.w	r3, r3, #4
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d05e      	beq.n	8006f9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	441a      	add	r2, r3
 8006ee8:	2300      	movs	r3, #0
 8006eea:	9300      	str	r3, [sp, #0]
 8006eec:	2300      	movs	r3, #0
 8006eee:	2100      	movs	r1, #0
 8006ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ef2:	f7ff fe05 	bl	8006b00 <xTimerGenericCommand>
 8006ef6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d14f      	bne.n	8006f9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006efe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f02:	f383 8811 	msr	BASEPRI, r3
 8006f06:	f3bf 8f6f 	isb	sy
 8006f0a:	f3bf 8f4f 	dsb	sy
 8006f0e:	61bb      	str	r3, [r7, #24]
}
 8006f10:	bf00      	nop
 8006f12:	e7fe      	b.n	8006f12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f1a:	f023 0301 	bic.w	r3, r3, #1
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f26:	e03a      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f2e:	f043 0301 	orr.w	r3, r3, #1
 8006f32:	b2da      	uxtb	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f3a:	68ba      	ldr	r2, [r7, #8]
 8006f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	699b      	ldr	r3, [r3, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10a      	bne.n	8006f5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f4c:	f383 8811 	msr	BASEPRI, r3
 8006f50:	f3bf 8f6f 	isb	sy
 8006f54:	f3bf 8f4f 	dsb	sy
 8006f58:	617b      	str	r3, [r7, #20]
}
 8006f5a:	bf00      	nop
 8006f5c:	e7fe      	b.n	8006f5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f60:	699a      	ldr	r2, [r3, #24]
 8006f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f64:	18d1      	adds	r1, r2, r3
 8006f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6c:	f7ff ff06 	bl	8006d7c <prvInsertTimerInActiveList>
					break;
 8006f70:	e015      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f78:	f003 0302 	and.w	r3, r3, #2
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d103      	bne.n	8006f88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f82:	f000 fbdd 	bl	8007740 <vPortFree>
 8006f86:	e00a      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	b2da      	uxtb	r2, r3
 8006f94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f9a:	e000      	b.n	8006f9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006f9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f9e:	4b08      	ldr	r3, [pc, #32]	; (8006fc0 <prvProcessReceivedCommands+0x1c0>)
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	1d39      	adds	r1, r7, #4
 8006fa4:	2200      	movs	r2, #0
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f7fe f926 	bl	80051f8 <xQueueReceive>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f47f af2a 	bne.w	8006e08 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006fb4:	bf00      	nop
 8006fb6:	bf00      	nop
 8006fb8:	3730      	adds	r7, #48	; 0x30
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	20000dcc 	.word	0x20000dcc

08006fc4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fca:	e048      	b.n	800705e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fcc:	4b2d      	ldr	r3, [pc, #180]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	68db      	ldr	r3, [r3, #12]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fd6:	4b2b      	ldr	r3, [pc, #172]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68db      	ldr	r3, [r3, #12]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	3304      	adds	r3, #4
 8006fe4:	4618      	mov	r0, r3
 8006fe6:	f7fd fd0f 	bl	8004a08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	6a1b      	ldr	r3, [r3, #32]
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ff8:	f003 0304 	and.w	r3, r3, #4
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d02e      	beq.n	800705e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4413      	add	r3, r2
 8007008:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800700a:	68ba      	ldr	r2, [r7, #8]
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	429a      	cmp	r2, r3
 8007010:	d90e      	bls.n	8007030 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	68ba      	ldr	r2, [r7, #8]
 8007016:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	68fa      	ldr	r2, [r7, #12]
 800701c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800701e:	4b19      	ldr	r3, [pc, #100]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8007020:	681a      	ldr	r2, [r3, #0]
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	3304      	adds	r3, #4
 8007026:	4619      	mov	r1, r3
 8007028:	4610      	mov	r0, r2
 800702a:	f7fd fcb4 	bl	8004996 <vListInsert>
 800702e:	e016      	b.n	800705e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007030:	2300      	movs	r3, #0
 8007032:	9300      	str	r3, [sp, #0]
 8007034:	2300      	movs	r3, #0
 8007036:	693a      	ldr	r2, [r7, #16]
 8007038:	2100      	movs	r1, #0
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fd60 	bl	8006b00 <xTimerGenericCommand>
 8007040:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d10a      	bne.n	800705e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800704c:	f383 8811 	msr	BASEPRI, r3
 8007050:	f3bf 8f6f 	isb	sy
 8007054:	f3bf 8f4f 	dsb	sy
 8007058:	603b      	str	r3, [r7, #0]
}
 800705a:	bf00      	nop
 800705c:	e7fe      	b.n	800705c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800705e:	4b09      	ldr	r3, [pc, #36]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	2b00      	cmp	r3, #0
 8007066:	d1b1      	bne.n	8006fcc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007068:	4b06      	ldr	r3, [pc, #24]	; (8007084 <prvSwitchTimerLists+0xc0>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800706e:	4b06      	ldr	r3, [pc, #24]	; (8007088 <prvSwitchTimerLists+0xc4>)
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a04      	ldr	r2, [pc, #16]	; (8007084 <prvSwitchTimerLists+0xc0>)
 8007074:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007076:	4a04      	ldr	r2, [pc, #16]	; (8007088 <prvSwitchTimerLists+0xc4>)
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	6013      	str	r3, [r2, #0]
}
 800707c:	bf00      	nop
 800707e:	3718      	adds	r7, #24
 8007080:	46bd      	mov	sp, r7
 8007082:	bd80      	pop	{r7, pc}
 8007084:	20000dc4 	.word	0x20000dc4
 8007088:	20000dc8 	.word	0x20000dc8

0800708c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b082      	sub	sp, #8
 8007090:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007092:	f000 f967 	bl	8007364 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007096:	4b15      	ldr	r3, [pc, #84]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d120      	bne.n	80070e0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800709e:	4814      	ldr	r0, [pc, #80]	; (80070f0 <prvCheckForValidListAndQueue+0x64>)
 80070a0:	f7fd fc28 	bl	80048f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070a4:	4813      	ldr	r0, [pc, #76]	; (80070f4 <prvCheckForValidListAndQueue+0x68>)
 80070a6:	f7fd fc25 	bl	80048f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070aa:	4b13      	ldr	r3, [pc, #76]	; (80070f8 <prvCheckForValidListAndQueue+0x6c>)
 80070ac:	4a10      	ldr	r2, [pc, #64]	; (80070f0 <prvCheckForValidListAndQueue+0x64>)
 80070ae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070b0:	4b12      	ldr	r3, [pc, #72]	; (80070fc <prvCheckForValidListAndQueue+0x70>)
 80070b2:	4a10      	ldr	r2, [pc, #64]	; (80070f4 <prvCheckForValidListAndQueue+0x68>)
 80070b4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070b6:	2300      	movs	r3, #0
 80070b8:	9300      	str	r3, [sp, #0]
 80070ba:	4b11      	ldr	r3, [pc, #68]	; (8007100 <prvCheckForValidListAndQueue+0x74>)
 80070bc:	4a11      	ldr	r2, [pc, #68]	; (8007104 <prvCheckForValidListAndQueue+0x78>)
 80070be:	2110      	movs	r1, #16
 80070c0:	200a      	movs	r0, #10
 80070c2:	f7fd fd33 	bl	8004b2c <xQueueGenericCreateStatic>
 80070c6:	4603      	mov	r3, r0
 80070c8:	4a08      	ldr	r2, [pc, #32]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 80070ca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070cc:	4b07      	ldr	r3, [pc, #28]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d005      	beq.n	80070e0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070d4:	4b05      	ldr	r3, [pc, #20]	; (80070ec <prvCheckForValidListAndQueue+0x60>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	490b      	ldr	r1, [pc, #44]	; (8007108 <prvCheckForValidListAndQueue+0x7c>)
 80070da:	4618      	mov	r0, r3
 80070dc:	f7fe fc44 	bl	8005968 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070e0:	f000 f970 	bl	80073c4 <vPortExitCritical>
}
 80070e4:	bf00      	nop
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
 80070ea:	bf00      	nop
 80070ec:	20000dcc 	.word	0x20000dcc
 80070f0:	20000d9c 	.word	0x20000d9c
 80070f4:	20000db0 	.word	0x20000db0
 80070f8:	20000dc4 	.word	0x20000dc4
 80070fc:	20000dc8 	.word	0x20000dc8
 8007100:	20000e78 	.word	0x20000e78
 8007104:	20000dd8 	.word	0x20000dd8
 8007108:	08007a94 	.word	0x08007a94

0800710c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800710c:	b480      	push	{r7}
 800710e:	b085      	sub	sp, #20
 8007110:	af00      	add	r7, sp, #0
 8007112:	60f8      	str	r0, [r7, #12]
 8007114:	60b9      	str	r1, [r7, #8]
 8007116:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	3b04      	subs	r3, #4
 800711c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007124:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	3b04      	subs	r3, #4
 800712a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	f023 0201 	bic.w	r2, r3, #1
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3b04      	subs	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800713c:	4a0c      	ldr	r2, [pc, #48]	; (8007170 <pxPortInitialiseStack+0x64>)
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	3b14      	subs	r3, #20
 8007146:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	3b04      	subs	r3, #4
 8007152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f06f 0202 	mvn.w	r2, #2
 800715a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	3b20      	subs	r3, #32
 8007160:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007162:	68fb      	ldr	r3, [r7, #12]
}
 8007164:	4618      	mov	r0, r3
 8007166:	3714      	adds	r7, #20
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr
 8007170:	08007175 	.word	0x08007175

08007174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800717e:	4b12      	ldr	r3, [pc, #72]	; (80071c8 <prvTaskExitError+0x54>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d00a      	beq.n	800719e <prvTaskExitError+0x2a>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	60fb      	str	r3, [r7, #12]
}
 800719a:	bf00      	nop
 800719c:	e7fe      	b.n	800719c <prvTaskExitError+0x28>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	60bb      	str	r3, [r7, #8]
}
 80071b0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071b2:	bf00      	nop
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d0fc      	beq.n	80071b4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071ba:	bf00      	nop
 80071bc:	bf00      	nop
 80071be:	3714      	adds	r7, #20
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	00000000 	.word	0x00000000

080071d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071d0:	4b07      	ldr	r3, [pc, #28]	; (80071f0 <pxCurrentTCBConst2>)
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	6808      	ldr	r0, [r1, #0]
 80071d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	f380 8809 	msr	PSP, r0
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8811 	msr	BASEPRI, r0
 80071ea:	4770      	bx	lr
 80071ec:	f3af 8000 	nop.w

080071f0 <pxCurrentTCBConst2>:
 80071f0:	2000089c 	.word	0x2000089c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop

080071f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071f8:	4808      	ldr	r0, [pc, #32]	; (800721c <prvPortStartFirstTask+0x24>)
 80071fa:	6800      	ldr	r0, [r0, #0]
 80071fc:	6800      	ldr	r0, [r0, #0]
 80071fe:	f380 8808 	msr	MSP, r0
 8007202:	f04f 0000 	mov.w	r0, #0
 8007206:	f380 8814 	msr	CONTROL, r0
 800720a:	b662      	cpsie	i
 800720c:	b661      	cpsie	f
 800720e:	f3bf 8f4f 	dsb	sy
 8007212:	f3bf 8f6f 	isb	sy
 8007216:	df00      	svc	0
 8007218:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800721a:	bf00      	nop
 800721c:	e000ed08 	.word	0xe000ed08

08007220 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007226:	4b46      	ldr	r3, [pc, #280]	; (8007340 <xPortStartScheduler+0x120>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a46      	ldr	r2, [pc, #280]	; (8007344 <xPortStartScheduler+0x124>)
 800722c:	4293      	cmp	r3, r2
 800722e:	d10a      	bne.n	8007246 <xPortStartScheduler+0x26>
	__asm volatile
 8007230:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007234:	f383 8811 	msr	BASEPRI, r3
 8007238:	f3bf 8f6f 	isb	sy
 800723c:	f3bf 8f4f 	dsb	sy
 8007240:	613b      	str	r3, [r7, #16]
}
 8007242:	bf00      	nop
 8007244:	e7fe      	b.n	8007244 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007246:	4b3e      	ldr	r3, [pc, #248]	; (8007340 <xPortStartScheduler+0x120>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	4a3f      	ldr	r2, [pc, #252]	; (8007348 <xPortStartScheduler+0x128>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d10a      	bne.n	8007266 <xPortStartScheduler+0x46>
	__asm volatile
 8007250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007254:	f383 8811 	msr	BASEPRI, r3
 8007258:	f3bf 8f6f 	isb	sy
 800725c:	f3bf 8f4f 	dsb	sy
 8007260:	60fb      	str	r3, [r7, #12]
}
 8007262:	bf00      	nop
 8007264:	e7fe      	b.n	8007264 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007266:	4b39      	ldr	r3, [pc, #228]	; (800734c <xPortStartScheduler+0x12c>)
 8007268:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	781b      	ldrb	r3, [r3, #0]
 800726e:	b2db      	uxtb	r3, r3
 8007270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	22ff      	movs	r2, #255	; 0xff
 8007276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	781b      	ldrb	r3, [r3, #0]
 800727c:	b2db      	uxtb	r3, r3
 800727e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	b2db      	uxtb	r3, r3
 8007284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007288:	b2da      	uxtb	r2, r3
 800728a:	4b31      	ldr	r3, [pc, #196]	; (8007350 <xPortStartScheduler+0x130>)
 800728c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800728e:	4b31      	ldr	r3, [pc, #196]	; (8007354 <xPortStartScheduler+0x134>)
 8007290:	2207      	movs	r2, #7
 8007292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007294:	e009      	b.n	80072aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007296:	4b2f      	ldr	r3, [pc, #188]	; (8007354 <xPortStartScheduler+0x134>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	3b01      	subs	r3, #1
 800729c:	4a2d      	ldr	r2, [pc, #180]	; (8007354 <xPortStartScheduler+0x134>)
 800729e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80072a0:	78fb      	ldrb	r3, [r7, #3]
 80072a2:	b2db      	uxtb	r3, r3
 80072a4:	005b      	lsls	r3, r3, #1
 80072a6:	b2db      	uxtb	r3, r3
 80072a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80072aa:	78fb      	ldrb	r3, [r7, #3]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072b2:	2b80      	cmp	r3, #128	; 0x80
 80072b4:	d0ef      	beq.n	8007296 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072b6:	4b27      	ldr	r3, [pc, #156]	; (8007354 <xPortStartScheduler+0x134>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f1c3 0307 	rsb	r3, r3, #7
 80072be:	2b04      	cmp	r3, #4
 80072c0:	d00a      	beq.n	80072d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c6:	f383 8811 	msr	BASEPRI, r3
 80072ca:	f3bf 8f6f 	isb	sy
 80072ce:	f3bf 8f4f 	dsb	sy
 80072d2:	60bb      	str	r3, [r7, #8]
}
 80072d4:	bf00      	nop
 80072d6:	e7fe      	b.n	80072d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072d8:	4b1e      	ldr	r3, [pc, #120]	; (8007354 <xPortStartScheduler+0x134>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	021b      	lsls	r3, r3, #8
 80072de:	4a1d      	ldr	r2, [pc, #116]	; (8007354 <xPortStartScheduler+0x134>)
 80072e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072e2:	4b1c      	ldr	r3, [pc, #112]	; (8007354 <xPortStartScheduler+0x134>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072ea:	4a1a      	ldr	r2, [pc, #104]	; (8007354 <xPortStartScheduler+0x134>)
 80072ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	b2da      	uxtb	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072f6:	4b18      	ldr	r3, [pc, #96]	; (8007358 <xPortStartScheduler+0x138>)
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	4a17      	ldr	r2, [pc, #92]	; (8007358 <xPortStartScheduler+0x138>)
 80072fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007300:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007302:	4b15      	ldr	r3, [pc, #84]	; (8007358 <xPortStartScheduler+0x138>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a14      	ldr	r2, [pc, #80]	; (8007358 <xPortStartScheduler+0x138>)
 8007308:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800730c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800730e:	f000 f8dd 	bl	80074cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007312:	4b12      	ldr	r3, [pc, #72]	; (800735c <xPortStartScheduler+0x13c>)
 8007314:	2200      	movs	r2, #0
 8007316:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007318:	f000 f8fc 	bl	8007514 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800731c:	4b10      	ldr	r3, [pc, #64]	; (8007360 <xPortStartScheduler+0x140>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	4a0f      	ldr	r2, [pc, #60]	; (8007360 <xPortStartScheduler+0x140>)
 8007322:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007326:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007328:	f7ff ff66 	bl	80071f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800732c:	f7fe ff56 	bl	80061dc <vTaskSwitchContext>
	prvTaskExitError();
 8007330:	f7ff ff20 	bl	8007174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3718      	adds	r7, #24
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	e000ed00 	.word	0xe000ed00
 8007344:	410fc271 	.word	0x410fc271
 8007348:	410fc270 	.word	0x410fc270
 800734c:	e000e400 	.word	0xe000e400
 8007350:	20000ec8 	.word	0x20000ec8
 8007354:	20000ecc 	.word	0x20000ecc
 8007358:	e000ed20 	.word	0xe000ed20
 800735c:	2000000c 	.word	0x2000000c
 8007360:	e000ef34 	.word	0xe000ef34

08007364 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007364:	b480      	push	{r7}
 8007366:	b083      	sub	sp, #12
 8007368:	af00      	add	r7, sp, #0
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	607b      	str	r3, [r7, #4]
}
 800737c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800737e:	4b0f      	ldr	r3, [pc, #60]	; (80073bc <vPortEnterCritical+0x58>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	3301      	adds	r3, #1
 8007384:	4a0d      	ldr	r2, [pc, #52]	; (80073bc <vPortEnterCritical+0x58>)
 8007386:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007388:	4b0c      	ldr	r3, [pc, #48]	; (80073bc <vPortEnterCritical+0x58>)
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2b01      	cmp	r3, #1
 800738e:	d10f      	bne.n	80073b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007390:	4b0b      	ldr	r3, [pc, #44]	; (80073c0 <vPortEnterCritical+0x5c>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	b2db      	uxtb	r3, r3
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800739a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800739e:	f383 8811 	msr	BASEPRI, r3
 80073a2:	f3bf 8f6f 	isb	sy
 80073a6:	f3bf 8f4f 	dsb	sy
 80073aa:	603b      	str	r3, [r7, #0]
}
 80073ac:	bf00      	nop
 80073ae:	e7fe      	b.n	80073ae <vPortEnterCritical+0x4a>
	}
}
 80073b0:	bf00      	nop
 80073b2:	370c      	adds	r7, #12
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	2000000c 	.word	0x2000000c
 80073c0:	e000ed04 	.word	0xe000ed04

080073c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <vPortExitCritical+0x50>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d10a      	bne.n	80073e8 <vPortExitCritical+0x24>
	__asm volatile
 80073d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d6:	f383 8811 	msr	BASEPRI, r3
 80073da:	f3bf 8f6f 	isb	sy
 80073de:	f3bf 8f4f 	dsb	sy
 80073e2:	607b      	str	r3, [r7, #4]
}
 80073e4:	bf00      	nop
 80073e6:	e7fe      	b.n	80073e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073e8:	4b0a      	ldr	r3, [pc, #40]	; (8007414 <vPortExitCritical+0x50>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	3b01      	subs	r3, #1
 80073ee:	4a09      	ldr	r2, [pc, #36]	; (8007414 <vPortExitCritical+0x50>)
 80073f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073f2:	4b08      	ldr	r3, [pc, #32]	; (8007414 <vPortExitCritical+0x50>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d105      	bne.n	8007406 <vPortExitCritical+0x42>
 80073fa:	2300      	movs	r3, #0
 80073fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	f383 8811 	msr	BASEPRI, r3
}
 8007404:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007406:	bf00      	nop
 8007408:	370c      	adds	r7, #12
 800740a:	46bd      	mov	sp, r7
 800740c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007410:	4770      	bx	lr
 8007412:	bf00      	nop
 8007414:	2000000c 	.word	0x2000000c
	...

08007420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007420:	f3ef 8009 	mrs	r0, PSP
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	4b15      	ldr	r3, [pc, #84]	; (8007480 <pxCurrentTCBConst>)
 800742a:	681a      	ldr	r2, [r3, #0]
 800742c:	f01e 0f10 	tst.w	lr, #16
 8007430:	bf08      	it	eq
 8007432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800743a:	6010      	str	r0, [r2, #0]
 800743c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007444:	f380 8811 	msr	BASEPRI, r0
 8007448:	f3bf 8f4f 	dsb	sy
 800744c:	f3bf 8f6f 	isb	sy
 8007450:	f7fe fec4 	bl	80061dc <vTaskSwitchContext>
 8007454:	f04f 0000 	mov.w	r0, #0
 8007458:	f380 8811 	msr	BASEPRI, r0
 800745c:	bc09      	pop	{r0, r3}
 800745e:	6819      	ldr	r1, [r3, #0]
 8007460:	6808      	ldr	r0, [r1, #0]
 8007462:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007466:	f01e 0f10 	tst.w	lr, #16
 800746a:	bf08      	it	eq
 800746c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007470:	f380 8809 	msr	PSP, r0
 8007474:	f3bf 8f6f 	isb	sy
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	f3af 8000 	nop.w

08007480 <pxCurrentTCBConst>:
 8007480:	2000089c 	.word	0x2000089c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop

08007488 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b082      	sub	sp, #8
 800748c:	af00      	add	r7, sp, #0
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	607b      	str	r3, [r7, #4]
}
 80074a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80074a2:	f7fe fde1 	bl	8006068 <xTaskIncrementTick>
 80074a6:	4603      	mov	r3, r0
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d003      	beq.n	80074b4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80074ac:	4b06      	ldr	r3, [pc, #24]	; (80074c8 <xPortSysTickHandler+0x40>)
 80074ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074b2:	601a      	str	r2, [r3, #0]
 80074b4:	2300      	movs	r3, #0
 80074b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f383 8811 	msr	BASEPRI, r3
}
 80074be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074c0:	bf00      	nop
 80074c2:	3708      	adds	r7, #8
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}
 80074c8:	e000ed04 	.word	0xe000ed04

080074cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074cc:	b480      	push	{r7}
 80074ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074d0:	4b0b      	ldr	r3, [pc, #44]	; (8007500 <vPortSetupTimerInterrupt+0x34>)
 80074d2:	2200      	movs	r2, #0
 80074d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074d6:	4b0b      	ldr	r3, [pc, #44]	; (8007504 <vPortSetupTimerInterrupt+0x38>)
 80074d8:	2200      	movs	r2, #0
 80074da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074dc:	4b0a      	ldr	r3, [pc, #40]	; (8007508 <vPortSetupTimerInterrupt+0x3c>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	4a0a      	ldr	r2, [pc, #40]	; (800750c <vPortSetupTimerInterrupt+0x40>)
 80074e2:	fba2 2303 	umull	r2, r3, r2, r3
 80074e6:	099b      	lsrs	r3, r3, #6
 80074e8:	4a09      	ldr	r2, [pc, #36]	; (8007510 <vPortSetupTimerInterrupt+0x44>)
 80074ea:	3b01      	subs	r3, #1
 80074ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074ee:	4b04      	ldr	r3, [pc, #16]	; (8007500 <vPortSetupTimerInterrupt+0x34>)
 80074f0:	2207      	movs	r2, #7
 80074f2:	601a      	str	r2, [r3, #0]
}
 80074f4:	bf00      	nop
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	e000e010 	.word	0xe000e010
 8007504:	e000e018 	.word	0xe000e018
 8007508:	20000000 	.word	0x20000000
 800750c:	10624dd3 	.word	0x10624dd3
 8007510:	e000e014 	.word	0xe000e014

08007514 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007514:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007524 <vPortEnableVFP+0x10>
 8007518:	6801      	ldr	r1, [r0, #0]
 800751a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800751e:	6001      	str	r1, [r0, #0]
 8007520:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007522:	bf00      	nop
 8007524:	e000ed88 	.word	0xe000ed88

08007528 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007528:	b480      	push	{r7}
 800752a:	b085      	sub	sp, #20
 800752c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800752e:	f3ef 8305 	mrs	r3, IPSR
 8007532:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	2b0f      	cmp	r3, #15
 8007538:	d914      	bls.n	8007564 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800753a:	4a17      	ldr	r2, [pc, #92]	; (8007598 <vPortValidateInterruptPriority+0x70>)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	4413      	add	r3, r2
 8007540:	781b      	ldrb	r3, [r3, #0]
 8007542:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007544:	4b15      	ldr	r3, [pc, #84]	; (800759c <vPortValidateInterruptPriority+0x74>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	7afa      	ldrb	r2, [r7, #11]
 800754a:	429a      	cmp	r2, r3
 800754c:	d20a      	bcs.n	8007564 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	607b      	str	r3, [r7, #4]
}
 8007560:	bf00      	nop
 8007562:	e7fe      	b.n	8007562 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007564:	4b0e      	ldr	r3, [pc, #56]	; (80075a0 <vPortValidateInterruptPriority+0x78>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800756c:	4b0d      	ldr	r3, [pc, #52]	; (80075a4 <vPortValidateInterruptPriority+0x7c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	429a      	cmp	r2, r3
 8007572:	d90a      	bls.n	800758a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007578:	f383 8811 	msr	BASEPRI, r3
 800757c:	f3bf 8f6f 	isb	sy
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	603b      	str	r3, [r7, #0]
}
 8007586:	bf00      	nop
 8007588:	e7fe      	b.n	8007588 <vPortValidateInterruptPriority+0x60>
	}
 800758a:	bf00      	nop
 800758c:	3714      	adds	r7, #20
 800758e:	46bd      	mov	sp, r7
 8007590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007594:	4770      	bx	lr
 8007596:	bf00      	nop
 8007598:	e000e3f0 	.word	0xe000e3f0
 800759c:	20000ec8 	.word	0x20000ec8
 80075a0:	e000ed0c 	.word	0xe000ed0c
 80075a4:	20000ecc 	.word	0x20000ecc

080075a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b08a      	sub	sp, #40	; 0x28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075b0:	2300      	movs	r3, #0
 80075b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075b4:	f7fe fc9c 	bl	8005ef0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075b8:	4b5b      	ldr	r3, [pc, #364]	; (8007728 <pvPortMalloc+0x180>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d101      	bne.n	80075c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075c0:	f000 f920 	bl	8007804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075c4:	4b59      	ldr	r3, [pc, #356]	; (800772c <pvPortMalloc+0x184>)
 80075c6:	681a      	ldr	r2, [r3, #0]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	4013      	ands	r3, r2
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	f040 8093 	bne.w	80076f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d01d      	beq.n	8007614 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075d8:	2208      	movs	r2, #8
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	4413      	add	r3, r2
 80075de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	f003 0307 	and.w	r3, r3, #7
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d014      	beq.n	8007614 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f023 0307 	bic.w	r3, r3, #7
 80075f0:	3308      	adds	r3, #8
 80075f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f003 0307 	and.w	r3, r3, #7
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d00a      	beq.n	8007614 <pvPortMalloc+0x6c>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	617b      	str	r3, [r7, #20]
}
 8007610:	bf00      	nop
 8007612:	e7fe      	b.n	8007612 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	2b00      	cmp	r3, #0
 8007618:	d06e      	beq.n	80076f8 <pvPortMalloc+0x150>
 800761a:	4b45      	ldr	r3, [pc, #276]	; (8007730 <pvPortMalloc+0x188>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	429a      	cmp	r2, r3
 8007622:	d869      	bhi.n	80076f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007624:	4b43      	ldr	r3, [pc, #268]	; (8007734 <pvPortMalloc+0x18c>)
 8007626:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007628:	4b42      	ldr	r3, [pc, #264]	; (8007734 <pvPortMalloc+0x18c>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762e:	e004      	b.n	800763a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007632:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800763a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	687a      	ldr	r2, [r7, #4]
 8007640:	429a      	cmp	r2, r3
 8007642:	d903      	bls.n	800764c <pvPortMalloc+0xa4>
 8007644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f1      	bne.n	8007630 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800764c:	4b36      	ldr	r3, [pc, #216]	; (8007728 <pvPortMalloc+0x180>)
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007652:	429a      	cmp	r2, r3
 8007654:	d050      	beq.n	80076f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007656:	6a3b      	ldr	r3, [r7, #32]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2208      	movs	r2, #8
 800765c:	4413      	add	r3, r2
 800765e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007662:	681a      	ldr	r2, [r3, #0]
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766a:	685a      	ldr	r2, [r3, #4]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	1ad2      	subs	r2, r2, r3
 8007670:	2308      	movs	r3, #8
 8007672:	005b      	lsls	r3, r3, #1
 8007674:	429a      	cmp	r2, r3
 8007676:	d91f      	bls.n	80076b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	4413      	add	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007680:	69bb      	ldr	r3, [r7, #24]
 8007682:	f003 0307 	and.w	r3, r3, #7
 8007686:	2b00      	cmp	r3, #0
 8007688:	d00a      	beq.n	80076a0 <pvPortMalloc+0xf8>
	__asm volatile
 800768a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768e:	f383 8811 	msr	BASEPRI, r3
 8007692:	f3bf 8f6f 	isb	sy
 8007696:	f3bf 8f4f 	dsb	sy
 800769a:	613b      	str	r3, [r7, #16]
}
 800769c:	bf00      	nop
 800769e:	e7fe      	b.n	800769e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	685a      	ldr	r2, [r3, #4]
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	1ad2      	subs	r2, r2, r3
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	687a      	ldr	r2, [r7, #4]
 80076b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076b2:	69b8      	ldr	r0, [r7, #24]
 80076b4:	f000 f908 	bl	80078c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076b8:	4b1d      	ldr	r3, [pc, #116]	; (8007730 <pvPortMalloc+0x188>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	1ad3      	subs	r3, r2, r3
 80076c2:	4a1b      	ldr	r2, [pc, #108]	; (8007730 <pvPortMalloc+0x188>)
 80076c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076c6:	4b1a      	ldr	r3, [pc, #104]	; (8007730 <pvPortMalloc+0x188>)
 80076c8:	681a      	ldr	r2, [r3, #0]
 80076ca:	4b1b      	ldr	r3, [pc, #108]	; (8007738 <pvPortMalloc+0x190>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d203      	bcs.n	80076da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076d2:	4b17      	ldr	r3, [pc, #92]	; (8007730 <pvPortMalloc+0x188>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a18      	ldr	r2, [pc, #96]	; (8007738 <pvPortMalloc+0x190>)
 80076d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x184>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	431a      	orrs	r2, r3
 80076e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ea:	2200      	movs	r2, #0
 80076ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076ee:	4b13      	ldr	r3, [pc, #76]	; (800773c <pvPortMalloc+0x194>)
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	3301      	adds	r3, #1
 80076f4:	4a11      	ldr	r2, [pc, #68]	; (800773c <pvPortMalloc+0x194>)
 80076f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076f8:	f7fe fc08 	bl	8005f0c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076fc:	69fb      	ldr	r3, [r7, #28]
 80076fe:	f003 0307 	and.w	r3, r3, #7
 8007702:	2b00      	cmp	r3, #0
 8007704:	d00a      	beq.n	800771c <pvPortMalloc+0x174>
	__asm volatile
 8007706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770a:	f383 8811 	msr	BASEPRI, r3
 800770e:	f3bf 8f6f 	isb	sy
 8007712:	f3bf 8f4f 	dsb	sy
 8007716:	60fb      	str	r3, [r7, #12]
}
 8007718:	bf00      	nop
 800771a:	e7fe      	b.n	800771a <pvPortMalloc+0x172>
	return pvReturn;
 800771c:	69fb      	ldr	r3, [r7, #28]
}
 800771e:	4618      	mov	r0, r3
 8007720:	3728      	adds	r7, #40	; 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	20004ad8 	.word	0x20004ad8
 800772c:	20004aec 	.word	0x20004aec
 8007730:	20004adc 	.word	0x20004adc
 8007734:	20004ad0 	.word	0x20004ad0
 8007738:	20004ae0 	.word	0x20004ae0
 800773c:	20004ae4 	.word	0x20004ae4

08007740 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b086      	sub	sp, #24
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	2b00      	cmp	r3, #0
 8007750:	d04d      	beq.n	80077ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007752:	2308      	movs	r3, #8
 8007754:	425b      	negs	r3, r3
 8007756:	697a      	ldr	r2, [r7, #20]
 8007758:	4413      	add	r3, r2
 800775a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800775c:	697b      	ldr	r3, [r7, #20]
 800775e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007760:	693b      	ldr	r3, [r7, #16]
 8007762:	685a      	ldr	r2, [r3, #4]
 8007764:	4b24      	ldr	r3, [pc, #144]	; (80077f8 <vPortFree+0xb8>)
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	4013      	ands	r3, r2
 800776a:	2b00      	cmp	r3, #0
 800776c:	d10a      	bne.n	8007784 <vPortFree+0x44>
	__asm volatile
 800776e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007772:	f383 8811 	msr	BASEPRI, r3
 8007776:	f3bf 8f6f 	isb	sy
 800777a:	f3bf 8f4f 	dsb	sy
 800777e:	60fb      	str	r3, [r7, #12]
}
 8007780:	bf00      	nop
 8007782:	e7fe      	b.n	8007782 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007784:	693b      	ldr	r3, [r7, #16]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d00a      	beq.n	80077a2 <vPortFree+0x62>
	__asm volatile
 800778c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007790:	f383 8811 	msr	BASEPRI, r3
 8007794:	f3bf 8f6f 	isb	sy
 8007798:	f3bf 8f4f 	dsb	sy
 800779c:	60bb      	str	r3, [r7, #8]
}
 800779e:	bf00      	nop
 80077a0:	e7fe      	b.n	80077a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	685a      	ldr	r2, [r3, #4]
 80077a6:	4b14      	ldr	r3, [pc, #80]	; (80077f8 <vPortFree+0xb8>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	4013      	ands	r3, r2
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d01e      	beq.n	80077ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077b0:	693b      	ldr	r3, [r7, #16]
 80077b2:	681b      	ldr	r3, [r3, #0]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d11a      	bne.n	80077ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	685a      	ldr	r2, [r3, #4]
 80077bc:	4b0e      	ldr	r3, [pc, #56]	; (80077f8 <vPortFree+0xb8>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	43db      	mvns	r3, r3
 80077c2:	401a      	ands	r2, r3
 80077c4:	693b      	ldr	r3, [r7, #16]
 80077c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077c8:	f7fe fb92 	bl	8005ef0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	685a      	ldr	r2, [r3, #4]
 80077d0:	4b0a      	ldr	r3, [pc, #40]	; (80077fc <vPortFree+0xbc>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	4413      	add	r3, r2
 80077d6:	4a09      	ldr	r2, [pc, #36]	; (80077fc <vPortFree+0xbc>)
 80077d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077da:	6938      	ldr	r0, [r7, #16]
 80077dc:	f000 f874 	bl	80078c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077e0:	4b07      	ldr	r3, [pc, #28]	; (8007800 <vPortFree+0xc0>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	3301      	adds	r3, #1
 80077e6:	4a06      	ldr	r2, [pc, #24]	; (8007800 <vPortFree+0xc0>)
 80077e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077ea:	f7fe fb8f 	bl	8005f0c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077ee:	bf00      	nop
 80077f0:	3718      	adds	r7, #24
 80077f2:	46bd      	mov	sp, r7
 80077f4:	bd80      	pop	{r7, pc}
 80077f6:	bf00      	nop
 80077f8:	20004aec 	.word	0x20004aec
 80077fc:	20004adc 	.word	0x20004adc
 8007800:	20004ae8 	.word	0x20004ae8

08007804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800780a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800780e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007810:	4b27      	ldr	r3, [pc, #156]	; (80078b0 <prvHeapInit+0xac>)
 8007812:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f003 0307 	and.w	r3, r3, #7
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00c      	beq.n	8007838 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	3307      	adds	r3, #7
 8007822:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	f023 0307 	bic.w	r3, r3, #7
 800782a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800782c:	68ba      	ldr	r2, [r7, #8]
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	1ad3      	subs	r3, r2, r3
 8007832:	4a1f      	ldr	r2, [pc, #124]	; (80078b0 <prvHeapInit+0xac>)
 8007834:	4413      	add	r3, r2
 8007836:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800783c:	4a1d      	ldr	r2, [pc, #116]	; (80078b4 <prvHeapInit+0xb0>)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007842:	4b1c      	ldr	r3, [pc, #112]	; (80078b4 <prvHeapInit+0xb0>)
 8007844:	2200      	movs	r2, #0
 8007846:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68ba      	ldr	r2, [r7, #8]
 800784c:	4413      	add	r3, r2
 800784e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007850:	2208      	movs	r2, #8
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	1a9b      	subs	r3, r3, r2
 8007856:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	f023 0307 	bic.w	r3, r3, #7
 800785e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	4a15      	ldr	r2, [pc, #84]	; (80078b8 <prvHeapInit+0xb4>)
 8007864:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <prvHeapInit+0xb4>)
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2200      	movs	r2, #0
 800786c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800786e:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <prvHeapInit+0xb4>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2200      	movs	r2, #0
 8007874:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	68fa      	ldr	r2, [r7, #12]
 800787e:	1ad2      	subs	r2, r2, r3
 8007880:	683b      	ldr	r3, [r7, #0]
 8007882:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <prvHeapInit+0xb4>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	683b      	ldr	r3, [r7, #0]
 800788a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800788c:	683b      	ldr	r3, [r7, #0]
 800788e:	685b      	ldr	r3, [r3, #4]
 8007890:	4a0a      	ldr	r2, [pc, #40]	; (80078bc <prvHeapInit+0xb8>)
 8007892:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007894:	683b      	ldr	r3, [r7, #0]
 8007896:	685b      	ldr	r3, [r3, #4]
 8007898:	4a09      	ldr	r2, [pc, #36]	; (80078c0 <prvHeapInit+0xbc>)
 800789a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800789c:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <prvHeapInit+0xc0>)
 800789e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80078a2:	601a      	str	r2, [r3, #0]
}
 80078a4:	bf00      	nop
 80078a6:	3714      	adds	r7, #20
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	20000ed0 	.word	0x20000ed0
 80078b4:	20004ad0 	.word	0x20004ad0
 80078b8:	20004ad8 	.word	0x20004ad8
 80078bc:	20004ae0 	.word	0x20004ae0
 80078c0:	20004adc 	.word	0x20004adc
 80078c4:	20004aec 	.word	0x20004aec

080078c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078c8:	b480      	push	{r7}
 80078ca:	b085      	sub	sp, #20
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078d0:	4b28      	ldr	r3, [pc, #160]	; (8007974 <prvInsertBlockIntoFreeList+0xac>)
 80078d2:	60fb      	str	r3, [r7, #12]
 80078d4:	e002      	b.n	80078dc <prvInsertBlockIntoFreeList+0x14>
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	60fb      	str	r3, [r7, #12]
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	687a      	ldr	r2, [r7, #4]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d8f7      	bhi.n	80078d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	68ba      	ldr	r2, [r7, #8]
 80078f0:	4413      	add	r3, r2
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d108      	bne.n	800790a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	441a      	add	r2, r3
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	68ba      	ldr	r2, [r7, #8]
 8007914:	441a      	add	r2, r3
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	429a      	cmp	r2, r3
 800791c:	d118      	bne.n	8007950 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681a      	ldr	r2, [r3, #0]
 8007922:	4b15      	ldr	r3, [pc, #84]	; (8007978 <prvInsertBlockIntoFreeList+0xb0>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	429a      	cmp	r2, r3
 8007928:	d00d      	beq.n	8007946 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	441a      	add	r2, r3
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	681a      	ldr	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	e008      	b.n	8007958 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007946:	4b0c      	ldr	r3, [pc, #48]	; (8007978 <prvInsertBlockIntoFreeList+0xb0>)
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	e003      	b.n	8007958 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007958:	68fa      	ldr	r2, [r7, #12]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	429a      	cmp	r2, r3
 800795e:	d002      	beq.n	8007966 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	687a      	ldr	r2, [r7, #4]
 8007964:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007966:	bf00      	nop
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr
 8007972:	bf00      	nop
 8007974:	20004ad0 	.word	0x20004ad0
 8007978:	20004ad8 	.word	0x20004ad8

0800797c <memset>:
 800797c:	4402      	add	r2, r0
 800797e:	4603      	mov	r3, r0
 8007980:	4293      	cmp	r3, r2
 8007982:	d100      	bne.n	8007986 <memset+0xa>
 8007984:	4770      	bx	lr
 8007986:	f803 1b01 	strb.w	r1, [r3], #1
 800798a:	e7f9      	b.n	8007980 <memset+0x4>

0800798c <__libc_init_array>:
 800798c:	b570      	push	{r4, r5, r6, lr}
 800798e:	4d0d      	ldr	r5, [pc, #52]	; (80079c4 <__libc_init_array+0x38>)
 8007990:	4c0d      	ldr	r4, [pc, #52]	; (80079c8 <__libc_init_array+0x3c>)
 8007992:	1b64      	subs	r4, r4, r5
 8007994:	10a4      	asrs	r4, r4, #2
 8007996:	2600      	movs	r6, #0
 8007998:	42a6      	cmp	r6, r4
 800799a:	d109      	bne.n	80079b0 <__libc_init_array+0x24>
 800799c:	4d0b      	ldr	r5, [pc, #44]	; (80079cc <__libc_init_array+0x40>)
 800799e:	4c0c      	ldr	r4, [pc, #48]	; (80079d0 <__libc_init_array+0x44>)
 80079a0:	f000 f826 	bl	80079f0 <_init>
 80079a4:	1b64      	subs	r4, r4, r5
 80079a6:	10a4      	asrs	r4, r4, #2
 80079a8:	2600      	movs	r6, #0
 80079aa:	42a6      	cmp	r6, r4
 80079ac:	d105      	bne.n	80079ba <__libc_init_array+0x2e>
 80079ae:	bd70      	pop	{r4, r5, r6, pc}
 80079b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b4:	4798      	blx	r3
 80079b6:	3601      	adds	r6, #1
 80079b8:	e7ee      	b.n	8007998 <__libc_init_array+0xc>
 80079ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80079be:	4798      	blx	r3
 80079c0:	3601      	adds	r6, #1
 80079c2:	e7f2      	b.n	80079aa <__libc_init_array+0x1e>
 80079c4:	08007bb4 	.word	0x08007bb4
 80079c8:	08007bb4 	.word	0x08007bb4
 80079cc:	08007bb4 	.word	0x08007bb4
 80079d0:	08007bb8 	.word	0x08007bb8

080079d4 <memcpy>:
 80079d4:	440a      	add	r2, r1
 80079d6:	4291      	cmp	r1, r2
 80079d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80079dc:	d100      	bne.n	80079e0 <memcpy+0xc>
 80079de:	4770      	bx	lr
 80079e0:	b510      	push	{r4, lr}
 80079e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079ea:	4291      	cmp	r1, r2
 80079ec:	d1f9      	bne.n	80079e2 <memcpy+0xe>
 80079ee:	bd10      	pop	{r4, pc}

080079f0 <_init>:
 80079f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f2:	bf00      	nop
 80079f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079f6:	bc08      	pop	{r3}
 80079f8:	469e      	mov	lr, r3
 80079fa:	4770      	bx	lr

080079fc <_fini>:
 80079fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079fe:	bf00      	nop
 8007a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a02:	bc08      	pop	{r3}
 8007a04:	469e      	mov	lr, r3
 8007a06:	4770      	bx	lr
